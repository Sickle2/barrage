!function(e) {
    function t(a) {
        if (i[a])
            return i[a].exports;
        var s = i[a] = {
            i: a,
            l: !1,
            exports: {}
        };
        return e[a].call(s.exports, s, s.exports, t),
            s.l = !0,
            s.exports
    }
    var i = {};
    t.m = e,
        t.c = i,
        t.d = function(e, i, a) {
            t.o(e, i) || Object.defineProperty(e, i, {
                configurable: !1,
                enumerable: !0,
                get: a
            })
        }
        ,
        t.n = function(e) {
            var i = e && e.__esModule ? function() {
                    return e.default
                }
                : function() {
                    return e
                }
            ;
            return t.d(i, "a", i),
                i
        }
        ,
        t.o = function(e, t) {
            return Object.prototype.hasOwnProperty.call(e, t)
        }
        ,
        t.p = "",
        t(t.s = 5)
}([function(e, t, i) {
    "use strict";
    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = i(1)
        , n = (a(s),
        i(2))
        , r = a(n)
        , u = i(3)
        , o = a(u)
        , l = i(4)
        , d = a(l)
        , h = {
        ENV: null,
        vplayer: null,
        vplayerUI: null,
        logUtils: d.default,
        Event: o.default,
        menuItems: [],
        menuData: [[{
            text: "虎牙直播(H5)_1810311712"
        }], [], [{
            text: "查看视频信息",
            func: function() {
                o.default.fireEvent(o.default.SHOW_VIDEO_INFO)
            }
        }, {
            text: "视频问题反馈",
            func: function() {
                h.vplayerUI.showFeedback()
            }
        }, {
            text: "海量弹幕",
            func: function() {
                o.default.fireEvent(o.default.CHAT_MODE_CHANGE)
            }
        }]],
        streamSetFlag: !1
    };
    t.default = h,
        h.beginTime = Date.now(),
        h.serverTimeGap = 0,
        h.getServerTime = function() {
            return Date.now() + h.serverTimeGap
        }
        ,
        h.yyuid = parseInt(r.default.getCookie("yyuid")) || parseInt(r.default.getCookie("udb_uid")) || 0,
        h.isLogin = h.yyuid > 0,
        console.info("yyuid", h.yyuid, h.isLogin ? "" : "===未登录==="),
        h.appid = 0,
        h.topsid = 0,
        h.subsid = 0,
        h.videoLine = -1,
        h.flv = "",
        h.flacFlv = "",
        h.livingInfoRecorded = null,
        h.wsurl = "",
        h.wsconnected = !1,
        h.reConnectTimes = 0,
        h.wsIps = [],
        h.httpWs = [],
        h.badWsIps = [],
        h.badCode = [],
        h.badReason = "",
        h.loginRegister = !1,
        h.userIn = !1,
        h.wsConnectTime = 0,
        h.loginRegisterTime = 0,
        h.userInTime = 0,
        h.livingInfoTime = 0,
        h.firstVideoTime = 0,
        h.userId = null,
        h.presenterUid = 0,
        h.hasVideo = !1,
        h.isPlaying = !1,
        h.isPause = !1,
        h.isServPlaying = !1,
        h.isUIPause = !1,
        h.enforceLowestBitRate = !1,
        h.is360Video = !1,
        h.is360LibLoaded = !1,
        h.lLiveCompatibleFlag = 0,
        h.isVideoMaster = function() {
            return "" != h.yyuid && 0 != h.yyuid && 0 != h.presenterUid && h.yyuid == h.presenterUid
        }
        ,
        h.nobleInfo = null,
        h.livingInfo = null,
        h.streamInfo = null,
        h.isH265 = !1,
        h.SrcBitRate = 0,
        h.line0BitRateList = {},
        h.curBitRate = 0,
        h.getCurBitRate = function() {
            return h.curBitRate
        }
        ,
        h.getTrueBitRate = function() {
            var e = h.getCurBitRate();
            return 0 == e && (e = h.SrcBitRate),
                e
        }
        ,
        h.bitRateList0 = [],
        h.bitRateList1 = [],
        h.isLine0Inited = !1,
        h.getBitRateList = function() {
            return h.bitRateList1
        }
        ,
        h.BitRate = [500, 800, 1e3, 1200, 1500, 2e3, 2500, 3e3, 3500, 4e3, 4500, 6500, 8500],
        h.BitRateName = ["流畅", "高清", "超清", "蓝光"],
        h.BitRate1 = {
            500: "0500",
            800: "0800",
            1200: "1200",
            2000: "2000",
            1500: "1500"
        },
        h.BitRate2 = {
            1000: "22001",
            2500: "22002",
            3000: "22003",
            3500: "22004",
            4000: "22005",
            4500: "22006",
            6500: "22007",
            8500: "22008"
        },
        h.getBitRateName = function(e) {
            return e >= 3e3 ? "蓝光" : e >= 1500 ? "超清" : e >= 1e3 ? "高清" : e >= 800 ? "标清" : "流畅"
        }
        ,
        h.H5ROOT = "//a.msstatic.com/huya/h5player/room/1810311712/",
        function() {
            for (var e = document.scripts, t = 0, i = e.length; t < i; t++) {
                var a = e[t].src
                    , s = a.match(/\/vplayer.*?\.js/);
                if (s) {
                    h.H5ROOT = a.substring(0, s.index + 1);
                    break
                }
            }
        }(),
        h.propsDict = {},
        h.userInfo = null,
        h.isUserInfoInited = function() {
            return null != h.userInfo
        }
        ,
        h.getUserName = function() {
            return h.userInfo && h.userInfo.sPassport || r.default.getCookie("username")
        }
        ,
        h.getNickName = function() {
            return h.userInfo && h.userInfo.sNick || ""
        }
        ,
        h.encryptIps = localStorage.wssips,
        h.isFullSize = !1,
        h.isFullscreen = !1,
        h.isShowDanmu = !0,
        h.isLoginTipShow = !1,
        h.isFromApp = !1,
        h.isYanzhi = !1,
        h.isMobileStarShow = !1,
        h.arrEmoji = ["/{dx", "/{pz", "/{fn", "/{tp", "/{jy", "/{ot", "/{ng", "/{hk", "/{kz", "/{wx", "/{se", "/{tx", "/{lh", "/{hp", "/{am", "/{kun", "/{by", "/{ka", "/{cy", "/{kx", "/{ll", "/{fd", "/{yw", "/{xu", "/{yun", "/{zs", "/{88", "/{qd", "/{kl", "/{dy", "/{hx", "/{bz", "/{yb", "/{dai", "/{sj", "/{zt", "/{gz", "/{qq", "/{kb", "/{wq", "/{yx", "/{kel", "/{bs", "/{zk", "/{bq", "/{ok", "/{zan", "/{ruo", "/{ws", "/{sl", "/{mg", "/{kw", "/{wen", "/{xd", "/{xs", "/{lw", "/{sd", "/{zd", "/{dao", "/{cc", "/{dk", "/{hh", "/{66", "/{jx", "/{pu", "/{zc", "/{fe", "/{xk", "/{bk", "/{hq", "/{gl", "/{cl", "/{sh", "/{gd", "/{xh", "/{sq", "/{dg", "&#x221C1;", "&#x1F601;"],
        h.regEmoji = new RegExp(h.arrEmoji.join("|"),"g"),
        h.udbAppid = 5700,
        h.udbAppkey = "Ol2lAiO05O8RwRGsK5xbo55bxtykKAFM",
        h._needTokenWup = [],
        h.needTokenWup = {};
    for (var f = 0, c = h._needTokenWup.length; f < c; f++) {
        var p = h._needTokenWup[f];
        h.needTokenWup[p] = !0
    }
    h.iAttendeeCount = 0,
        h.useHttps = !1,
        h.isReplay = !1,
        h.lGroupId = 0,
        h.lGroupType = 0,
        h.isKongZhong = !1,
        h.h5Log = [],
        h.deleteOriginalPainting = function() {
            var e = h.ENV;
            if (!e.deleteOriginalPainting || "-1" == e.deleteOriginalPainting)
                return !1;
            for (var t, i, a = e.deleteOriginalPainting.split(","), s = 0; s < a.length; s++) {
                var n = a[s]
                    , a = "string" == typeof n ? n.split("_") : [];
                if (a.length > 1) {
                    if (i = a[0],
                        t = a[1],
                    h.topsid == i && h.subsid == t)
                        return !0
                } else if (i = n,
                h.topsid == i)
                    return !0
            }
            return !1
        }
        ,
        h.isInGopChannel = function() {
            var e = h.ENV;
            if (!e.h5gopChannel || "-1" == e.h5gopChannel)
                return !1;
            for (var t, i, a = e.h5gopChannel.split(","), s = 0; s < a.length; s++) {
                var n = a[s]
                    , r = "string" == typeof n ? n.split("_") : [];
                if (r.length > 1) {
                    if (i = r[0],
                        t = r[1],
                    h.topsid == i && h.subsid == t)
                        return !0
                } else if (i = n,
                h.topsid == i)
                    return !0
            }
            return !1
        }
        ,
        h.iCdnPolicyLevel = 0,
        h.specialGameId = [2135, 2333, 2356, 2408, 2409],
        h.useHuyaSdk = !0,
        h.useP2p = !1,
        h.flvUseHttps = !1,
        h.isPlaying = !1,
        h.isShowPresentRecommend = !1,
        h.isFirstVideoPlay = !1,
        h.isMaxDanmu = !1,
        h.ishowRecommend = !1,
        h.flvTokenList = [],
        h.priorityGiftShowNum = 8,
        h.allGiftShowNum = 8,
        h.volume = 0,
        h.isPlayAbs = !1,
        h.isPaused = !1,
        h.isP2pPlayIng = !1,
        h.activityBannerDebugIdArr = ["243", "241"],
        h.activityBannerOnlineIdArr = ["5", "4"],
        h.questionBannerIdArr = [253, 7],
        h.liveid = "0",
        h.sSchedule = "",
        h.sDescription = "",
        h.isHttps = function() {
            var e = window.location.host.split(".")[0];
            return !("test" == e || "develop" == e)
        }
        ,
        h.visibilityState = "visible",
        h.isUnion = !1,
        h.lXid = 0,
        h.isShieldingEffect = !1,
        h.isManager = !1,
        h.bDirector = !1,
        h.isOpenFlac = !1,
        h.flacSwitch = !0,
        h.isCheckDefBit = !1,
        h.judgPlayerData = function(e) {
            var t = h.ENV;
            if (!t.cfg)
                return !1;
            var i = t.cfg.playerdata;
            if (i = r.default.unescapeHTML(i),
                i = JSON.parse(i),
                !i[e])
                return !1;
            if (1 == i[e])
                return !0;
            if (0 == i[e])
                return !1;
            if ("openp2p" == e)
                return 1 == i[e];
            var a = i[e].split(",");
            if ("p2ppid" == e || "danmuMaskOpenPid" == e)
                return -1 != a.indexOf(h.presenterUid.toString());
            for (var s, n, u = 0; u < a.length; u++) {
                var o = a[u]
                    , l = "string" == typeof o ? o.split("_") : [];
                if (l.length > 1) {
                    if (n = l[0],
                        s = l[1],
                    h.topsid == n && h.subsid == s)
                        return !0
                } else if (n = o,
                h.topsid == n)
                    return !0
            }
            return !1
        }
        ,
        h.sdkExtendConfig = {},
        h.p2pBitrate,
        h.isInP2PBitratePrivilege,
        h.p2pLineClose = [],
        h.registGroup = !1,
        h.danmuMask = !0,
        h.setConfigData = function() {
            var e = h.judgPlayerData("p2p")
                , t = h.judgPlayerData("p2ppid");
            h.flvUseHttps = h.judgPlayerData("flvhttps"),
                h.useHttps = h.judgPlayerData("usehttps"),
                h.registGroup = h.judgPlayerData("registGroup"),
                h.flacSwitch = h.judgPlayerData("flacSwitch"),
                h.danmuMask = h.judgPlayerData("danmuMask"),
                h.danmuMaskOpen = h.judgPlayerData("danmuMaskOpenPid");
            var i = h.ENV.cfg.playerdata;
            i = r.default.unescapeHTML(i),
                i = JSON.parse(i),
                h.sdkExtendConfig.sdk = i.sdk,
                h.p2pBitrate = i.p2pBitrate || 0,
                h.isInP2PBitratePrivilege = h.judgPlayerData("p2pBitratePrivilege");
            var a = i.p2pLineClose;
            a && (h.p2pLineClose = a.split(",")),
            h.isHttps() && (h.flvUseHttps = !0);
            var s = 1 == e || 1 == t
                , n = h.judgPlayerData("openp2p");
            h.useP2p = n ? !s : s
        }
        ,
        h.makeHttpsUrl = function(e) {
            return e = e.replace("http:", "https:")
        }
}
    , function(e, t, i) {
        "use strict";
        function a(e) {
            return e && e.__esModule ? e : {
                default: e
            }
        }
        function s() {
            return l.default.getDateTimeStr() + ""
        }
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                return typeof e
            }
            : function(e) {
                return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
            }
            , r = i(7)
            , u = a(r)
            , o = i(2)
            , l = a(o)
            , d = 0
            , h = !0
            , f = {
            _data: [],
            _length: 0,
            _printAudioFrame: !!Number(localStorage._printAudioFrame),
            _printVideoFrame: !!Number(localStorage._printVideoFrame),
            getLogTimeState: function() {
                return h
            },
            setLogTimeState: function(e) {
                h != !!e && (f.log("setLogTimeState to " + !!e),
                    h = !!e)
            },
            debug: function() {
                var e = s()
                    , t = Array.apply(null, arguments);
                d <= -1 && (h && (t[0] = e + " " + t[0]),
                    console.log.apply(console, t))
            },
            log: function(e) {
                var t = s()
                    , i = Array.apply(null, arguments);
                d <= 0 && (h && (i[0] = t + " " + i[0]),
                    console.log.apply(console, i)),
                    f.record(t, i, "log")
            },
            info: function(e) {
                var t = s()
                    , i = Array.apply(null, arguments);
                d <= 1 && (h && (i[0] = t + " " + i[0]),
                    console.info.apply(console, i)),
                    f.record(t, i, "info")
            },
            warn: function(e) {
                var t = s()
                    , i = Array.apply(null, arguments);
                d <= 2 && (h && (i[0] = t + " " + i[0]),
                    console.warn.apply(console, i)),
                    f.record(t, i, "warn")
            },
            error: function(e) {
                var t = s()
                    , i = Array.apply(null, arguments);
                d <= 3 && (h && (i[0] = t + " " + i[0]),
                    console.error.apply(console, i)),
                    f.record(t, i, "error")
            },
            group: function(e) {
                var t = s()
                    , i = Array.apply(null, arguments);
                if (d <= 1) {
                    h && (i[0] = t + " " + i[0]);
                    (console.groupCollapsed || console.group || console.log).apply(console, i)
                }
                f.record(t, i, "group")
            },
            groupEnd: function() {
                console.groupEnd && console.groupEnd.apply(console)
            },
            setLevel: function(e) {
                e != d && (console.log(s() + " set log level from " + d + " to " + e),
                    d = e)
            },
            getLevel: function() {
                return d
            },
            record: function(e, t, i) {
                1100 === f._length && (f._data.splice(0, 100),
                    f._length = 1e3);
                var a = 0
                    , s = (t.shift() || "").toString();
                for (s = s.replace(/\%c/gi, function(e, t) {
                    return a++,
                        ""
                }); a-- && t.length; )
                    t.shift();
                for (var r = 0, u = t.length; r < u; r++) {
                    var o = t[r];
                    "object" == (void 0 === o ? "undefined" : n(o)) && (t[r] = "")
                }
                t.unshift(e, s);
                var l = t.join(" ");
                f._length++,
                    f._data.push("[" + i + "]" + l)
            },
            getLog: function() {
                return f._data.unshift(u.default.platform + " " + u.default.name + " " + u.default.version.string),
                    f._data
            }
        };
        t.default = f
    }
    , function(e, t, i) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var a = {
            downloadFile: function(e, t) {
                if (e) {
                    t = t || "console.log";
                    var i = new Blob([e],{
                        type: "text/plain"
                    })
                        , a = document.createEvent("MouseEvents")
                        , s = document.createElement("a");
                    s.download = t,
                        s.href = window.URL.createObjectURL(i),
                        s.dataset.downloadurl = ["text/plain", s.download, s.href].join(":"),
                        a.initMouseEvent("click", !0, !1, window, 0, 0, 0, 0, 0, !1, !1, !1, !1, 0, null),
                        s.dispatchEvent(a),
                        s = a = i = null
                }
            },
            setCookie: function(e, t, i, a) {
                var s = new Date;
                s.setTime(s.getTime() + 24 * i * 60 * 60 * 1e3);
                var n = "expires=" + s.toUTCString()
                    , r = e + "=" + t + "; " + n;
                a && (r += "; domain=" + a),
                    document.cookie = r
            },
            getCookie: function(e) {
                for (var t = e + "=", i = document.cookie.split(";"), a = 0, s = i.length; a < s; a++) {
                    var n = i[a].trim();
                    if (0 == n.indexOf(t))
                        return n.substr(t.length)
                }
                return ""
            },
            clearCookie: function(e) {
                setCookie(e, "", -1)
            },
            getQueryString: function(e) {
                var t = new RegExp("(^|&)" + e + "=([^&]*)(&|$)")
                    , i = window.location.search.substr(1).match(t);
                return null != i ? unescape(i[2]) : null
            },
            unescapeHTML: function(e) {
                return e = "" + e,
                    e.replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&amp;/g, "&").replace(/&quot;/g, '"').replace(/&apos;/g, "'")
            },
            linkToFlash: function() {
                var e = window.location.href;
                e.indexOf("?") >= 0 ? e += "&playerflash=1" : e += "?playerflash=1",
                    window.location.href = e
            },
            padNum: function(e, t) {
                return "0".repeat(t - e.toString().length) + e
            },
            getDateTimeStr: function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : NaN
                    , t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1]
                    , i = null;
                i = e ? new Date(e) : new Date;
                var s = i.getFullYear()
                    , n = a.padNum(i.getMonth() + 1, 2)
                    , r = a.padNum(i.getDate(), 2)
                    , u = a.padNum(i.getHours(), 2)
                    , o = a.padNum(i.getMinutes(), 2)
                    , l = a.padNum(i.getSeconds(), 2)
                    , d = s + "-" + n + "-" + r + " " + u + ":" + o + ":" + l;
                if (t) {
                    d += "." + a.padNum(i.getMilliseconds(), 3)
                }
                return d
            }
        };
        t.default = a
    }
    , function(e, t, i) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var a = i(0)
            , s = function(e) {
            return e && e.__esModule ? e : {
                default: e
            }
        }(a)
            , n = {
            addEvent: function(e, t) {
                s.default.vplayer.on(e, t)
            },
            removeEvent: function(e, t) {
                s.default.vplayer.off(e, t)
            },
            fireEvent: function(e, t) {
                s.default.vplayer.trigger(e, t)
            },
            WEBSOCKET_INITED: "WEBSOCKET_INITED",
            VIDEO_FIRST_PLAY: "VIDEO_FIRST_PLAY",
            PLAYER_UI_INITED: "PLAYER_UI_INITED",
            USER_INFO_INITED: "USER_INFO_INITED",
            VIDEO_PLAY: "VIDEO_PLAY",
            VIDEO_STOP: "VIDEO_STOP",
            PROPS_INITED: "PROPS_INITED",
            DYNAMIC_LOGIN: "DYNAMIC_LOGIN",
            CHANGE_TO_FLASH: "CHANGE_TO_FLASH",
            SHOW_BITRATE_TIP: "SHOW_BITRATE_TIP",
            FUllSCREEN_CHANGE: "FUllSCREEN_CHANGE",
            FUll_OR_WEBFULL_SCREEN_CHANGE: "FUll_OR_WEBFULL_SCREEN_CHANGE",
            NEW_VIDEO: "NEW_VIDEO",
            SHOW_VIDEO_INFO: "SHOW_VIDEO_INFO",
            SHOW_MARQUEE: "SHOW_MARQUEE",
            ATTENDEE_COUNT_CHANGE: "ATTENDEE_COUNT_CHANGE",
            REPlAY_START_PLAY: "REPlAY_START_PLAY",
            PlAY_CHANNEl: "PlAY_CHANNEl",
            GET_GAMELIVE_HISUPON_REQ: "GET_GAMELIVE_HISUPON_REQ",
            PAUSE_VIDEO: "PAUSE_VIDEO",
            REFRESH_VISUALANGLE: "REFRESH_VISUALANGLE",
            SHOW_A_SCENE_LEAD: "SHOW_A_SCENE_LEAD",
            SHOW_RECOMMEND: "SHOW_RECOMMEND",
            HIDE_RECOMMEND: "HIDE_RECOMMEND",
            SHOW_PRESENT_RECOMMEND: "SHOW_PRESENT_RECOMMEND",
            VOLUME_CHANGE: "VOLUME_CHANGE",
            AUTO_FEEDBACK: "AUTO_FEEDBACK",
            DATA_METRIC: "DATA_METRIC",
            DATA_METRIC2: "DATA_METRIC2",
            SAVE_BAG_SET: "saveBagSet",
            GIVE_GIFT: "giveGift",
            TONGJI_READY: "tongjiReady",
            PLAYER_FLOAT: "playerFloat",
            QUIT_FULL_SCREEN: "quitFullScreen",
            QUIT_FULL_MODE: "quitFullMode",
            MSG_SHIELD_CFG: "msgShieldCfg",
            BLOCK_WORDS_UPDATE: "blockWordsUpdate",
            SUBSCRIBE_STATUS_CHANGE: "subscribeStatusChange",
            SHIPIN_PLAY: "shipinPlay",
            SHIPIN_PAUSE: "shipinPause",
            PLAY_AGAIN: "PLAY_AGAIN",
            SWITCH_LINE: "SWITCH_LINE",
            UPDATE_BTS_VISIBLE: "updateBtnsVisible",
            CLEAR_PLAYER_EFFECT: "clearPlayerEffect",
            CHAT_MODE_CHANGE: "CHAT_MODE_CHANGE",
            GET_FLAC_TOKEN: "GET_FLAC_TOKEN",
            FLAC_SUCCESS: "FLAC_SUCCESS",
            FLAC_FAIL: "FLAC_FAIL",
            PLAY_TIPS: "PLAY_TIPS",
            SET_SEI: "SET_SEI",
            LINK_MIC_STATE_CHANGE: "LINK_MIC_STATE_CHANGE",
            SHOW_COMMON_TOAST: "SHOW_COMMON_TOAST",
            HLS_FIRST_PLAY: "HLS_FIRST_PLAY",
            FORENOTICE_UPDATE: "FORENOTICE_UPDATE"
        };
        s.default.Event = n,
            t.default = n
    }
    , function(e, t, i) {
        "use strict";
        function a() {
            function e(e) {
                r.default.h5Log.length > 100 && (r.default.h5Log = r.default.h5Log.slice(10));
                var t = ""
                    , i = new Date
                    , a = i.toLocaleString();
                t = "object" == (void 0 === e ? "undefined" : s(e)) ? a + "  " + JSON.stringify(e) : a + "  " + e,
                    r.default.h5Log.push(t)
            }
            function t(e) {
                if (-1 == a.indexOf(e))
                    u.push(e),
                    u.length > 200 && (u = u.slice(10));
                else {
                    var t = n.get(e);
                    t ? (t++,
                        n.set(e, t)) : n.set(e, 1)
                }
            }
            function i() {
                var e = u.join(",");
                return n.set("uri", e),
                    n
            }
            var a = [1400, 7501, 6501, 7707, 6223, 6110, 6630, 8006, 6210, 8007, 3102, 3104, 1024344]
                , n = new Map
                , u = [];
            window.makeUriLog = i,
                this.addLog = e,
                this.addUri = t,
                this.makeUriLog = i
        }
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var s = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                return typeof e
            }
            : function(e) {
                return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
            }
            , n = i(0)
            , r = function(e) {
            return e && e.__esModule ? e : {
                default: e
            }
        }(n)
            , u = new a;
        t.default = u
    }
    , function(e, t, i) {
        "use strict";
        function a(e) {
            return e && e.__esModule ? e : {
                default: e
            }
        }
        function s(e, t) {
            if (!(e instanceof t))
                throw new TypeError("Cannot call a class as a function")
        }
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var n = function() {
            function e(e, t) {
                for (var i = 0; i < t.length; i++) {
                    var a = t[i];
                    a.enumerable = a.enumerable || !1,
                        a.configurable = !0,
                    "value"in a && (a.writable = !0),
                        Object.defineProperty(e, a.key, a)
                }
            }
            return function(t, i, a) {
                return i && e(t.prototype, i),
                a && e(t, a),
                    t
            }
        }()
            , r = i(6)
            , u = a(r)
            , o = i(1)
            , l = a(o)
            , d = i(8)
            , h = a(d)
            , f = i(0)
            , c = a(f)
            , p = i(3)
            , v = a(p)
            , m = i(2)
            , y = a(m)
            , _ = i(9)
            , S = a(_)
            , g = i(10)
            , T = a(g);
        i(11);
        var P = function() {
            function e(t) {
                var a = this;
                s(this, e),
                    l.default.warn("vplayer 1810311712 | 2018-10-31 17:12:44"),
                    l.default.log("location", location.href, t);
                var n = i(12);
                $(t.idDom).html(n),
                t.isSimple && $("#player-gift-wrap").hide(),
                    this.G = c.default;
                var r = t;
                c.default.ENV = this.ENV = r,
                    c.default.vplayer = this,
                    c.default.ENV.register(this),
                    r.gameId = y.default.getQueryString("gameId") || r.gameId,
                    r.online = y.default.getQueryString("online"),
                    r.isSimple = y.default.getQueryString("isSimple") || r.isSimple;
                var u = y.default.getQueryString("topSid")
                    , o = y.default.getQueryString("subSid")
                    , d = y.default.getQueryString("appid");
                d = 3 == r.iSourceType ? 10506 : d,
                    c.default.topsid = Number(u || r.chTopId),
                    c.default.subsid = Number(o || r.subChId),
                    c.default.appid = Number(d || r.vappid),
                    c.default.isUnion = r.isUnion,
                    c.default.isReplay = o ? 0 : r.replay,
                    c.default.vIdDom = r.idDom,
                    c.default.gameId = Number(r.gameId),
                    c.default.isFromApp = 2 == Number(r.iSourceType),
                    c.default.isYanzhi = 2168 == Number(r.gameId),
                    c.default.isMobileStarShow = 11 == Number(r.iSourceType),
                    c.default.isKongZhong = r.isKongZhong,
                    c.default.presenterUid = Number(r.eu),
                    c.default.setConfigData();
                var f = parseInt(localStorage.closep2p);
                isNaN(f) || (c.default.useP2p = !1),
                    S.default.setLiveInfoFromENV(r),
                    T.default.showLoading(),
                c.default.isReplay || (this.vcore = new h.default(this),
                    this.play()),
                    v.default.addEvent(v.default.VIDEO_FIRST_PLAY, this.videoFirstPlay.bind(this)),
                    this.loadtime = setTimeout(function() {
                        a._loadVPlayerUI()
                    }
                        .bind(), c.default.streamInfo ? 1e3 : 0),
                    this.isUILoaded = !1,
                    this.vplayerUI = null
            }
            return n(e, [{
                key: "videoFirstPlay",
                value: function() {
                    clearTimeout(this.loadtime),
                        this._loadVPlayerUI()
                }
            }, {
                key: "play",
                value: function() {
                    l.default.log("VPlayer.play"),
                    (c.default.streamInfo || c.default.livingInfo) && this.vcore.play()
                }
            }, {
                key: "stop",
                value: function() {
                    l.default.log("VPlayer.stop"),
                        this.vcore.stop()
                }
            }, {
                key: "playFlac",
                value: function() {
                    this.vcore.playFlac()
                }
            }, {
                key: "stopFlac",
                value: function() {
                    this.vcore.stopFlac()
                }
            }, {
                key: "_loadVPlayerUI",
                value: function() {
                    var e = this;
                    if (!this.isUILoaded) {
                        this.isUILoaded = !0;
                        var t = Date.now();
                        $.ajax({
                            url: c.default.H5ROOT + "vplayerUI.js",
                            dataType: "script",
                            cache: !0,
                            success: function() {
                                var i = Date.now();
                                l.default.log("vplayerUI loaded in " + (i - t) + "ms"),
                                    c.default.vplayerUI = e.vplayerUI = new VPlayerUI(e,1810311712)
                            }
                                .bind(this)
                        })
                    }
                }
            }, {
                key: "setLivingInfo",
                value: function(e) {
                    l.default.log("VPlayer.setLivingInfo"),
                        S.default.setLivingInfo(e)
                }
            }, {
                key: "setFlvToken",
                value: function(e) {
                    S.default.setFlvToken(e)
                }
            }, {
                key: "setFlacFlvToken",
                value: function(e) {
                    S.default.setFlacFlvToken(e)
                }
            }, {
                key: "switchLine",
                value: function(e) {
                    if (l.default.log("VPlayer.switchLine", e),
                        !c.default.livingInfo)
                        return void l.default.error("switchLine G.livingInfo is null.");
                    for (var t = c.default.livingInfo.tNotice.vStreamInfo.value, i = 0, a = t.length; i < a; i++) {
                        var s = t[i];
                        if (s.iLineIndex == e) {
                            c.default.streamInfo = s;
                            break
                        }
                    }
                }
            }, {
                key: "switchBitrate",
                value: function(e) {
                    l.default.log("VPlayer.switchBitrate", e),
                        e = Number(e),
                        c.default.curBitRate = e
                }
            }, {
                key: "getVolume",
                value: function() {
                    return this.vcore.h5player.getVolume()
                }
            }, {
                key: "setVolume",
                value: function(e) {
                    this.vcore.h5player.setVolume(e)
                }
            }, {
                key: "setConfig",
                value: function(e, t) {
                    this.vcore.h5player.setConfig(e, t)
                }
            }, {
                key: "setTafHandler",
                value: function(e) {
                    this.vcore.setTafHandler(e)
                }
            }, {
                key: "getSDKLog",
                value: function() {
                    return this.vcore.h5player.getLog()
                }
            }, {
                key: "getMetrics",
                value: function() {
                    return this.vcore.h5player.getMetrics()
                }
            }, {
                key: "showLoading",
                value: function() {
                    T.default.showLoading()
                }
            }, {
                key: "hideLoading",
                value: function() {
                    T.default.hideLoading()
                }
            }, {
                key: "userId",
                get: function() {
                    return this.vplayerUI.userId
                }
            }, {
                key: "videoStreamType",
                get: function() {
                    return c.default.isReplay ? 2 : c.default.isP2pPlayIng ? 1 : 0
                }
            }, {
                key: "videoData",
                get: function() {
                    if (!c.default.streamInfo)
                        return null;
                    var e = {}
                        , t = c.default.getCurBitRate();
                    e.video_p2p = c.default.isP2pPlayIng ? 1 : 0,
                        e.video_encode = "h264",
                        e.video_bitrate = t,
                        e.video_line = c.default.streamInfo.sCdnType;
                    for (var i = c.default.getBitRateList(), a = 0; a < i.length; a++)
                        i[a].iBitRate == t && (e.video_definition = i[a].sDisplayName);
                    return e
                }
            }, {
                key: "videoStatus",
                get: function() {
                    return c.default.isPlaying && !c.default.isPause ? 0 : !c.default.isPlaying && c.default.isPause ? 1 : 2
                }
            }]),
                e
        }();
        t.default = P,
            u.default.mixTo(P),
            window.VPlayer = P
    }
    , function(e, t, i) {
        "use strict";
        function a() {}
        function s(e, t, i) {
            var a = !0;
            if (e) {
                var s = 0
                    , n = e.length
                    , r = t[0]
                    , u = t[1]
                    , o = t[2];
                switch (t.length) {
                    case 0:
                        for (; s < n; s += 2)
                            a = !1 !== e[s].call(e[s + 1] || i) && a;
                        break;
                    case 1:
                        for (; s < n; s += 2)
                            a = !1 !== e[s].call(e[s + 1] || i, r) && a;
                        break;
                    case 2:
                        for (; s < n; s += 2)
                            a = !1 !== e[s].call(e[s + 1] || i, r, u) && a;
                        break;
                    case 3:
                        for (; s < n; s += 2)
                            a = !1 !== e[s].call(e[s + 1] || i, r, u, o) && a;
                        break;
                    default:
                        for (; s < n; s += 2)
                            a = !1 !== e[s].apply(e[s + 1] || i, t) && a
                }
            }
            return a
        }
        function n(e) {
            return "[object Function]" === Object.prototype.toString.call(e)
        }
        function r(e, t) {
            if (e.forEach)
                return e.forEach(t);
            for (var i = 0; i < e.length; i += 1)
                t(e[i], i, e)
        }
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var u = /\s+/;
        a.prototype.on = function(e, t, i) {
            var a, s, n;
            if (!t)
                return this;
            for (a = this.__events || (this.__events = {}),
                     e = e.split(u); s = e.shift(); )
                n = a[s] || (a[s] = []),
                    n.push(t, i);
            return this
        }
            ,
            a.prototype.once = function(e, t, i) {
                var a = this
                    , s = function s() {
                    a.off(e, s),
                        t.apply(i || a, arguments)
                };
                return this.on(e, s, i)
            }
            ,
            a.prototype.off = function(e, t, i) {
                var a, s, n, r;
                if (!(a = this.__events))
                    return this;
                if (!(e || t || i))
                    return delete this.__events,
                        this;
                for (e = e ? e.split(u) : o(a); s = e.shift(); )
                    if (n = a[s])
                        if (t || i)
                            for (r = n.length - 2; r >= 0; r -= 2)
                                t && n[r] !== t || i && n[r + 1] !== i || n.splice(r, 2);
                        else
                            delete a[s];
                return this
            }
            ,
            a.prototype.trigger = function(e) {
                var t, i, a, n, r, o, l = [], d = !0;
                if (!(t = this.__events))
                    return this;
                for (e = e.split(u),
                         r = 1,
                         o = arguments.length; r < o; r++)
                    l[r - 1] = arguments[r];
                for (; i = e.shift(); )
                    (a = t.all) && (a = a.slice()),
                    (n = t[i]) && (n = n.slice()),
                    "all" !== i && (d = s(n, l, this) && d),
                        d = s(a, [i].concat(l), this) && d;
                return d
            }
            ,
            a.prototype.emit = a.prototype.trigger;
        var o = Object.keys;
        o || (o = function(e) {
                var t = [];
                for (var i in e)
                    e.hasOwnProperty(i) && t.push(i);
                return t
            }
        ),
            a.mixTo = function(e) {
                e = n(e) ? e.prototype : e;
                var t = a.prototype
                    , i = new a;
                r(Object.keys(t), function(a) {
                    e[a] = function() {
                        return t[a].apply(i, Array.prototype.slice.call(arguments)),
                            this
                    }
                })
            }
            ,
            t.default = a
    }
    , function(e, t, i) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var a = {};
        !function() {
            var e = self.navigator.userAgent.toLowerCase()
                , t = /(edge)\/([\w.]+)/.exec(e) || /(opr)[\/]([\w.]+)/.exec(e) || /(chrome)[ \/]([\w.]+)/.exec(e) || /(iemobile)[\/]([\w.]+)/.exec(e) || /(version)(applewebkit)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(e) || /(webkit)[ \/]([\w.]+).*(version)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(e) || /(webkit)[ \/]([\w.]+)/.exec(e) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(e) || /(msie) ([\w.]+)/.exec(e) || e.indexOf("trident") >= 0 && /(rv)(?::| )([\w.]+)/.exec(e) || e.indexOf("compatible") < 0 && /(firefox)[ \/]([\w.]+)/.exec(e) || []
                , i = /(ipad)/.exec(e) || /(ipod)/.exec(e) || /(windows phone)/.exec(e) || /(iphone)/.exec(e) || /(kindle)/.exec(e) || /(android)/.exec(e) || /(windows)/.exec(e) || /(mac)/.exec(e) || /(linux)/.exec(e) || /(cros)/.exec(e) || []
                , s = {
                browser: t[5] || t[3] || t[1] || "",
                version: t[2] || t[4] || "0",
                majorVersion: t[4] || t[2] || "0",
                platform: i[0] || ""
            }
                , n = {};
            if (s.browser) {
                n[s.browser] = !0;
                var r = s.majorVersion.split(".");
                n.version = {
                    major: parseInt(s.majorVersion, 10),
                    string: s.version
                },
                r.length > 1 && (n.version.minor = parseInt(r[1], 10)),
                r.length > 2 && (n.version.build = parseInt(r[2], 10))
            }
            s.platform && (n[s.platform] = !0),
            (n.chrome || n.opr || n.safari) && (n.webkit = !0),
            (n.rv || n.iemobile) && (n.rv && delete n.rv,
                s.browser = "msie",
                n.msie = !0),
            n.edge && (delete n.edge,
                s.browser = "msedge",
                n.msedge = !0),
            n.opr && (s.browser = "opera",
                n.opera = !0),
            n.safari && n.android && (s.browser = "android",
                n.android = !0),
                n.name = s.browser,
                n.platform = s.platform;
            for (var u in a)
                a.hasOwnProperty(u) && delete a[u];
            Object.assign(a, n)
        }(),
            t.default = a
    }
    , function(e, t, i) {
        "use strict";
        function a(e) {
            return e && e.__esModule ? e : {
                default: e
            }
        }
        function s(e, t) {
            if (!(e instanceof t))
                throw new TypeError("Cannot call a class as a function")
        }
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var n = function() {
            function e(e, t) {
                for (var i = 0; i < t.length; i++) {
                    var a = t[i];
                    a.enumerable = a.enumerable || !1,
                        a.configurable = !0,
                    "value"in a && (a.writable = !0),
                        Object.defineProperty(e, a.key, a)
                }
            }
            return function(t, i, a) {
                return i && e(t.prototype, i),
                a && e(t, a),
                    t
            }
        }()
            , r = i(1)
            , u = (a(r),
            i(3))
            , o = a(u)
            , l = i(0)
            , d = a(l)
            , h = function() {
            function e(t) {
                s(this, e),
                    this.vplayer = t,
                    this.h5player = null,
                    this.video = null,
                    this.container = $("#player-video"),
                    this.turnToFlv = !1,
                    this.lastGetTime = 0,
                    this.drawVideoId = 0,
                    this.capture = document.createElement("canvas"),
                    this.captureImg = document.getElementById("hy-video-capture"),
                    this.v360id = 0,
                    this.v360Tmpl = '<a-scene><a-assets></a-assets><a-videosphere src="#hy-video" rotation="0 180 0"></a-videosphere></a-scene>',
                    this.isFirstPlay = !0,
                    this.isFirstVideo = !0,
                    this.cacheMetric = [],
                    this.cacheMetric2 = [],
                    this.initH5Player()
            }
            return n(e, [{
                key: "initH5Player",
                value: function() {
                    if (!H5Player.isSupported())
                        return console.log("H5Player not support."),
                            void o.default.fireEvent("playerError");
                    var e = new H5Player;
                    this.h5player = e,
                        e.setIDs(d.default.presenterUid, d.default.topsid, d.default.subsid, d.default.yyuid),
                        e.on(H5Player.Events.VIDEO_PLAY, this.onPlayVideo.bind(this)),
                        e.on(H5Player.Events.VIDEO_STOP, this.onStopVideo.bind(this)),
                        e.on(H5Player.Events.ANCHOR_STOP, this.onEndVideo.bind(this)),
                        e.on(H5Player.Events.NO_VIDEO, this.onNoVideo.bind(this)),
                        e.on(H5Player.Events.FLV_URL_UNAVAILABLE, this.onFlvUrlUnavailable.bind(this)),
                        e.on(H5Player.Events.H5_PLAYER_ERROR, this.onH5PlayerError.bind(this)),
                        e.on(H5Player.Events.PLAY_STATUS, this.onPlayStatus.bind(this)),
                        e.on(H5Player.Events.NO_DATA_RECEIVED, this.onNoDataReceived.bind(this)),
                        e.on(H5Player.Events.P2P_REPORT, this.onP2PReport.bind(this)),
                        e.on(H5Player.Events.DATA_METRIC, this.onDataMetric.bind(this)),
                        e.on(H5Player.Events.DATA_METRIC2, this.onDataMetric2.bind(this)),
                        e.on(H5Player.Events.P2P_TIMEOUT, this.onP2pTimeOut.bind(this)),
                        e.on(H5Player.Events.FLAC_AUDIO_START, this.onFlacStart.bind(this)),
                        e.on(H5Player.Events.FLAC_AUDIO_ERROR, this.onFlacError.bind(this)),
                        e.on(H5Player.Events.FLAC_AUDIO_NEED_RETRY, this.reStartFlac.bind(this)),
                        e.on(H5Player.Events.FLV_TO_P2P, this.flvToP2P.bind(this)),
                        e.on(H5Player.Events.H264_SEI_PLAY, this.seiPlay.bind(this));
                    var t = parseInt(localStorage.sdkLogLevel);
                    isNaN(t) || e.setLogLevel(t);
                    Number(d.default.gameId),
                        e.setConfig(2, 4e3),
                        console.log("sdkExtendConfig", d.default.sdkExtendConfig),
                        e.setExtendConfig(d.default.sdkExtendConfig),
                        o.default.addEvent(o.default.PAUSE_VIDEO, this.pauseVideo.bind(this)),
                        o.default.addEvent(o.default.WEBSOCKET_INITED, this.onWebsocketInited.bind(this))
                }
            }, {
                key: "onFlacError",
                value: function() {
                    console.log("onFlacError"),
                        o.default.fireEvent(o.default.FLAC_FAIL)
                }
            }, {
                key: "onFlacStart",
                value: function() {
                    console.log("onFlacStart"),
                        o.default.fireEvent(o.default.FLAC_SUCCESS)
                }
            }, {
                key: "setTafHandler",
                value: function(e) {
                    this.h5player.setTafHandler && this.h5player.setTafHandler(e)
                }
            }, {
                key: "play",
                value: function() {
                    if (d.default.is360Video && !d.default.is360LibLoaded)
                        return void this.load360Lib();
                    this.isFirstPlay && (this.isFirstPlay = !1,
                    window.h5VideoRequest && window.h5VideoRequest()),
                        d.default.isP2pPlayIng = !1,
                    d.default.flvUseHttps && (d.default.flv = d.default.flv.replace("http:", "https:"));
                    var e = this.h5player
                        , t = d.default.streamInfo
                        , i = d.default.getCurBitRate()
                        , a = i == d.default.SrcBitRate ? 0 : 1
                        , s = !0;
                    !d.default.isInP2PBitratePrivilege && d.default.p2pBitrate && parseInt(d.default.p2pBitrate) > 0 && i > d.default.p2pBitrate && (s = !1);
                    var n = -1 != d.default.p2pLineClose.indexOf(d.default.videoLine.toString());
                    e.setConfig(100, t && t.iIsP2PSupport > 0 && t.sP2pUrl),
                        e.setConfig(101, !n && d.default.useP2p);
                    var r = {};
                    if (d.default.useP2p && t && t.iIsP2PSupport > 0 && t.sP2pUrl && e.isSupportP2P && s && !n && 0 == this.turnToFlv) {
                        var u = i == d.default.SrcBitRate ? 0 : i;
                        r.sStreamName = t.sStreamName,
                            r.sFlvUrl = t.sFlvUrl,
                            r.sFlvAntiCode = t.sFlvAntiCode,
                            r.sFlvUrlSuffix = t.sFlvUrlSuffix,
                            r.sP2pUrl = t.sP2pUrl,
                            r.sP2pAntiCode = t.sP2pAntiCode,
                            r.sP2pUrlSuffix = t.sP2pUrlSuffix,
                            r.bitrate = u,
                            r.curBitrate = i,
                            r.originalBitrate = a,
                            r.lineType = d.default.videoLine,
                            r.iIsP2PSupport = t.iIsP2PSupport;
                        var l = this.getP2pInfoList();
                        e.startP2PFlv(r, l),
                            d.default.isP2pPlayIng = !0
                    } else
                        r.url = d.default.flv,
                            r.lineType = d.default.videoLine,
                            r.originalBitrate = a,
                            r.curBitrate = i,
                            e.startFlv(r);
                    this.turnToFlv = !1,
                    d.default.isOpenFlac && o.default.fireEvent(o.default.GET_FLAC_TOKEN, !0)
                }
            }, {
                key: "isP2PCooling",
                value: function() {
                    var e = Number(localStorage.getItem("interval_long_time"));
                    if (e > 0) {
                        return !((new Date).getTime() - e > 36e5) || (localStorage.removeItem("interval_long_time"),
                            !1)
                    }
                    return !1
                }
            }, {
                key: "getP2pInfoList",
                value: function() {
                    var e = []
                        , t = void 0;
                    t = d.default.livingInfo ? d.default.livingInfo.tNotice.vStreamInfo.value : d.default.ENV.stream.data[0].gameStreamInfoList;
                    for (var i = 0; i < t.length; i++) {
                        var a = t[i]
                            , s = a.iLineIndex
                            , n = -1 != d.default.p2pLineClose.indexOf(s.toString());
                        if (a.iIsP2PSupport > 0 && a.sP2pUrl && !n) {
                            var r = new Object;
                            r.sP2pUrl = a.sP2pUrl,
                                r.sP2pUrlSuffix = a.sP2pUrlSuffix,
                                r.iLineIndex = s,
                                e.push(r)
                        }
                    }
                    return e
                }
            }, {
                key: "reStartFlac",
                value: function() {
                    var e = Date.now();
                    if (e - this.lastGetTime < 2e3)
                        return !1;
                    this.lastGetTime = e,
                    d.default.isOpenFlac && (this.h5player.stopFlac(),
                        o.default.fireEvent(o.default.GET_FLAC_TOKEN, !0))
                }
            }, {
                key: "playFlac",
                value: function() {
                    d.default.flvUseHttps && (d.default.flacFlv = d.default.flacFlv.replace("http:", "https:")),
                        console.log("startFlac", d.default.flacFlv),
                        this.h5player.startFlac(d.default.flacFlv, d.default.H5ROOT)
                }
            }, {
                key: "stopFlac",
                value: function() {
                    console.log("stopFlac"),
                        this.h5player.stopFlac()
                }
            }, {
                key: "playAgain",
                value: function() {
                    d.default.hasVideo && o.default.fireEvent(o.default.PLAY_AGAIN)
                }
            }, {
                key: "stop",
                value: function() {
                    this.h5player.stop()
                }
            }, {
                key: "onPlayVideo",
                value: function(e, t) {
                    if (!t.uid || !d.default.presenterUid || t.uid == d.default.presenterUid) {
                        t.video.autoplay = !0;
                        var i = this.video;
                        if (i && (i.pause(),
                            i.src = ""),
                            this.captureImg.src = "",
                            i = t.video,
                            this.video = i,
                            d.default.is360Video) {
                            var a = "hy-video-" + ++this.v360id;
                            $(i).attr("id", a),
                                this.clear360Video();
                            var s = $(this.v360Tmpl);
                            if (s.find("a-assets").append(i),
                                s.find("a-videosphere").attr("src", "#" + a),
                                this.container.find(".a-canvas").remove(),
                                this.container.append(s),
                                d.default.isFullSize)
                                var n = 0
                                    , r = setInterval(function() {
                                    $("#player-video").resize(),
                                        n++,
                                    ++n > 16 && clearInterval(r)
                                }, 500)
                        } else
                            $("#hy-video").remove(),
                                $(i).attr("id", "hy-video"),
                                this.vplayer.hideLoading(),
                                2 == d.default.lLiveCompatibleFlag || 4 == d.default.lLiveCompatibleFlag ? this.startDrawVideo() : this.container.append(i);
                        if (d.default.isPause = !1,
                            d.default.isPlaying = !0,
                            o.default.fireEvent(o.default.NEW_VIDEO),
                            this.isFirstVideo) {
                            this.isFirstVideo = !1,
                                d.default.isFirstVideoPlay = !0,
                                setTimeout(function(e) {
                                    e.paused && o.default.fireEvent(o.default.PLAY_TIPS)
                                }, 1e3, this.video),
                                o.default.fireEvent("videoOnLoad");
                            var u = Date.now() - d.default.beginTime;
                            d.default.firstVideoTime = u,
                                o.default.fireEvent(o.default.VIDEO_FIRST_PLAY)
                        }
                    }
                }
            }, {
                key: "onStopVideo",
                value: function(e, t) {}
            }, {
                key: "onEndVideo",
                value: function(e, t) {}
            }, {
                key: "onNoVideo",
                value: function(e, t) {}
            }, {
                key: "onFlvUrlUnavailable",
                value: function(e, t) {
                    this.playAgain()
                }
            }, {
                key: "onH5PlayerError",
                value: function(e, t) {
                    this.playAgain()
                }
            }, {
                key: "onPlayStatus",
                value: function(e, t) {
                    var i = t.status;
                    "VIDEO_STOP" == i ? d.default.isPlaying = !1 : "VIDEO_PLAYING" == i && (d.default.isPlaying = !0)
                }
            }, {
                key: "onNoDataReceived",
                value: function(e, t) {
                    this.playAgain()
                }
            }, {
                key: "onP2PReport",
                value: function(e, t) {
                    o.default.fireEvent(o.default.AUTO_FEEDBACK)
                }
            }, {
                key: "onDataMetric",
                value: function(e, t) {
                    d.default.vplayerUI && d.default.vplayerUI.isTafInited ? o.default.fireEvent(o.default.DATA_METRIC, t) : this.cacheMetric.push(t)
                }
            }, {
                key: "onDataMetric2",
                value: function(e, t) {
                    d.default.vplayerUI && d.default.vplayerUI.isTafInited ? o.default.fireEvent(o.default.DATA_METRIC2, t) : this.cacheMetric2.push(t)
                }
            }, {
                key: "onP2pTimeOut",
                value: function(e, t) {
                    this.turnToFlv = !0,
                        d.default.wsconnected ? this.playAgain() : this.play()
                }
            }, {
                key: "onWebsocketInited",
                value: function(e) {
                    this.sendMetricCache(),
                        this.sendMetric2Cache()
                }
            }, {
                key: "sendMetricCache",
                value: function() {
                    if (this.cacheMetric.length > 0) {
                        for (var e = 0, t = this.cacheMetric.length; e < t; e++)
                            this.onDataMetric(H5Player.Events.DATA_METRIC, this.cacheMetric[e]);
                        this.cacheMetric = []
                    }
                }
            }, {
                key: "sendMetric2Cache",
                value: function() {
                    if (this.cacheMetric2.length > 0) {
                        for (var e = 0, t = this.cacheMetric2.length; e < t; e++)
                            this.onDataMetric2(H5Player.Events.DATA_METRIC2, this.cacheMetric2[e]);
                        this.cacheMetric2 = []
                    }
                }
            }, {
                key: "seiPlay",
                value: function(e, t) {
                    d.default.danmuMask && o.default.fireEvent(o.default.SET_SEI, t)
                }
            }, {
                key: "load360Lib",
                value: function() {
                    var e = Date.now()
                        , t = d.default.H5ROOT + "aframe.js";
                    $.getScript(t, function() {
                        d.default.is360LibLoaded = !0,
                            this.play();
                        var t = Date.now();
                        console.log("Aframe loaded in " + (t - e) + "ms")
                    }
                        .bind(this))
                }
            }, {
                key: "startDrawVideo",
                value: function() {
                    clearInterval(this.drawVideoId);
                    var e = this.capture;
                    e.style.position = "absolute",
                        this.container.append(e),
                        e.getContext("2d").clearRect(0, 0, e.width, e.height),
                        this.drawVideoId = setInterval(this.drawVideo, 50)
                }
            }, {
                key: "stopDrawVideo",
                value: function() {
                    clearInterval(this.drawVideoId)
                }
            }, {
                key: "drawVideo",
                value: function() {
                    var e = this.video;
                    if (e.videoWidth > 0) {
                        var t = e.videoWidth
                            , i = e.videoHeight
                            , a = $("#player-video").width()
                            , s = $("#player-video").height();
                        capture.width = a,
                            capture.height = s;
                        var n = 2 == d.default.lLiveCompatibleFlag ? t / 2 : t
                            , r = 4 == d.default.lLiveCompatibleFlag ? i / 2 : i
                            , u = n / a >= r / s ? n / a : r / s;
                        capture.width = n / u,
                            capture.height = r / u;
                        var o = (a - capture.width) / 2
                            , l = (s - capture.height) / 2;
                        capture.style.left = o + "px",
                            capture.style.top = l + "px",
                            capture.getContext("2d").drawImage(e, 0, 0, n, r, 0, 0, capture.width, capture.height)
                    }
                }
            }, {
                key: "pauseVideo",
                value: function() {
                    var e = this.video;
                    if (e) {
                        this.stopDrawVideo();
                        var t = this.capture;
                        if (e.videoWidth > 0) {
                            t.width = e.videoWidth,
                                t.height = e.videoHeight,
                                t.getContext("2d").drawImage(e, 0, 0, t.width, t.height);
                            var i = this.captureImg;
                            i.src = t.toDataURL("image/png"),
                                $(i).show(),
                            d.default.is360Video && (i.style.width = "100%")
                        }
                        $(e).unbind(),
                            this.clear360Video(!0),
                            setTimeout(this.stop.bind(this), 0)
                    }
                }
            }, {
                key: "clear360Video",
                value: function(e) {
                    if (d.default.is360Video) {
                        var t = this.container.find("a-scene");
                        if (e) {
                            var i = t.find(".a-canvas");
                            this.container.prepend(i)
                        }
                        t.find("video").removeAttr("src").removeAttr("id"),
                            t.remove()
                    }
                }
            }, {
                key: "showLoading",
                value: function() {
                    $(".player-loading").css("display", "block");
                    var e = "url(" + d.default.H5ROOT + "images/videoloading.gif?" + Math.random() + ") no-repeat";
                    $(".player-loading-progress").css("background", e)
                }
            }, {
                key: "flvToP2P",
                value: function() {
                    d.default.isP2pPlayIng = !0
                }
            }]),
                e
        }();
        t.default = h
    }
    , function(e, t, i) {
        "use strict";
        function a(e) {
            return e && e.__esModule ? e : {
                default: e
            }
        }
        function s(e) {
            if (!e || !e.stream || !e.stream.data || 0 == e.stream.data.length)
                return void R.default.warn("setLiveInfoFromENV NO stream!");
            E.default.addLog(e.stream),
                C = !0;
            var t = [];
            $.extend(t, e.stream.data[0].gameStreamInfoList);
            var i = e.stream.vMultiStreamInfo
                , a = e.stream.iWebDefaultBitRate
                , s = e.stream.data[0].gameLiveInfo
                , n = parseInt(s.liveCompatibleFlag);
            if (_.default.lLiveCompatibleFlag = n,
                _.default.is360Video = 1 == n || 3 == n || 5 == n || 7 == n,
                _.default.liveid = s.liveId,
                _.default.SrcBitRate = s.bitRate,
                _.default.isH265 = 1 == s.codecType || 4 == s.codecType || 6 == s.codecType,
                _.default.hasVideo = t.length > 0,
                _.default.hasVideo) {
                _.default.streamInfo = null;
                for (var r = [], u = 0, o = -1, h = [], c = 0, p = t.length; c < p; c++) {
                    var v = t[c];
                    if (v.iWebPriorityRate < 0)
                        h.push(c);
                    else {
                        var m = v.iLineIndex;
                        _.default.curBitRate = _.default.SrcBitRate,
                            u += v.iWebPriorityRate,
                            r.push({
                                line: m,
                                rate: v.iWebPriorityRate
                            }),
                        100 == v.iWebPriorityRate && (o = m)
                    }
                }
                for (var y = h.length - 1; y >= 0; y--) {
                    var S = h[y];
                    t.splice(S, 1)
                }
                if (0 == t.length)
                    return;
                if (1 == t.length)
                    _.default.videoLine = t[0].iLineIndex;
                else if (-1 != o)
                    _.default.videoLine = o;
                else
                    for (var g = 0, T = Math.random(), P = 0, I = r.length; P < I; P++) {
                        var k = r[P]
                            , L = k.rate / u;
                        if (g += L,
                        T <= g) {
                            _.default.videoLine = k.line;
                            break
                        }
                    }
                _.default.videoLine < 0 && (_.default.videoLine = t[0].iLineIndex);
                var A = i;
                f(A);
                if (_.default.videoLine > 0 && d(a, _.default.livingInfoRecorded),
                _.default.videoLine > 0)
                    for (var M = 0, U = t.length; M < U; M++) {
                        var b = t[M]
                            , N = b.iLineIndex;
                        N == _.default.videoLine && (_.default.streamInfo = b,
                            l(b.newCFlvAntiCode))
                    }
            }
        }
        function n(e) {
            if (_.default.livingInfoRecorded) {
                console.log("current bit:" + _.default.getTrueBitRate());
                var t = _.default.livingInfoRecorded.tNotice.vStreamInfo.value
                    , i = e.tNotice.vStreamInfo.value
                    , a = 0;
                if (t.length != i.length)
                    return !1;
                if (t.length == i.length && i.length > 0)
                    for (a = 0; a < i.length; a++) {
                        if (i[a].sStreamName != t[a].sStreamName || i[a].iLineIndex != t[a].iLineIndex)
                            return !1;
                        if (i[a].iIsP2PSupport != t[a].iIsP2PSupport)
                            return _.default.streamSetFlag = !0,
                                !1
                    }
                if (_.default.livingInfoRecorded.tStreamSettingNotice.iBitRate == _.default.getTrueBitRate() || 0 == _.default.getTrueBitRate())
                    return _.default.curBitRate = e.tStreamSettingNotice.iBitRate,
                        !0;
                if (e.tNotice.vMultiStreamInfo.value.length > 0)
                    for (a = 0; a < e.tNotice.vMultiStreamInfo.value.length; a++)
                        if (e.tNotice.vMultiStreamInfo.value[a].iBitRate == _.default.getTrueBitRate())
                            return !0
            }
            return !1
        }
        function r(e) {
            var t = _.default.ENV
                , i = !1;
            if (L) {
                L = !1,
                window.infoRequestEnd && infoRequestEnd();
                var a = Date.now();
                _.default.livingInfoTime = a - _.default.livingInfoTime,
                C && 0 == (i = u(e)) && P.default.fireEvent(P.default.DATA_METRIC2, [{
                    sMetricName: "web.live_info_diff",
                    vField: {
                        value: 1
                    }
                }])
            } else
                i = n(e);
            E.default.addLog("getLivingInfoRsp"),
                _.default.livingInfo = e;
            var s = e.tNotice
                , r = (s.vCdnList.value,
                s.vStreamInfo.value);
            t.online || _.default.presenterUid == t.eu || (r = []),
                _.default.hasVideo = r.length > 0,
                P.default.fireEvent(P.default.UPDATE_BTS_VISIBLE),
                _.default.isServPlaying = _.default.hasVideo,
            _.default.hasVideo || P.default.fireEvent(P.default.SHOW_RECOMMEND),
                _.default.SrcBitRate = e.tStreamSettingNotice.iBitRate,
                _.default.isH265 = 1 == s.iCodecType || 4 == s.iCodecType || 6 == s.iCodecType;
            var o = parseInt(s.lLiveCompatibleFlag);
            if (_.default.lLiveCompatibleFlag = o,
                _.default.is360Video = 1 == o || 3 == o || 5 == o || 7 == o,
            _.default.is360Video && (window.aframe_flag = o),
                P.default.fireEvent(P.default.REFRESH_VISUALANGLE),
                _.default.hasVideo) {
                _.default.streamInfo = null;
                var h = []
                    , c = 0
                    , p = -1
                    , v = !1
                    , m = []
                    , y = []
                    , S = !1;
                _.default.menuItems = [];
                for (var g = 0, T = r.length; g < T; g++) {
                    (function(e, t) {
                            var a = r[e];
                            if (0 == a.iLineIndex)
                                return m.push(e),
                                    S = !0,
                                    "continue";
                            if (a.iWebPriorityRate < 0)
                                return m.push(e),
                                    "continue";
                            if (-1 != a.sFlvUrl.indexOf("yy.com"))
                                return "continue";
                            var s = a.iLineIndex;
                            0 == i && (_.default.curBitRate = _.default.SrcBitRate),
                            _.default.videoLine == s && (v = !0);
                            var n = !1;
                            a.iIsP2PSupport > 0 && a.sP2pUrl && (n = !0);
                            var u = {
                                text: "直播线路" + s,
                                p2p: n,
                                func: function() {
                                    var e = s;
                                    return function() {
                                        P.default.fireEvent(P.default.SWITCH_LINE, e)
                                    }
                                }()
                            };
                            if (_.default.menuItems[s] = u,
                                v)
                                return "continue";
                            c += a.iWebPriorityRate,
                                h.push({
                                    line: s,
                                    rate: a.iWebPriorityRate
                                }),
                            100 == a.iWebPriorityRate && (p = s)
                        }
                    )(g)
                }
                _.default.menuData[1] = _.default.menuItems,
                _.default.is360Video && (_.default.menuData[3] = M);
                for (var g = m.length - 1; g >= 0; g--) {
                    var I = m[g];
                    y.push(r[I].iLineIndex),
                        r.splice(I, 1)
                }
                if (0 == r.length)
                    return _.default.hasVideo = !1,
                        _.default.vplayer.hideLoading(),
                        P.default.fireEvent(P.default.SHOW_RECOMMEND),
                        _.default.isPlaying = !1,
                        _.default.vplayer.stop(),
                        void P.default.fireEvent(P.default.VIDEO_FIRST_PLAY);
                if (P.default.fireEvent(P.default.HIDE_RECOMMEND),
                    !v)
                    if (1 == r.length)
                        _.default.videoLine = r[0].iLineIndex;
                    else if (-1 != p)
                        _.default.videoLine = p;
                    else
                        for (var k = 0, R = Math.random(), U = 0, T = h.length; U < T; U++) {
                            var b = h[U]
                                , N = b.rate / c;
                            if (k += N,
                            R <= k) {
                                _.default.videoLine = b.line;
                                break
                            }
                        }
                (_.default.videoLine < 0 || -1 != y.indexOf(_.default.videoLine)) && (_.default.videoLine = r[0].iLineIndex);
                var w = s.vMultiStreamInfo.value
                    , D = f(w);
                if (-1 == _.default.specialGameId.indexOf(parseInt(t.gameId)) && (_.default.isCheckDefBit = !1),
                _.default.videoLine > 0) {
                    0 == i && d(0, _.default.livingInfoRecorded);
                    var O = _.default.getCurBitRate();
                    O && (D = O),
                        vplayer.setBitRateList({
                            list: _.default.getBitRateList(),
                            default: D
                        })
                }
                if (vplayer.setLineList(r),
                _.default.videoLine > 0)
                    for (var F = 0, x = r.length; F < x; F++) {
                        var V = r[F]
                            , B = V.iLineIndex;
                        B == _.default.videoLine && (_.default.streamInfo = V,
                            l(V.sFlvAntiCode))
                    }
                if ((0 != _.default.videoLine || _.default.isInGopChannel()) && vplayer.vcore.setConfigGopPlay(),
                t.stream && t.stream.data && t.stream.data[0].gameLiveInfo) {
                    var q = t.stream.data[0].gameLiveInfo.liveCompatibleFlag
                        , G = parseInt(s.lLiveCompatibleFlag);
                    _.default.is360Video && q != G && _.default.vplayer.play()
                }
                _.default.isUIPause || (_.default.isPlaying && v ? 0 != _.default.videoLine && (-1 != _.default.specialGameId.indexOf(parseInt(t.gameId)) ? i || _.default.vplayer.play() : _.default.streamSetFlag && (_.default.streamSetFlag = !1,
                i || _.default.vplayer.play())) : i || _.default.vplayer.play())
            } else
                console.warn("[getLivingInfo]此频道当前无直播！"),
                    P.default.fireEvent(P.default.VIDEO_FIRST_PLAY),
                !A && e.bIsLiving && (A = !0,
                    P.default.fireEvent(P.default.DATA_METRIC2, [{
                        sMetricName: "web.no_video_line",
                        vField: {
                            value: 1
                        }
                    }]));
            _.default.livingInfoRecorded = e
        }
        function u(e) {
            var t = _.default.ENV;
            if (!t.stream || !t.stream.data || 0 == t.stream.data.length)
                return !1;
            var i = e.tNotice
                , a = (i.vCdnList.value,
                i.vStreamInfo.value)
                , s = t.stream.data[0].gameStreamInfoList;
            return o(a) == o(s)
        }
        function o(e) {
            var t = "";
            for (var i in e)
                _.default.videoLine == e[i].iLineIndex && (e[i].iWebPriorityRate < 0 && (t += e[i].iWebPriorityRate),
                    t += e[i].sCdnType,
                    t += e[i].sFlvUrl,
                    t += e[i].iIsP2PSupport);
            return t
        }
        function l(e) {
            var t = _.default.streamInfo.sStreamName;
            _.default.flvTokenList[t] = e,
                _.default.streamInfo.sFlvAntiCode = e,
                v(),
                clearTimeout(U),
                U = setTimeout(function(e) {
                    for (var t in _.default.flvTokenList)
                        _.default.flvTokenList[t] = ""
                }, 24e4, t)
        }
        function d(e, t) {
            if (!_.default.isCheckDefBit) {
                if (_.default.isH265 && null == t) {
                    var i = _.default.bitRateList1[0].iBitRate;
                    _.default.curBitRate = i
                }
                if (h())
                    return _.default.bitRateList1[1] && (_.default.curBitRate = _.default.bitRateList1[1].iBitRate),
                        void (_.default.isCheckDefBit = !0);
                var a = 0;
                a = e || _.default.livingInfo.tNotice.iWebDefaultBitRate;
                var s = g.default.getCookie("videoBitRate");
                s = parseInt(s),
                !isNaN(s) && s > 0 && (a = s);
                var n = (_.default.SrcBitRate,
                    void 0);
                if (a > 0) {
                    n = _.default.bitRateList1;
                    for (var r = 0; r < n.length; r++)
                        if (n[r].iBitRate <= a) {
                            _.default.curBitRate = n[r].iBitRate;
                            break
                        }
                    _.default.isCheckDefBit = !0
                }
            }
        }
        function h() {
            var e = _.default.ENV;
            if (!e.deleteOriginalPainting || "-1" == e.deleteOriginalPainting)
                return !1;
            var t = e.deleteOriginalPainting.split(",")
                , i = void 0
                , a = void 0;
            for (var s in t) {
                var n = r[s]
                    , r = n.split("_");
                if (r.length > 1) {
                    if (a = r[0],
                        i = r[1],
                    _.default.topsid == a && _.default.subsid == i)
                        return !0
                } else if (a = n,
                _.default.topsid == a)
                    return !0
            }
            return !1
        }
        function f(e) {
            for (var t = [], i = {}, a = e, s = _.default.SrcBitRate, n = 0, r = a.length; n < r; n++) {
                var u = a[n];
                if (!(u.iBitRate > 0 && u.iBitRate <= 300)) {
                    var o = p(u);
                    0 == o.iBitRate && (o.iBitRate = _.default.SrcBitRate);
                    var l = i[o.sDisplayName];
                    l ? o.iBitRate > l.iBitRate && (i[o.sDisplayName] = o) : i[o.sDisplayName] = o
                }
            }
            for (var d in i) {
                var h = i[d];
                t.push(h)
            }
            return t.sort(c),
                _.default.bitRateList1 = t,
                s
        }
        function c(e, t) {
            return t.iBitRate - e.iBitRate
        }
        function p(e) {
            return {
                iBitRate: e.iBitRate,
                sDisplayName: e.sDisplayName
            }
        }
        function v() {
            var e = _.default.streamInfo.sStreamName
                , t = _.default.streamInfo.sFlvUrl + "/" + e;
            t += ".flv?" + _.default.flvTokenList[e],
                _.default.flv = t;
            var i = _.default.getCurBitRate();
            _.default.isH265 && (_.default.flv += "&codec=264"),
                i && i != _.default.SrcBitRate ? _.default.flv += "&ratio=" + i : i && _.default.isH265 && (_.default.flv += "&ratio=" + i),
                console.log("flv:", _.default.flv)
        }
        function m(e) {
            var t = _.default.streamInfo.sStreamName
                , i = _.default.streamInfo.sFlvUrl + "/" + t;
            i += "_audio",
                i += ".flv?" + e,
                _.default.flacFlv = i
        }
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var y = i(0)
            , _ = a(y)
            , S = i(2)
            , g = a(S)
            , T = i(3)
            , P = a(T)
            , I = i(4)
            , E = a(I)
            , k = i(1)
            , R = a(k)
            , C = !1
            , L = !0
            , A = !1
            , M = [{
            text: "关于 A-Frame",
            func: function() {
                window.open("https://aframe.io")
            }
        }]
            , U = 0
            , b = {
            setLiveInfoFromENV: s,
            setLivingInfo: r,
            setFlvToken: l,
            setFlacFlvToken: m
        };
        t.default = b
    }
    , function(e, t, i) {
        "use strict";
        function a(e) {
            return e && e.__esModule ? e : {
                default: e
            }
        }
        function s() {
            var e = "url(" + d.default.H5ROOT + "images/videoloading.gif?" + Math.random() + ") no-repeat";
            $(".player-loading-progress").css("background", e)
        }
        function n() {
            if (!c) {
                if (c = !0,
                "none" == $(".player-loading").css("display")) {
                    $(".player-loading").css("display", "block");
                    var e = "url(" + d.default.H5ROOT + "images/videoloading.gif?" + Math.random() + ") no-repeat";
                    $(".player-loading-progress").css("background", e)
                }
                u(),
                d.default.isReplay || (clearTimeout(f),
                    f = setTimeout(o, 5e3))
            }
        }
        function r() {
            c = !1,
                $(".player-loading").css("display", "none"),
                u(),
                clearTimeout(f)
        }
        function u() {
            $(".player-loading-changeline").hide()
        }
        function o() {
            if (clearTimeout(f),
                d.default.livingInfo) {
                d.default.livingInfo.tNotice.vStreamInfo.value.length < 2 || $(".player-loading-changeline").show()
            }
        }
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var l = i(0)
            , d = a(l)
            , h = i(1)
            , f = (a(h),
            0)
            , c = !1
            , p = {
            showLoading: n,
            setLoadingGif: s,
            hideLoading: r
        };
        t.default = p
    }
    , function(e, t, i) {
        "use strict";
        var a = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                return typeof e
            }
            : function(e) {
                return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
            }
        ;
        !function(e) {
            function t(a) {
                if (i[a])
                    return i[a].exports;
                var s = i[a] = {
                    i: a,
                    l: !1,
                    exports: {}
                };
                return e[a].call(s.exports, s, s.exports, t),
                    s.l = !0,
                    s.exports
            }
            var i = {};
            t.m = e,
                t.c = i,
                t.d = function(e, i, a) {
                    t.o(e, i) || Object.defineProperty(e, i, {
                        enumerable: !0,
                        get: a
                    })
                }
                ,
                t.r = function(e) {
                    "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
                        value: "Module"
                    }),
                        Object.defineProperty(e, "__esModule", {
                            value: !0
                        })
                }
                ,
                t.t = function(e, i) {
                    if (1 & i && (e = t(e)),
                    8 & i)
                        return e;
                    if (4 & i && "object" == (void 0 === e ? "undefined" : a(e)) && e && e.__esModule)
                        return e;
                    var s = Object.create(null);
                    if (t.r(s),
                        Object.defineProperty(s, "default", {
                            enumerable: !0,
                            value: e
                        }),
                    2 & i && "string" != typeof e)
                        for (var n in e)
                            t.d(s, n, function(t) {
                                return e[t]
                            }
                                .bind(null, n));
                    return s
                }
                ,
                t.n = function(e) {
                    var i = e && e.__esModule ? function() {
                            return e.default
                        }
                        : function() {
                            return e
                        }
                    ;
                    return t.d(i, "a", i),
                        i
                }
                ,
                t.o = function(e, t) {
                    return Object.prototype.hasOwnProperty.call(e, t)
                }
                ,
                t.p = "",
                t(t.s = 210)
        }([function(e, t, i) {
            t.__esModule = !0,
                t.default = function(e, t) {
                    if (!(e instanceof t))
                        throw new TypeError("Cannot call a class as a function")
                }
        }
            , function(e, t, i) {
                t.__esModule = !0;
                var a = function(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }(i(234));
                t.default = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var s = t[i];
                            s.enumerable = s.enumerable || !1,
                                s.configurable = !0,
                            "value"in s && (s.writable = !0),
                                (0,
                                    a.default)(e, s.key, s)
                        }
                    }
                    return function(t, i, a) {
                        return i && e(t.prototype, i),
                        a && e(t, a),
                            t
                    }
                }()
            }
            , function(e, t, i) {
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var a = {
                    PAudienceGetProxyListReq: 530178,
                    PAudienceGetProxyListRsp: 530434,
                    PNotifyStreamSwitch: 268034,
                    PLoginVideoProxyUniformly: 5650690,
                    PLoginVideoProxyUniformlyRes: 5650434,
                    PNotifyCurrentCdnStream: 2739202,
                    PNotifyCurrentStream4: 2675714,
                    PSubscribeStream3: 2667266,
                    PSubscribeStreamRes3: 2667522,
                    PStreamData3: 2666754,
                    PStopStream3: 2666498,
                    PStopStream: 2560514,
                    PPullStreamData: 2694146,
                    PResendStreamData4: 2689026,
                    PResendStreamDataFailAck: 2694402,
                    PVideoSyncSpeakerTime3: 2674690,
                    PForceConnectVideoProxy3: 2685442,
                    PVideoProxyPing3: 2669570,
                    PVideoProxyPingRes4: 2683650,
                    PNotifyMultiVideo: 2746370,
                    PLoginAndSubscribe: 4097282,
                    PLoginAndSubscribeRes: 4097538,
                    PNotifyUplinkRecvCount3: 2672642,
                    PVideoBroadcast4: 2754050,
                    PUpdateVideoConfig2: 2569474,
                    PVideoQualityStatistics: 2591746,
                    PP2pPing2: 40706,
                    PP2pPing3: 41218,
                    PP2pVideoPing3: 2671874,
                    VIDEOP2P_PFlashP2PKeepAlive: 3072514,
                    VIDEOP2P_PFlashP2PKeepAliveRes: 3072770,
                    P2PGetNodesProxy3: 2673410,
                    P2PGetNodesProxyRes3: 2673666,
                    P2PSubscribeStream3: 2673922,
                    P2PRemoveSubscribe3: 2674178,
                    P2PKeepAlive: 3074562,
                    P2PKeepAliveRes: 3074818,
                    P2PNotifyNodeLeave: 3075074,
                    P2PSyncDepth: 3075330,
                    PP2PWSForward: 2757378,
                    PP2PWSForwardReject: 5653506,
                    P2PSubStream: 3073026,
                    P2PSubStreamRes: 3073282,
                    P2PSyncSubTree: 3073538,
                    P2PTest: 3073794,
                    P2PSliceData: 3074050,
                    P2PRemoveSub: 3074306,
                    P2PRemoveSubRes: 3075586,
                    P2POffer: 12316162,
                    P2PAnswer: 12316418,
                    P2PCandidate: 12316674,
                    P2POfferReject: 12316930,
                    P2PRequestOffer: 12317186,
                    P2PVersionFailed: 12317442,
                    P2PPingOverProxy: 12317698,
                    P2PPunchBackReq: 12317954,
                    P2PPunchBackRsp: 12318210,
                    PCDNNotifyUrl: 20740866,
                    PCDNStatusReport: 20741122,
                    PCDNGetUrl: 20741378,
                    PCDNSwitchUrl: 20741634,
                    PCdnP2PWSForward: 53283,
                    PCdnP2PWSForwardReject: 53539,
                    PCdnProxyPing: 26147,
                    PCdnProxyPingRes: 26403,
                    PCdnP2PStatics: 26659,
                    PCdnP2PErrStatics: 26915,
                    PCdnP2pGetNode: 51235,
                    PCdnP2pGetNodeRes: 51491,
                    PCdnP2PNodePingThroughProxy: 52259,
                    PCdnP2PNodePunchThroughProxy: 52515,
                    PCdnP2PUserRegister: 52771,
                    PCdnP2PUserRegisterRes: 53027,
                    PCdnP2pReportLog: 54051,
                    PCdnForceConnectVideoProxy: 54563,
                    PCDNGetProxyListReq: 153635,
                    PCDNGetProxyListRsp: 153891,
                    PCDNGetSliceStreamInfoReq: 154147,
                    PCDNGetSliceStreamInfoRsp: 154403,
                    PCDNSubscribeReq: 768547,
                    PCDNSubscribeRes: 768803,
                    PCDNCompeteSubscribeReq: 769059,
                    PCDNCompeteSubscribeRes: 769315,
                    PCDNForceSubscribeNotify: 769571,
                    PCdnP2pUserUnRegister: 770083,
                    PP2pSliceData: 511779,
                    PP2pSliceAudioData: 512035,
                    PP2pSliceVideoData: 512291,
                    PP2pSliceControlData: 1024547,
                    PForceConnectCdnVideoProxy3: 2711042
                };
                !function e() {
                    if (!e.done) {
                        e.done = !0;
                        var t = [];
                        for (var i in a) {
                            var s = a[i];
                            t.push({
                                uri: s,
                                name: i
                            })
                        }
                        t.forEach(function(e) {
                            a[e.uri] = e.name
                        })
                    }
                }(),
                    t.default = a
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                function s() {
                    return u.default.getDateTimeStr() + " "
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var n = a(i(147))
                    , r = a(i(27))
                    , u = a(i(5));
                a(i(11));
                var o = 99
                    , l = !1
                    , d = {
                    _data: [],
                    _length: 0,
                    debug: function() {
                        var e = s()
                            , t = Array.apply(null, arguments);
                        t[0] = e + t[0],
                        o <= -1 && console.log.apply(console, t)
                    },
                    log: function(e) {
                        var t = s()
                            , i = Array.apply(null, arguments);
                        i[0] = t + i[0],
                        o <= 0 && console.log.apply(console, i),
                            d.record(i, "log")
                    },
                    info: function(e) {
                        var t = s()
                            , i = Array.apply(null, arguments);
                        i[0] = t + i[0],
                        o <= 1 && console.info.apply(console, i),
                            d.record(i, "info")
                    },
                    warn: function(e) {
                        var t = s()
                            , i = Array.apply(null, arguments);
                        i[0] = t + i[0],
                        o <= 2 && console.warn.apply(console, i),
                            d.record(i, "warn")
                    },
                    error: function(e) {
                        var t = s()
                            , i = Array.apply(null, arguments);
                        i[0] = t + i[0],
                        o <= 3 && console.error.apply(console, i),
                            d.record(i, "error")
                    },
                    group: function(e) {
                        var t = s()
                            , i = Array.apply(null, arguments);
                        i[0] = t + i[0],
                        o <= 1 && (console.groupCollapsed || console.group || console.log).apply(console, i),
                            d.record(i, "group")
                    },
                    groupEnd: function() {
                        console.groupEnd && console.groupEnd.apply(console)
                    },
                    setLevel: function(e) {
                        e != o && (console.log(s() + " set log level from " + o + " to " + e),
                            o = e)
                    },
                    getLevel: function() {
                        return o
                    },
                    record: function(e, t) {
                        1100 === d._length && (d._data.splice(0, 100),
                            d._length = 1e3);
                        var i = 0
                            , a = (e.shift() || "").toString();
                        for (a = a.replace(/\%c/gi, function(e, t) {
                            return i++,
                                ""
                        }); i-- && e.length; )
                            e.shift();
                        for (var s = 0, r = e.length; s < r; s++) {
                            var u = e[s];
                            "object" == (void 0 === u ? "undefined" : (0,
                                n.default)(u)) && (e[s] = "")
                        }
                        e.unshift(a);
                        var o = e.join(" ");
                        d._length++,
                            d._data.push("[" + t + "]" + o)
                    },
                    getLog: function() {
                        return l || (l = !0,
                            d._data.unshift(r.default.platform + " " + r.default.name + " " + r.default.version.string)),
                            d._data
                    }
                };
                t.default = d
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = function() {
                    function e() {
                        var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                        (0,
                            s.default)(this, e),
                            this.hasHeader = t,
                            this.segments = [],
                            this.data = null,
                            this.totalLen = 0,
                            this.uri = 0,
                        this.hasHeader && (this.pushUInt32(10),
                            this.pushUInt32(this.uri),
                            this.pushUInt16(200))
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            if (0 === this.segments.length)
                                return null;
                            this.data = new Uint8Array(this.totalLen);
                            for (var e = 0, t = 0; t < this.segments.length; ++t) {
                                var i = this.segments[t];
                                this.data.set(i, e),
                                    e += i.length
                            }
                            return this.hasHeader && (this.replaceUInt32(0, this.totalLen),
                                this.replaceUInt32(4, this.uri)),
                                this.data
                        }
                    }, {
                        key: "setUri",
                        value: function(e) {
                            this.uri = e
                        }
                    }, {
                        key: "replaceUInt32",
                        value: function(e, t) {
                            new DataView(this.data.buffer).setUint32(e, t, !0)
                        }
                    }, {
                        key: "pushBool",
                        value: function(e) {
                            this.pushUInt8(e ? 1 : 0)
                        }
                    }, {
                        key: "pushUInt8",
                        value: function(e) {
                            var t = new Uint8Array(1);
                            new DataView(t.buffer).setUint8(0, e),
                                this.segments.push(t),
                                this.totalLen++
                        }
                    }, {
                        key: "pushUInt16",
                        value: function(e) {
                            var t = new Uint8Array(2);
                            new DataView(t.buffer).setUint16(0, e, !0),
                                this.segments.push(t),
                                this.totalLen += 2
                        }
                    }, {
                        key: "pushUInt32",
                        value: function(e) {
                            var t = new Uint8Array(4);
                            new DataView(t.buffer).setUint32(0, e, !0),
                                this.segments.push(t),
                                this.totalLen += 4
                        }
                    }, {
                        key: "pushUInt64",
                        value: function(e) {
                            var t = new Uint8Array(8)
                                , i = new DataView(t.buffer)
                                , a = e % 4294967296
                                , s = e / 4294967296 >> 0;
                            i.setUint32(0, a, !0),
                                i.setUint32(4, s, !0),
                                this.segments.push(t),
                                this.totalLen += 8
                        }
                    }, {
                        key: "pushUint8Array",
                        value: function(e) {
                            this.pushUInt16(e.length),
                                this.segments.push(e),
                                this.totalLen += e.length
                        }
                    }, {
                        key: "pushUint8ArrayWithoutLen",
                        value: function(e) {
                            this.segments.push(e),
                                this.totalLen += e.length
                        }
                    }, {
                        key: "pushUint8Array32",
                        value: function(e) {
                            this.pushUInt32(e.length),
                                this.segments.push(e),
                                this.totalLen += e.length
                        }
                    }, {
                        key: "pushUInt32Vector",
                        value: function(e) {
                            this.pushUInt32(e.length);
                            for (var t = 0; t < e.length; t++)
                                this.pushUInt32(e[t])
                        }
                    }, {
                        key: "pushUInt64Vector",
                        value: function(e) {
                            this.pushUInt32(e.length);
                            for (var t = 0; t < e.length; t++)
                                this.pushUInt64(e[t])
                        }
                    }, {
                        key: "pushUInt16Vector",
                        value: function(e) {
                            this.pushUInt32(e.length);
                            for (var t = 0; t < e.length; t++)
                                this.pushUInt16(e[t])
                        }
                    }, {
                        key: "pushString",
                        value: function(e) {
                            this.pushUInt16(e.length);
                            for (var t = new Uint8Array(e.length), i = new DataView(t.buffer), a = 0; a < e.length; ++a)
                                i.setUint8(a, e.charCodeAt(a));
                            this.segments.push(t),
                                this.totalLen += e.length
                        }
                    }, {
                        key: "pushString32",
                        value: function(e) {
                            this.pushUInt32(e.length);
                            for (var t = new Uint8Array(e.length), i = new DataView(t.buffer), a = 0; a < e.length; ++a)
                                i.setUint8(a, e.charCodeAt(a));
                            this.segments.push(t),
                                this.totalLen += e.length
                        }
                    }]),
                        e
                }();
                t.default = r
            }
            , function(e, t, i) {
                function a(e, t) {
                    var i = e.toString().length;
                    return "0".repeat(Math.max(0, t - i)) + e
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = 0
                    , n = {
                    now: function() {
                        0 === s && (s = Date.now() - 1);
                        var e = Date.now() - s;
                        return e > 4294967295 ? (s += 4294967295,
                        e - 4294967295) : e
                    },
                    utc: function() {
                        return Math.round(Date.now() / 1e3)
                    },
                    getDateStr: function() {
                        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : NaN
                            , t = null;
                        return (t = e ? new Date(e) : new Date).getFullYear() + "-" + a(t.getMonth() + 1, 2) + "-" + a(t.getDate(), 2)
                    },
                    getTimeStr: function() {
                        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : NaN
                            , t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1]
                            , i = null
                            , s = a((i = e ? new Date(e) : new Date).getHours(), 2) + ":" + a(i.getMinutes(), 2) + ":" + a(i.getSeconds(), 2);
                        return t && (s += "." + a(i.getMilliseconds(), 3)),
                            s
                    },
                    getDateTimeStr: function() {
                        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : NaN
                            , t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1]
                            , i = null
                            , s = (i = e ? new Date(e) : new Date).getFullYear() + "-" + a(i.getMonth() + 1, 2) + "-" + a(i.getDate(), 2) + " " + a(i.getHours(), 2) + ":" + a(i.getMinutes(), 2) + ":" + a(i.getSeconds(), 2);
                        return t && (s += "." + a(i.getMilliseconds(), 3)),
                            s
                    }
                };
                t.default = n
            }
            , function(e, t, i) {
                e.exports = {
                    default: i(238),
                    __esModule: !0
                }
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(64))
                    , u = a(i(4))
                    , o = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.streamName = "",
                            this.codecType = 0,
                            this.cdnBrand = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new u.default(!1);
                            return e.pushString(this.streamName),
                                e.pushUInt16(this.codecType),
                                e.pushUInt16(this.cdnBrand),
                                e.marshall()
                        }
                    }, {
                        key: "unmarshall",
                        value: function(e) {
                            return this.streamName = e.popString(),
                                this.codecType = e.popUInt16(),
                                this.cdnBrand = e.popUInt16(),
                                this
                        }
                    }, {
                        key: "getDefCodecRate",
                        value: function() {
                            return this.codecType >= r.default.VIDEO_264_START && this.codecType <= r.default.VIDEO_H264_END ? 100 * (this.codecType - r.default.VIDEO_264_START) : this.codecType >= r.default.VIDEO_265_START && this.codecType <= r.default.VIDEO_H265_END ? 100 * (this.codecType - r.default.VIDEO_265_START) : 128
                        }
                    }, {
                        key: "text",
                        value: function() {
                            return this.streamName + "_" + this.codecType + "_" + this.cdnBrand
                        }
                    }, {
                        key: "equal",
                        value: function(e) {
                            return !!e && this.streamName == e.streamName && this.codecType == e.codecType && this.cdnBrand == e.cdnBrand
                        }
                    }, {
                        key: "isValidID",
                        get: function() {
                            return this.codecType > 0
                        }
                    }, {
                        key: "isH264",
                        get: function() {
                            return this.codecType >= r.default.VIDEO_264_START && this.codecType <= r.default.VIDEO_H264_END
                        }
                    }, {
                        key: "isH265",
                        get: function() {
                            return this.codecType >= r.default.VIDEO_265_START && this.codecType <= r.default.VIDEO_H265_END
                        }
                    }]),
                        e
                }();
                t.default = o
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = function() {
                    function e() {
                        (0,
                            s.default)(this, e)
                    }
                    return (0,
                        n.default)(e, null, [{
                        key: "rotl64",
                        value: function(e, t) {
                            return e << t | e >> 64 - t
                        }
                    }, {
                        key: "rotr64",
                        value: function(e, t) {
                            return e >> t | e << 64 - t
                        }
                    }, {
                        key: "rotUid",
                        value: function(t, i) {
                            return t = parseFloat(t),
                                i = parseFloat(i),
                            e.rotl64(t ^ i, 8) + i % 256
                        }
                    }, {
                        key: "revertUid",
                        value: function(t, i) {
                            var a = (t = parseFloat(t)) - (i = parseFloat(i)) % 256;
                            return a = e.rotr64(a, 8) ^ i
                        }
                    }, {
                        key: "inet_ntoa",
                        value: function(e) {
                            var t, i, a, s = new Uint8Array(4), n = new DataView(s.buffer);
                            return n.setUint32(0, e),
                                t = n.getUint8(0),
                                i = n.getUint8(1),
                                a = n.getUint8(2),
                            n.getUint8(3) + "." + a + "." + i + "." + t
                        }
                    }, {
                        key: "ip2uint",
                        value: function(e) {
                            for (var t = 0, i = e.split("."), a = 0; a < i.length; a++)
                                t |= Number(i[a]) << 8 * a;
                            return t < 0 && (t += 4294967296),
                                t
                        }
                    }, {
                        key: "isBiggerUint",
                        value: function(e, t) {
                            return e !== t && (e > t ? e - t < 2147483647 : !(t - e < 2147483647))
                        }
                    }, {
                        key: "isEqualOrBiggerUint",
                        value: function(e, t) {
                            return e === t || (e > t ? e - t < 2147483647 : !(t - e < 2147483647))
                        }
                    }, {
                        key: "isUintMax",
                        value: function(e) {
                            return 4294967295 === e
                        }
                    }, {
                        key: "isUint64Max",
                        value: function(e) {
                            return 0x10000000000000000 === e
                        }
                    }, {
                        key: "getQueryString",
                        value: function(e) {
                            var t = new RegExp("(^|&)" + e + "=([^&]*)(&|$)")
                                , i = window.location.search.substr(1).match(t);
                            return null != i ? unescape(i[2]) : null
                        }
                    }, {
                        key: "printHexBytes",
                        value: function(e) {
                            for (var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i = new DataView(e.buffer), a = t ? 10 : 0, s = []; a < i.byteLength; ) {
                                var n = i.getUint8(a++);
                                (n = n.toString(16).toUpperCase()).length < 2 && (n = "0" + n),
                                    s.push(n, "\t"),
                                a % 10 == 0 && s.push("\n")
                            }
                            console.log(s.join("") + "\tsize:", i.byteLength)
                        }
                    }, {
                        key: "getCookie",
                        value: function(e) {
                            for (var t = e + "=", i = document.cookie.split(";"), a = 0, s = i.length; a < s; a++) {
                                var n = i[a].trim();
                                if (0 == n.indexOf(t))
                                    return n.substr(t.length)
                            }
                            return ""
                        }
                    }, {
                        key: "formatByteSize",
                        value: function(e) {
                            var t = e / 1024;
                            return t = t > 1024 ? (t /= 1024).toFixed(1) + "MB" : t.toFixed(1) + "KB"
                        }
                    }, {
                        key: "padStrLen",
                        value: function(e, t) {
                            var i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                            if (e.length >= t)
                                return e;
                            var a = " ".repeat(t - e.length);
                            return i ? a + e : e + a
                        }
                    }, {
                        key: "xhr",
                        value: function(e, t, i, a, s) {
                            var n = new XMLHttpRequest;
                            n.overrideMimeType("text/plain; charset=x-user-defined"),
                                n.addEventListener("readystatechange", function e() {
                                    4 === n.readyState && (200 === n.status || 304 === n.status ? a(n.response) : s(n.status),
                                        n.removeEventListener("readystatechange", e),
                                        n = void 0)
                                }),
                                n.open(t, e, !0),
                                n.send(i)
                        }
                    }]),
                        e
                }();
                r.IntMax = 2147483647,
                    r.IntMin = -2147483647,
                    r.UintMax = 4294967295,
                    t.default = r
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                function s(e, t) {
                    for (var i = 0; i < e.length; i++) {
                        var a = e[i];
                        a.length < t && (a += " ".repeat(t - a.length),
                            e[i] = a)
                    }
                    return e.join("\n")
                }
                function n(e, t, i) {
                    var a = v[e];
                    if (!a)
                        return !1;
                    for (var s = 0, n = a.length; s < n; s++) {
                        var r = a[s];
                        if (r.callback == t && r.thisObj == i)
                            return !0
                    }
                    return !1
                }
                function r(e, t) {
                    return t.priority - e.priority
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var u = a(i(237))
                    , o = a(i(3))
                    , l = a(i(165))
                    , d = a(i(5))
                    , h = a(i(15))
                    , f = {
                    presenterUid: 0,
                    uid: 0,
                    uuid: 0,
                    convertUid: 0,
                    appid: 66,
                    sid: 0,
                    subSid: 0,
                    getUid: function() {
                        return f.uuid
                    },
                    lineType: -1,
                    originalBitrate: -1,
                    bitrate: 0,
                    curBitRate: 0,
                    userAbility: null,
                    isStartFromUrl: !1,
                    extendConfig: {
                        urgentResend: "0",
                        p2pWssLines: "",
                        quickAccessLines: "",
                        crossCdn: "0",
                        multiCdn: "0",
                        multiCdnRate: {
                            1: 33,
                            3: 33,
                            5: 33
                        },
                        multiCdnBitrate: 0,
                        multiCdnChannel: "",
                        connectTotalTime: 6e3,
                        connectTimeout: 2e3,
                        flowTimeout: 2e3,
                        flowRetryTimes: 3,
                        renderTimeout: 4e3,
                        noDataTimeout: 3e3,
                        p2pConfig: {
                            needCooling: 1,
                            needQueue: 1,
                            queueTime: 5e3,
                            punchedCoolingTime: 6e4,
                            delayCloseNum: 100,
                            competeTime: 1e4,
                            punchTimeout: 5e3,
                            punchBackTimeout: 1e4,
                            useUnsubCdn: 0,
                            maxPunchedCnt: 15,
                            maxPunchedCntMore: 30,
                            maxNodeCnt: 30,
                            punchMin: 1,
                            punchGap: 1,
                            punchMax: 4,
                            punchTime: 60,
                            punchBack: 6,
                            punchInterval: 3,
                            coefficient: 8,
                            closeSubTree: 1,
                            uncompeteCoderate: 3e3,
                            trySubNum: 5,
                            trySubTime: 5e3,
                            fastTime: 5e3,
                            sliceLate: 2e3,
                            sliceFast: 5e3,
                            badDelay: 1200,
                            emuteDelay: 1e3,
                            switchInterval: 20,
                            switchMin: 5,
                            switchMax: 60,
                            switchTime: 60,
                            resubTime: 3e4,
                            sliceTimeout: 1e3,
                            uplinkStreamNum: 10,
                            maxPeerStreamNum: 8,
                            coderates: [[8e3, 7, 100, 3, 3, 250], [5e3, 6, 60, 3, 3, 200], [4e3, 5, 50, 3, 3, 150], [3e3, 4, 30, 3, 3, 100], [0, 2, 15, 3, 3, 50]],
                            swapdomain: {}
                        },
                        forceSubLoader: 0,
                        testResender: 0,
                        maxResendTs: 3e3,
                        minResendTs: 200,
                        maxResendTimes: 2,
                        resendGapTs: 400,
                        resendMinCnt: 10,
                        resendDelayTs: 400,
                        patchSubTs: 250,
                        http2Channel: ""
                    },
                    isCrossCdn: function() {
                        return !!Number(f.extendConfig.crossCdn)
                    },
                    isMutiCdn: function() {
                        c || (c = !0,
                            function() {
                                if (Number(f.extendConfig.multiCdn) && "" != f.extendConfig.multiCdnChannel && "-1" != f.extendConfig.multiCdnChannel) {
                                    for (var e = f.sid.toString(), t = f.sid + "_" + f.subSid, i = f.extendConfig.multiCdnChannel.split(/\,|\，/), a = "!" == i[0] || "！" == i[0], s = !1, n = 0; n < i.length; n++) {
                                        var r = i[n];
                                        if (a) {
                                            if (0 == n)
                                                continue;
                                            if (r == e || r == t) {
                                                s = !0;
                                                break
                                            }
                                        } else if (r == e || r == t)
                                            return
                                    }
                                    a && 1 != i.length && !s || (f.extendConfig.multiCdn = 0),
                                        a ? (1 == i.length || s) && o.default.warn("[BlackList] Match channel, turn off multiCdn.") : o.default.warn("[WhiteList] No match channel, turn off multiCdn.")
                                }
                            }());
                        var e = f.extendConfig.multiCdnBitrate;
                        return !!Number(f.extendConfig.multiCdn) && (0 == e || e <= f.curBitRate)
                    },
                    isHttp2: function() {
                        if ("-1" == f.extendConfig.http2Channel)
                            return !0;
                        for (var e = f.sid.toString(), t = f.sid + "_" + f.subSid, i = f.extendConfig.http2Channel.split(/\,|\，/), a = 0; a < i.length; a++) {
                            var s = i[a];
                            if (s == e || s == t)
                                return !0
                        }
                        return !1
                    },
                    useNewTxDomain: function() {
                        return Number(f.extendConfig.useNewTxDomain)
                    },
                    streamId: null,
                    streamSeqSN: 0,
                    quickAccessBeginIndex: 0,
                    quickAccessEndIndex: 0,
                    exip: 0,
                    sslUrl: "",
                    myIp: "",
                    quickTime: 0,
                    urlTokenTime: 0,
                    urlToken: "",
                    wsTime: "",
                    videoNtp: new l.default,
                    stampcSvr: 0,
                    stampcNow: 0,
                    getServTime: function(e) {
                        if (0 == f.stampcSvr)
                            return 0;
                        var t = e || d.default.now();
                        return f.stampcSvr + (t - f.stampcNow)
                    },
                    sFlvToken: null,
                    wanIp: "",
                    wanPort: 0,
                    cdnpConnected: 0,
                    BASE_SUBS: 10,
                    proxyLink: null,
                    videoLink: null,
                    loaderMgr: null,
                    p2pMgr: null,
                    globalSpeedCalc: new h.default(20),
                    initTafTime: 0,
                    reqVpTime: 0,
                    getVPTime: 0,
                    startTime: 0,
                    connectVideoTime: 0,
                    firstVideoPkgTime: 0,
                    firstIFrameTime1: 0,
                    firstIFrameTime2: 0,
                    firstRenderTime: 0,
                    onPlayTime: 0,
                    initUseTime: function(e) {
                        o.default.log("initUseTime", e),
                            f.startTime = e,
                            f.getLivingInfoTime = 0,
                            f.connectVideoTime = 0,
                            f.firstVideoPkgTime = 0,
                            f.firstAudioPkgTime = 0,
                            f.firstIFrameTime1 = 0,
                            f.firstIFrameTime2 = 0,
                            f.firstRenderTime = 0,
                            f.onPlayTime = 0
                    },
                    printUseTime: function() {
                        var e = ["\n%c" + ".".repeat(28), " getLivingInfoTime    = " + Math.max(0, f.getLivingInfoTime - f.startTime), " connectVideoTime     = " + (f.connectVideoTime - f.startTime)];
                        f.firstVideoPkgTime > 0 ? e.push(" firstVideoPkgTime    = " + (f.firstVideoPkgTime - f.connectVideoTime), " firstIFrameTime1     = " + (f.firstIFrameTime1 - f.connectVideoTime), " firstIFrameTime2     = " + (f.firstIFrameTime2 - f.firstIFrameTime1), " firstRenderTime      = " + (f.firstRenderTime - f.firstIFrameTime2)) : e.push(" firstAudioPkgTime    = " + (f.firstAudioPkgTime - f.connectVideoTime), " firstRenderTime      = " + (f.firstRenderTime - f.firstAudioPkgTime)),
                            e.push(" onPlayTime           = " + (f.onPlayTime - f.firstRenderTime), " totalTime            = " + (f.onPlayTime - f.startTime), ".".repeat(28));
                        var t = s(e, 28);
                        o.default.log(t, "color:#007500;background:#FFF5C2")
                    },
                    printVpTime: function e() {
                        if (!e.done) {
                            e.done = !0;
                            var t = ["\n%c" + ".".repeat(28), " initTafTime      = " + (f.initTafTime - 0), " getVPTime        = " + (f.getVPTime - f.reqVpTime), " connectVpTime    = " + (f.connectVpTime - f.getVPTime), " loginTime        = " + (f.loginTime - f.connectVpTime), " totalTime        = " + (f.loginTime - f.reqVpTime), ".".repeat(28)]
                                , i = s(t, 28);
                            o.default.log(i, "color:#007500;background:#FFF5C2")
                        }
                    },
                    getConfig: function(e) {
                        return p.getConfig(e)
                    },
                    setConfig: function(e, t) {
                        p.setConfig(e, t)
                    },
                    hasListener: n,
                    addListener: function(e, t, i, a) {
                        if (!n(e, t, i)) {
                            var s = v[e] || [];
                            s.push({
                                priority: a || 0,
                                callback: t,
                                thisObj: i,
                                bindCallback: i ? t.bind(i) : t
                            }),
                                s.sort(r),
                                v[e] = s
                        }
                    },
                    removeListener: function(e, t, i) {
                        var a = v[e];
                        if (a)
                            for (var s = a.length - 1; s >= 0; s--) {
                                var n = a[s];
                                if (n.callback == t && n.thisObj == i)
                                    return void a.splice(s, 1)
                            }
                    },
                    _onYYData: function(e, t) {
                        var i = v[e];
                        i && i.forEach(function(e) {
                            (0,
                                e.bindCallback)(t)
                        })
                    },
                    send: function(e) {
                        return !!f.videoLink && f.videoLink.send(e)
                    },
                    sendWup: function(e, t, i) {
                        var a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null
                            , s = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4];
                        if (!f.proxyLink)
                            return void o.default.error("G.sendWup proxyLink=null");
                        f.proxyLink.sendWup(e, t, i, a, s)
                    },
                    sendYY: function(e, t) {
                        var i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
                        if (!f.proxyLink)
                            return void o.default.error("G.sendYY proxyLink=null");
                        f.proxyLink.sendYY(e, t, i)
                    }
                };
                t.default = f;
                var c = !1
                    , p = new u.default
                    , v = {}
            }
            , function(e, t, i) {
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var a = {
                    SLICE_SPEED: 12.5,
                    MAX_PACKET_CNT: 1e4,
                    SWITCH_INTERVAL: 10,
                    MAX_DELAY: 66e4,
                    DEFAULT_DELAY: 65535,
                    SUBSCRIBE_TIMEOUT: 1e4,
                    PUNCH_BACK_COOLING: 2e4,
                    PUNCH_IGNORE_TIME: 3e5,
                    SUB_TIMEOUT: 5e3,
                    RESUB_TIMEOUT: 3e4,
                    STREAM_DELAY: 1200,
                    EMULATE_DELAY: 1e3,
                    MAX_DEPTH: 1,
                    PROXY_NUM: 3,
                    MAX_PEER_STREAM_NUM: 8,
                    MAX_PUSH_NUM: 3,
                    MAX_PULL_NUM: 3,
                    SLICE_DELAY: 100,
                    SLICE_LATE: 50,
                    SLICE_FAST: 50,
                    SLICE_TIMEOUT: 1e3,
                    SWITCH_MIN: 5,
                    SWITCH_MAX: 30,
                    SWITCH_TIME: 120,
                    StreamType: {
                        NONE: 0,
                        FORCE: 1,
                        FIXED: 2,
                        COMPETE: 3,
                        PEER: 4
                    },
                    LeaveReason: {
                        PING_DIF: 1,
                        RESET: 2
                    },
                    DEL_REASON: {
                        CHANNEL_CLOSE: 1,
                        CHANNEL_ERROR: 2,
                        NODE_LEAVE: 3,
                        SERVER_REJECT: 5,
                        PEER_ERROR: 6,
                        PEER_TIMEOUT: 7,
                        PING_TIMEOUT: 8,
                        OTHER_SID: 9,
                        EMPTY_SLICE: 10,
                        SUB_TIMEOUT: 11,
                        SUB_FAIL_TIMES: 12,
                        NODE_REJECT: 13,
                        DIF_CDNP: 14
                    },
                    PERIOD: {
                        UPLINK_CALC: 10,
                        CHECK_SEED: 20,
                        GET_NODE: 30
                    },
                    SubType: {
                        SUBSCRIBE_FORCE: 0,
                        SUBSCRIBE_NORMAL: 1
                    },
                    SubResCode: {
                        ACCEPT_SUBSCRIBE: 0,
                        EMPTY_UPLOAD_NUM: 1,
                        DETECT_SUBSCRIBE_CYCLE: 2,
                        EMPTY_PEER_INFO: 3,
                        SUBSCRIBE_UPLINK_NOT_ENOUGH: 4,
                        PUBLISHER_KICK_OFF: 5,
                        NOT_SUBSCRIBER: 6,
                        INVALID_SUB_STREAM: 7,
                        ACCEPT_BY_SUBSCRIBER_UPLINK: 9,
                        INVALID_STREAMID: 10,
                        SERVER_EMPTY_BW: 11,
                        PUBLISHER_LEAVE: 12,
                        DIFFERENT_VIDEO_PROXY: 13,
                        OLD_VERSION_REQ: 14,
                        INVALID_TREE_DEPTH: 15,
                        INVALID_MAX_SUBSTREAM_NUM: 16,
                        STREAM_LATE: 17,
                        DEPTH_LARGE: 18,
                        STREAM_LIMIT: 19,
                        SLICE_LARGE: 20,
                        NOT_FOUND_PKG: 21,
                        KICK_OUT: 22,
                        SELF_WORST: 23,
                        SLICE_LATE: 24,
                        SLICE_FAST: 25,
                        RESTART: 26
                    },
                    VIDEO_COMPETE_UID: 4294967295,
                    VIDEO_FORCE_UID: 0,
                    VIDEO_FIXED_UID: -1,
                    VIDEO_DEFAULT_UID: -2,
                    isProxyUid: function(e) {
                        return e === a.VIDEO_COMPETE_UID || e === a.VIDEO_FORCE_UID || e === a.VIDEO_FIXED_UID || e === a.VIDEO_DEFAULT_UID
                    },
                    isCompete: function(e) {
                        return e === a.VIDEO_COMPETE_UID
                    },
                    isForce: function(e) {
                        return e === a.VIDEO_FORCE_UID
                    },
                    isFixed: function(e) {
                        return e === a.VIDEO_FIXED_UID
                    },
                    isDefault: function(e) {
                        return e === a.VIDEO_DEFAULT_UID
                    },
                    isSliceJumpFromPeer: function(e, t) {
                        return t.isFromPeer && e > 0 && t.seq - e > 10 * a.LOST_SEQ_NUM
                    },
                    offerReject: {
                        REASON_NOTSTART: 1,
                        REASON_PUNCHFAILED_CD: 2,
                        REASON_PUNCHED_FULL: 3,
                        REASON_QUOTA_EXHAUST: 4,
                        REASON_VERSION: 5,
                        REASON_DIF_LINE: 6,
                        REASON_FAIL: 7,
                        REASON_IGNORE: 8,
                        REASON_HAS_NODE: 9,
                        REASON_WAITING: 10,
                        REASON_OTHER: 100
                    },
                    offerRejectTime: 12e4,
                    punchBackRet: {
                        SUC: 0,
                        DIF_STREAM: 1,
                        CLOSING: 2,
                        COOLING: 3,
                        REQUEST: 4
                    },
                    restartReason: {
                        RANGE_SEQ_MAX: 1,
                        RANGE_SEQ_LARGE: 2,
                        CDN_JUMP: 3,
                        PLAYER_NO_DATA: 4,
                        LOST_SEQ: 5,
                        CONNECT: 6,
                        WORKER_ERROR: 7,
                        MULTI_CDN: 8,
                        FLV_TO_P2P: 9,
                        PLAYER_ERROR: 10,
                        PLAYER_DISPOSE: 11,
                        LOST_SEQ_JUMP: 12
                    },
                    turnToFlvReason: {
                        FULL_PLAY_FAIL: 1,
                        FULL_CONNECT_TIMEOUT: 2,
                        SUB_CONNECT_TIMEOUT: 3,
                        FULL_NO_DATA: 4,
                        SUB_NO_DATA: 5,
                        P2P_ARGS_ERROR: 6,
                        P2P_COOLING: 7,
                        FLV_TO_P2P_FAIL: 8,
                        FLV_TO_P2P_FULL_STREAM_COMPLETE: 9
                    },
                    userProperty: {
                        SERVER_CLOSE: 1,
                        CLIENT_CLOSE: 2,
                        BROWSER_UN_SUPPORT: 3,
                        FLASH: 4,
                        UNKNOW: 5,
                        P2P: 6,
                        FIRST_FULL_CONNECT_TIMEOUT: 7,
                        FIRST_FULL_PLAY_FAIL: 8,
                        FIRST_FULL_NO_DATA: 17,
                        RESTART_RANGE_MAX: 9,
                        RESTART_RANGE_LARGE: 10,
                        RESTART_CONNECT: 11,
                        RESTART_MUTI_CDN: 12,
                        RESTART_PLAYER_NO_DATA: 13,
                        RESTART_PLAYER_ERROR: 14,
                        SUB_NO_DATA: 15,
                        SUB_CONNECT_TIMEOUT: 16,
                        P2P_ARGS_ERROR: 18,
                        FLV_TO_P2P: 19,
                        LOST_SEQ: 20,
                        P2P_COOLING: 21
                    },
                    pauseReason: {
                        FLV_NO_BUFF: 1,
                        FLV_UNKNOW_PAUSE: 2,
                        FLV_NET_SLOW: 3,
                        P2P_NO_BUFF: 4,
                        P2P_UNKNOW_PAUSE: 5,
                        P2P_FULL_LOADER_NO_DATA: 10,
                        P2P_FULL_LOADER_CONNECT_FAIL: 11,
                        P2P_SUB_LOADER_NO_DATA: 12,
                        P2P_SUB_LOADER_CONNECT_FAIL: 13,
                        FLV_NO_DATA: 14,
                        P2P_NO_SLICE: 15,
                        P2P_RESEND_SKIP_FRAME: 20,
                        P2P_RESEND_TOOLATE: 21,
                        P2P_RESEND_TIMEOUT: 22,
                        P2P_RESEND_ERROR: 23,
                        P2P_RESEND_MISSING: 24,
                        P2P_DTS_JUMP: 25,
                        P2P_NET_SLOW: 26
                    },
                    DataType: {
                        SIGNALLING: 0,
                        PING: 1,
                        SLICE: 2
                    },
                    LOST_SEQ_NUM: 4e3
                };
                t.default = a
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                function s(e, t) {
                    for (var i = 0, a = h.length; i < a; i++) {
                        var s = h[i];
                        if (s.callback == e && s.thisObj == t)
                            return s
                    }
                    return null
                }
                function n(e, t, i) {
                    var a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null
                        , n = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0;
                    if ((i = 0 | (Number(i) || 0)) < l || i % l != 0 || !e)
                        return u.default.error("Timer.add Invalide interval value or callback function."),
                            !1;
                    var o = s(e, t);
                    return o || (o = {
                        callback: e,
                        thisObj: t,
                        bindCallback: t ? e.bind(t) : e,
                        param: a
                    },
                        h.push(o)),
                        o.times = n,
                        o.tickCount = 0,
                        o.interval = i / l,
                        o.delayDel = !1,
                        c ? c.postMessage("start") : !f && h.length > 0 && (f = setInterval(r, l)),
                        !0
                }
                function r() {
                    if (0 != h.length) {
                        d = !0;
                        for (var e = o.default.now(), t = h.length - 1; t >= 0; t--) {
                            var i = h[t];
                            if (i && !i.delayDel) {
                                if (++i.tickCount % i.interval == 0) {
                                    var a = i.bindCallback
                                        , s = i.tickCount / i.interval;
                                    a(e, s, i.param),
                                    i.times > 0 && i.times <= s && i.tickCount > 0 && h.splice(t, 1)
                                }
                            } else
                                h.splice(t, 1)
                        }
                        d = !1
                    } else
                        c ? c.postMessage("stop") : (clearInterval(f),
                            f = 0)
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var u = a(i(3))
                    , o = a(i(5))
                    , l = 10
                    , d = !1
                    , h = []
                    , f = 0
                    , c = null;
                t.default = {
                    has: function(e, t) {
                        return !!s(e, t)
                    },
                    add: n,
                    remove: function(e, t) {
                        for (var i = 0, a = h.length; i < a; i++) {
                            var s = h[i];
                            if (s.callback == e && s.thisObj == t)
                                return d ? s.delayDel = !0 : h.splice(i, 1),
                                    !0
                        }
                        return !1
                    },
                    once: function(e, t, i, a) {
                        n(e, t, i + l, a, 1)
                    },
                    getSize: function() {
                        return h.length
                    }
                }
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(49))
                    , u = a(i(50))
                    , o = a(i(4))
                    , l = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.appid = 0,
                            this.streamType = 0,
                            this.codecType = 0,
                            this.sid = 0,
                            this.startTs = 0,
                            this.serverGenSeq = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new o.default(!1);
                            return e.pushUInt8(this.appid),
                                e.pushUInt8(this.streamType),
                                e.pushUInt16(this.codecType),
                                e.pushUInt64(this.sid),
                                e.pushUInt32(this.startTs),
                                e.pushUInt16(this.serverGenSeq),
                                e.marshall()
                        }
                    }, {
                        key: "unmarshall",
                        value: function(e) {
                            return this.appid = e.popUInt8(),
                                this.streamType = e.popUInt8(),
                                this.codecType = e.popUInt16(),
                                this.sid = e.popUInt64(),
                                this.startTs = e.popUInt32(),
                                this.serverGenSeq = e.popUInt16(),
                                this
                        }
                    }, {
                        key: "text",
                        value: function() {
                            return this.appid + "-" + this.streamType + "-" + this.codecType + "-" + this.sid + "-" + this.startTs + "-" + this.serverGenSeq
                        }
                    }, {
                        key: "equal",
                        value: function(e) {
                            return null !== e && this.appid === e.appid && this.streamType === e.streamType && this.codecType === e.codecType && this.sid === e.sid && this.startTs === e.startTs && this.serverGenSeq === e.serverGenSeq
                        }
                    }, {
                        key: "isValidID",
                        get: function() {
                            return this.appid > 0
                        }
                    }, {
                        key: "isTransStream",
                        get: function() {
                            return 1 == (1 & this.streamType)
                        }
                    }, {
                        key: "isAudioStream",
                        get: function() {
                            return this.streamType >= r.default.STRAEM_TYPE_AUDIO_START
                        }
                    }, {
                        key: "isVideoStream",
                        get: function() {
                            return this.streamType < r.default.STRAEM_TYPE_AUDIO_START
                        }
                    }, {
                        key: "isH264VideoStream",
                        get: function() {
                            return this.isVideoStream && this.codecType >= u.default.VIDEO_264_START && this.codecType <= u.default.VIDEO_H264_END
                        }
                    }, {
                        key: "isH265VideoStream",
                        get: function() {
                            return this.isVideoStream && this.codecType >= u.default.VIDEO_265_START && this.codecType <= u.default.VIDEO_H265_END
                        }
                    }, {
                        key: "videoTypeId",
                        get: function() {
                            return this.appid << 24 | this.streamType << 16 | this.codecType
                        }
                    }, {
                        key: "hashKey",
                        get: function() {
                            return 4294967296 * this.sid + (this.codecType << 16 | this.appid << 8 | this.streamType)
                        }
                    }, {
                        key: "streamId",
                        get: function() {
                            return 281474976710656 * this.streamType + 4294967296 * this.codecType + this.startTs
                        }
                    }]),
                        e
                }();
                t.default = l
            }
            , function(e, t, i) {
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }),
                    t.default = {
                        cdnMgr: null,
                        p2pMgr: null,
                        firstLogin: !0,
                        version: 189,
                        maxSubNum: 0,
                        maxUpLinkStreamNumLimit: 4,
                        curUplinkStreamNum: 4,
                        nodeDownLinkLimit: 3,
                        forceArr: [],
                        competeArr: [],
                        fixedArr: [],
                        enableFeatures: 0,
                        proxyIp: "",
                        stunProts: [],
                        csMinBw: 0,
                        remainP2pStreamNum: 0,
                        SNBw: 0,
                        competeStamp: 0,
                        startTime: -1,
                        started: !1,
                        opened: !1,
                        streamStarted: !1,
                        bPunched: !1,
                        cdnpip: 0,
                        printP2PInfo: !1,
                        printDelay: !1,
                        printP2PStream: !1,
                        reset: function() {
                            this.started = !1,
                                this.opened = !1,
                                this.baseTime = -1,
                                this.streamStarted = !1,
                                this.firstLogin = !0,
                                this.forceArr = [],
                                this.competeArr = [],
                                this.fixedArr = [],
                                this.enableFeatures = 0
                        }
                    }
            }
            , function(e, t, i) {
                e.exports = {
                    default: i(248),
                    __esModule: !0
                }
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(14))
                    , n = a(i(0))
                    , r = a(i(1))
                    , u = a(i(8))
                    , o = function() {
                    function e() {
                        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 10;
                        (0,
                            n.default)(this, e),
                            this.maxSize = t,
                            this.sum = 0,
                            this.list = [],
                            this.idx = 0,
                            this.cur = 0
                    }
                    return (0,
                        r.default)(e, [{
                        key: "reset",
                        value: function() {
                            this.sum = 0,
                                this.list = [],
                                this.idx = 0,
                                this.cur = 0
                        }
                    }, {
                        key: "addCur",
                        value: function(e) {
                            this.cur += e
                        }
                    }, {
                        key: "calculate",
                        value: function() {
                            this.add(this.cur);
                            var e = this.cur;
                            return this.cur = 0,
                                e
                        }
                    }, {
                        key: "add",
                        value: function(e) {
                            this.sum += e,
                                this.list.length < this.maxSize ? this.list.push(e) : (this.sum -= this.list[this.idx],
                                    this.list[this.idx] = e),
                            ++this.idx >= this.maxSize && (this.idx = 0)
                        }
                    }, {
                        key: "average",
                        value: function() {
                            return 0 === this.list.length ? u.default.UintMax : Math.round(this.sum / this.list.length)
                        }
                    }, {
                        key: "getSamples",
                        value: function() {
                            return this.list
                        }
                    }, {
                        key: "max",
                        value: function() {
                            if (0 === this.list.length)
                                return u.default.UintMax;
                            var e = 0
                                , t = !0
                                , i = !1
                                , a = void 0;
                            try {
                                for (var n, r = (0,
                                    s.default)(this.list); !(t = (n = r.next()).done); t = !0) {
                                    var o = n.value;
                                    o > e && (e = o)
                                }
                            } catch (e) {
                                i = !0,
                                    a = e
                            } finally {
                                try {
                                    !t && r.return && r.return()
                                } finally {
                                    if (i)
                                        throw a
                                }
                            }
                            return e
                        }
                    }, {
                        key: "min",
                        value: function() {
                            var e = 0
                                , t = !0
                                , i = !1
                                , a = void 0;
                            try {
                                for (var n, r = (0,
                                    s.default)(this.list); !(t = (n = r.next()).done); t = !0) {
                                    var u = n.value;
                                    u < e && (e = u)
                                }
                            } catch (e) {
                                i = !0,
                                    a = e
                            } finally {
                                try {
                                    !t && r.return && r.return()
                                } finally {
                                    if (i)
                                        throw a
                                }
                            }
                            return e
                        }
                    }]),
                        e
                }();
                t.default = o
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                function s() {
                    return P++
                }
                function n(e) {
                    e.push({
                        sMetricName: y.default.METRIC.VIDEO_FLOW_P2P,
                        vField: {
                            value: o(I.keys.P2P_VALID_STREAM_FLOW)
                        }
                    }),
                        e.push({
                            sMetricName: y.default.METRIC.VIDEO_FLOW_LINE,
                            vField: {
                                value: o(I.keys.SERVER_TOTAL_STREAM_FLOW)
                            }
                        }),
                        e.push({
                            sMetricName: y.default.METRIC.WEB_P2P_BW_P2P_VALID,
                            vField: {
                                value: o(I.keys.P2P_VALID_STREAM_FLOW)
                            }
                        }),
                        e.push({
                            sMetricName: y.default.METRIC.WEB_P2P_BW_P2P_REPEAT,
                            vField: {
                                value: o(I.keys.SLICE_REPEAT_P2P)
                            }
                        }),
                        e.push({
                            sMetricName: y.default.METRIC.WEB_P2P_BW_P2P_TOTAL,
                            vField: {
                                value: o(I.keys.P2P_TOTAL_STREAM_FLOW)
                            }
                        }),
                        e.push({
                            sMetricName: y.default.METRIC.WEB_P2P_BW_CDN_VALID,
                            vField: {
                                value: o(I.keys.SERVER_VALID_STREAM_FLOW)
                            }
                        }),
                        e.push({
                            sMetricName: y.default.METRIC.WEB_P2P_BW_CDN_REPEAT,
                            vField: {
                                value: o(I.keys.SLICE_REPEAT_CDN)
                            }
                        }),
                        e.push({
                            sMetricName: y.default.METRIC.WEB_P2P_BW_CDN_TOTAL,
                            vField: {
                                value: o(I.keys.SERVER_TOTAL_STREAM_FLOW)
                            }
                        }),
                        e.push({
                            sMetricName: y.default.METRIC.WEB_P2P_BW_RANGE_VALID,
                            vField: {
                                value: o(I.keys.RANGE_VALID_STREAM_FLOW)
                            }
                        }),
                        e.push({
                            sMetricName: y.default.METRIC.WEB_P2P_BW_RANGE_TOTAL,
                            vField: {
                                value: o(I.keys.RANGE_TOTAL_STREAM_FLOW)
                            }
                        }),
                        e.push({
                            sMetricName: y.default.INTERVAL.SDK_P2P_FLOW,
                            vField: {
                                p2pvalid: o(I.keys.P2P_VALID_STREAM_FLOW),
                                p2prepeat: o(I.keys.SLICE_REPEAT_P2P),
                                p2ptotal: o(I.keys.P2P_TOTAL_STREAM_FLOW),
                                cdnvalid: o(I.keys.SERVER_VALID_STREAM_FLOW),
                                cdnrepeat: o(I.keys.SLICE_REPEAT_CDN),
                                cdntotal: o(I.keys.SERVER_TOTAL_STREAM_FLOW),
                                rangevalid: o(I.keys.RANGE_VALID_STREAM_FLOW),
                                rangetotal: o(I.keys.RANGE_TOTAL_STREAM_FLOW),
                                patchflow: o(I.keys.PATCH_FLOW),
                                defaultflow: o(I.keys.FLOW_DEFAULT),
                                fastflow: o(I.keys.FLOW_FAST),
                                compete: o(I.keys.FLOW_COMPETE),
                                fixed: o(I.keys.FLOW_FIXED),
                                force: o(I.keys.FLOW_FORCE),
                                signalling: o(I.keys.FLOW_SINGLLING),
                                signallingdown: o(I.keys.FLOW_SINGLLING_DOWN)
                            }
                        })
                }
                function r(e, t, i) {
                    var a = 0;
                    e.has(t) && (a = e.get(t)),
                        e.set(t, a + i)
                }
                function u(e, t) {
                    return e.has(t) ? e.get(t) : 0
                }
                function o(e) {
                    return _.has(e) ? _.get(e) : 0
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var l = a(i(6))
                    , d = a(i(9))
                    , h = a(i(3))
                    , f = a(i(13))
                    , c = a(i(28))
                    , p = a(i(21))
                    , v = a(i(35))
                    , m = a(i(34))
                    , y = a(i(18));
                a(i(2)),
                    a(i(116));
                var _ = new l.default
                    , S = new l.default
                    , g = new l.default
                    , T = new l.default
                    , P = 5e3
                    , I = {
                    p2pState: -1,
                    hasFlow: !1,
                    addSubNodes: function(e) {
                        T.set(e, 0)
                    },
                    record: {
                        resendTimes: 0,
                        resendTimeoutCnt: 0,
                        resendErrorTimes: 0,
                        resendSliceCnt: 0,
                        resendRespondCnt: 0,
                        resendLateCnt: 0,
                        resendMissCnt: 0,
                        repeatResendCnt: 0,
                        repeatResendSucc: 0,
                        repeatResendFail: 0,
                        dropFrames: 0,
                        playedFrames: 0,
                        dtsJumpPauseTimes: 0,
                        skipFramePauseTimes: 0,
                        fullFrameRatio: 0
                    },
                    add: function(e, t) {
                        this.hasFlow = !0,
                            r(_, e, t),
                            r(S, e, t),
                            r(g, e, t)
                    },
                    reset: function() {
                        this.hasFlow = !1,
                            S.clear(),
                            _.clear(),
                            T.clear()
                    },
                    reportFlow: function() {
                        if (this.hasFlow) {
                            this.hasFlow = !1;
                            var e = [];
                            n(e),
                                _.clear(),
                                y.default.sendMetrics(e)
                        }
                    },
                    getMetrics: function() {
                        var e = [];
                        return function(e) {
                            e.push({
                                sMetricName: y.default.METRIC.SDK_VIDEO_LOGIN_SUC,
                                vField: {
                                    value: "" != d.default.wanIp ? 100 : 0,
                                    connected: d.default.cdnpConnected ? 100 : 0
                                }
                            })
                        }(e),
                            function(e) {
                                e.push({
                                    sMetricName: y.default.METRIC.SDK_P2P_REMOVE_TIMES,
                                    vField: {
                                        value: o(I.keys.REMOVE_SUB_TIMES),
                                        cdnpip: f.default.cdnpip
                                    }
                                });
                                var t = p.default.getPunchedCnt();
                                e.push({
                                    sMetricName: y.default.METRIC.WEB_P2P_PUNCH,
                                    vField: {
                                        value: t > 0 ? 100 : 0,
                                        cdnpip: f.default.cdnpip
                                    }
                                }),
                                    e.push({
                                        sMetricName: y.default.METRIC.SDK_P2P_PUNCHED_NUM,
                                        vField: {
                                            value: t,
                                            cdnpip: f.default.cdnpip
                                        },
                                        vDimension: {
                                            success: t
                                        }
                                    })
                            }(e),
                            function(e) {
                                0 === I.p2pState ? (I.p2pState = -1,
                                    e.push({
                                        sMetricName: y.default.METRIC.WEB_P2P_PLAY_RATIO,
                                        vField: {
                                            value: 0
                                        }
                                    })) : 1 === m.default.getP2p() && e.push({
                                    sMetricName: y.default.METRIC.WEB_P2P_PLAY_RATIO,
                                    vField: {
                                        value: 100
                                    }
                                })
                            }(e),
                            function(e) {
                                e.push({
                                    sMetricName: y.default.METRIC.WEB_P2P_MAX_RTT,
                                    vField: {
                                        value: d.default.videoLink.getRttSampleMax()
                                    }
                                })
                            }(e),
                            n(e),
                            function(e) {
                                var t = p.default.getRttDetail()
                                    , i = c.default.getDelayDetail();
                                e.push({
                                    sMetricName: y.default.METRIC.SDK_P2P_DETAILS,
                                    vField: {
                                        subTotal: o(I.keys.SUB_TOTAL_TIMES),
                                        subSuc: o(I.keys.SUB_SUC_TIMES),
                                        subFail: o(I.keys.SUB_FAIL_TIMES),
                                        subTimeout: o(I.keys.SUB_TIMEOUT_TIMES),
                                        subKick: o(I.keys.SUB_KICK_TIMES),
                                        subTry: o(I.keys.SUB_TRY_TIMES),
                                        competeTotal: o(I.keys.COMPETE_TOTAL_TIMES),
                                        competeSuc: o(I.keys.COMPETE_SUC_TIMES),
                                        competeFail: o(I.keys.COMPETE_FAIL_TIMES),
                                        competeTimeout: o(I.keys.COMPETE_TIMEOUT_TIMES),
                                        forceTimes: o(I.keys.FORCE_TIMES),
                                        difPeerNum: o(I.keys.DIF_PEER_NUM),
                                        tryPunchNum: o(I.keys.TRY_PUNCH_NUM),
                                        sucPunchNum: o(I.keys.PUNCH_SUC_NUM),
                                        hasPunchNum: p.default.getPunchedCnt(),
                                        punchBack: o(I.keys.PUNCH_BACK_TIMES),
                                        punchBackSuc: o(I.keys.PUNCH_BACK_SUC),
                                        punchBackTry: o(I.keys.PUNCH_BACK_TRY),
                                        punchBackRetSuc: o(I.keys.PUNCH_BACK_RET_SUC),
                                        punchBackRetDif: o(I.keys.PUNCH_BACK_RET_DIF_STREAM),
                                        punchBackRetClosing: o(I.keys.PUNCH_BACK_RET_CLOSING),
                                        punchBackRetCooling: o(I.keys.PUNCH_BACK_RET_COOLING),
                                        punchBackRetRequest: o(I.keys.PUNCH_BACK_RET_REQUEST),
                                        punchBackReject: o(I.keys.PUNCH_BACK_REJECT),
                                        forwardRejectNum: o(I.keys.FORWARD_REJECT_NUM),
                                        peerStreamNum: c.default.getP2PStreamIndexs().length,
                                        cdnpip: f.default.cdnpip,
                                        bwUplink: p.default.getUplinkBw(),
                                        bwDownlink: p.default.getDownlinkBw() + d.default.loaderMgr.getSpeed(),
                                        uplinkNum: v.default.getUplinkNum(),
                                        uplinkLimit: f.default.curUplinkStreamNum,
                                        flowDefault: o(I.keys.FLOW_DEFAULT),
                                        flowCompete: o(I.keys.FLOW_COMPETE),
                                        flowForce: o(I.keys.FLOW_FORCE),
                                        flowFixed: o(I.keys.FLOW_FIXED),
                                        flowSignalling: o(I.keys.FLOW_SINGLLING),
                                        flowSignallingDown: o(I.keys.FLOW_SINGLLING_DOWN),
                                        flowRangeValid: o(I.keys.RANGE_VALID_STREAM_FLOW),
                                        flowRange: o(I.keys.RANGE_TOTAL_STREAM_FLOW),
                                        flowCdnValid: o(I.keys.SERVER_VALID_STREAM_FLOW),
                                        flowCdnRepeat: o(I.keys.SLICE_REPEAT_CDN),
                                        flowCdn: o(I.keys.SERVER_TOTAL_STREAM_FLOW),
                                        flowP2PValid: o(I.keys.P2P_VALID_STREAM_FLOW),
                                        flowP2PRepeat: o(I.keys.SLICE_REPEAT_P2P),
                                        flowP2PTotal: o(I.keys.P2P_TOTAL_STREAM_FLOW),
                                        resendFetchError: o(I.keys.RESEND_FETCH_ERROR),
                                        resendTimes: I.record.resendTimes,
                                        resendTimeoutCnt: I.record.resendTimeoutCnt,
                                        resendErrorTimes: I.record.resendErrorTimes,
                                        resendSliceCnt: I.record.resendSliceCnt,
                                        resendRespondCnt: I.record.resendRespondCnt,
                                        resendLateCnt: I.record.resendLateCnt,
                                        resendMissCnt: I.record.resendMissCnt,
                                        repeatResendCnt: I.record.repeatResendCnt,
                                        repeatResendSucc: I.record.repeatResendSucc,
                                        repeatResendFail: I.record.repeatResendFail,
                                        resendTimesLimit: I.record.resendTimesLimit,
                                        dropFrames: I.record.dropFrames,
                                        lossFrames: I.record.dropFrames,
                                        playedFrames: I.record.playedFrames,
                                        dtsJumpPauseTimes: I.record.dtsJumpPauseTimes,
                                        skipFramePauseTimes: I.record.skipFramePauseTimes,
                                        fullFrameRatio: I.record.fullFrameRatio,
                                        fixedNum: f.default.forceArr.length,
                                        forceNum: c.default.getForceStreams().length,
                                        competeNum: c.default.getCompeteStreams().length,
                                        nodeRttMax: t.max,
                                        nodeRttMin: t.min,
                                        nodeRttAvg: t.avg,
                                        streamDelayMax: i.max,
                                        streamDelayMin: i.min,
                                        streamDelayAvg: i.avg,
                                        subNodes: T.size,
                                        getNodesValid: o(I.keys.GET_NODES_VALID),
                                        getNodesTotal: o(I.keys.GET_NODES_TOTAL)
                                    }
                                }),
                                    T.clear(),
                                    e.push({
                                        sMetricName: y.default.METRIC.SDK_P2P_FORCE_REASON,
                                        vField: {
                                            forceNoPeer: o(I.keys.FORCE_NO_PEER),
                                            forceSubEnd: o(I.keys.FORCE_SUB_END),
                                            forceSubTimeout: o(I.keys.FORCE_SUB_TIMEOUT),
                                            forceSubFail: o(I.keys.FORCE_SUB_FAIL),
                                            forceDepthLarge: o(I.keys.FORCE_DEPTH_LARGE),
                                            forceSubFailSwitch: o(I.keys.FORCE_SUB_FAIL_SWITCH),
                                            failStreamLimit: o(I.keys.SUB_FAIL_STREAM_LIMIT),
                                            failEmptyPeer: o(I.keys.SUB_FAIL_EMPTY_PEER_INFO),
                                            failStreamLate: o(I.keys.SUB_FAIL_STREAM_LATE),
                                            failUplink: o(I.keys.SUB_FAIL_SUBSCRIBE_UPLINK_NOT_ENOUGHE),
                                            failCycle: o(I.keys.SUB_FAIL_SUBSCRIBE_CYCLE),
                                            failKick: o(I.keys.SUB_FAIL_KICK_OUT),
                                            failWorst: o(I.keys.SUB_FAIL_SELF_WORST),
                                            failSliceLate: o(I.keys.SUB_FAIL_SLICE_LATE),
                                            failSliceFast: o(I.keys.SUB_FAIL_SLICE_FAST),
                                            failSuc: o(I.keys.SUB_FAIL_SUC),
                                            failOther: o(I.keys.SUB_FAIL_OTHER),
                                            switchStreamLimit: o(I.keys.SWITCH_STREAM_LIMIT),
                                            switchSliceLate: o(I.keys.SWITCH_SLICE_LATE),
                                            switchSliceFast: o(I.keys.SWITCH_SLICE_FAST),
                                            switchStreamLate: o(I.keys.SWITCH_STREAM_LATE),
                                            switchUplink: o(I.keys.SWITCH_SUBSCRIBE_UPLINK_NOT_ENOUGH),
                                            switchCycle: o(I.keys.SWITCH_SUBSCRIBE_CYCLE),
                                            switchKick: o(I.keys.SWITCH_KICK_OUT),
                                            switchWorst: o(I.keys.SWITCH_SELF_WORST),
                                            switchSuc: o(I.keys.SWITCH_SUC),
                                            switchOther: o(I.keys.SWITCH_OTHER),
                                            lastStreamLimit: o(I.keys.LAST_STREAM_LIMIT),
                                            lastSliceLate: o(I.keys.LAST_SLICE_LATE),
                                            lastSliceFast: o(I.keys.LAST_SLICE_FAST),
                                            lastStreamLate: o(I.keys.LAST_STREAM_LATE),
                                            lastUplink: o(I.keys.LAST_UPLINK),
                                            lastCycle: o(I.keys.LAST_CYCLE),
                                            lastKick: o(I.keys.LAST_KICK),
                                            lastWorst: o(I.keys.LAST_SELF_WORST),
                                            lastSuc: o(I.keys.LAST_SUC),
                                            lastOther: o(I.keys.LAST_OTHER),
                                            leavePingDif: o(I.keys.LEAVE_PING_DIF),
                                            leaveReset: o(I.keys.LEAVE_RESET)
                                        }
                                    }),
                                    e.push({
                                        sMetricName: y.default.METRIC.SDK_P2P_DEFAULT_REASON,
                                        vField: {
                                            stream0: c.default.getStream(0).defaultReason,
                                            stream1: c.default.getStream(1).defaultReason,
                                            stream2: c.default.getStream(2).defaultReason,
                                            stream3: c.default.getStream(3).defaultReason,
                                            stream4: c.default.getStream(4).defaultReason,
                                            stream5: c.default.getStream(5).defaultReason,
                                            stream6: c.default.getStream(6).defaultReason,
                                            stream7: c.default.getStream(7).defaultReason,
                                            stream8: c.default.getStream(8).defaultReason,
                                            stream9: c.default.getStream(9).defaultReason
                                        }
                                    }),
                                    e.push({
                                        sMetricName: y.default.METRIC.SDK_P2P_VALID_RET,
                                        vField: {
                                            presenter: o(I.keys.VALID_RET_PRESENTER),
                                            uplink: o(I.keys.VALID_RET_UPLINK),
                                            pull: o(I.keys.VALID_RET_PULL),
                                            subed: o(I.keys.VALID_RET_SUBED),
                                            cooling: o(I.keys.VALID_RET_COOLING),
                                            delay: o(I.keys.VALID_RET_DELAY),
                                            rtt: o(I.keys.VALID_RET_RTT),
                                            bw: o(I.keys.VALID_RET_BW),
                                            late: o(I.keys.VALID_RET_LATE),
                                            fast: o(I.keys.VALID_RET_FAST),
                                            none: o(I.keys.VALID_RET_NONE),
                                            haspunchnum: p.default.getPunchedCnt()
                                        }
                                    })
                            }(e),
                            _.clear(),
                            e
                    },
                    getOldMetrics: function() {
                        var e = [];
                        return e.push({
                            type: y.default.METRIC.WEB_P2P_BW_P2P_VALID,
                            value: o(I.keys.P2P_VALID_STREAM_FLOW)
                        }),
                            e.push({
                                type: y.default.METRIC.WEB_P2P_BW_P2P_REPEAT,
                                value: o(I.keys.SLICE_REPEAT_P2P)
                            }),
                            e.push({
                                type: y.default.METRIC.WEB_P2P_BW_P2P_TOTAL,
                                value: o(I.keys.P2P_TOTAL_STREAM_FLOW)
                            }),
                            e.push({
                                type: y.default.METRIC.WEB_P2P_BW_CDN_VALID,
                                value: o(I.keys.SERVER_VALID_STREAM_FLOW)
                            }),
                            e.push({
                                type: y.default.METRIC.WEB_P2P_BW_CDN_REPEAT,
                                value: o(I.keys.SLICE_REPEAT_CDN)
                            }),
                            e.push({
                                type: y.default.METRIC.WEB_P2P_BW_CDN_TOTAL,
                                value: o(I.keys.SERVER_TOTAL_STREAM_FLOW)
                            }),
                            e.push({
                                type: y.default.METRIC.WEB_P2P_BW_RANGE_VALID,
                                value: o(I.keys.RANGE_VALID_STREAM_FLOW)
                            }),
                            e.push({
                                type: y.default.METRIC.WEB_P2P_BW_RANGE_TOTAL,
                                value: o(I.keys.RANGE_TOTAL_STREAM_FLOW)
                            }),
                            e.push({
                                type: y.default.METRIC.WEB_P2P_PUNCH,
                                value: p.default.getPunchedCnt() > 0 ? 100 : 0
                            }),
                            e
                    },
                    fillFlow: n,
                    recordPlayBuf: function() {
                        E = o(I.keys.SERVER_TOTAL_STREAM_FLOW)
                    },
                    printLoadFail: function(e) {
                        if (f.default.printP2PInfo) {
                            var t = o(I.keys.SERVER_TOTAL_STREAM_FLOW);
                            e ? h.default.warn("出视频失败，当前收到数据，bufferLength", t) : h.default.warn("出视频成功，当前收到数据，bufferLength", t, "出视频时BufferLength", E)
                        }
                    },
                    onCheckTimer: function(e, t) {
                        t % 20 == 0 && function() {
                            var e = u(g, I.keys.P2P_TOTAL_STREAM_FLOW)
                                , t = u(g, I.keys.P2P_VALID_STREAM_FLOW)
                                , i = u(g, I.keys.SERVER_TOTAL_STREAM_FLOW)
                                , a = u(g, I.keys.SERVER_VALID_STREAM_FLOW)
                                , s = u(g, I.keys.RANGE_TOTAL_STREAM_FLOW)
                                , n = u(g, I.keys.RANGE_VALID_STREAM_FLOW)
                                , r = (i / 1e3 / 1e3).toFixed(2) + "Mb"
                                , o = "%c当前上行数：" + v.default.getUplinkNum();
                            o += " cdn子流：" + c.default.getSubs().join(","),
                                o += " p2p有效比：" + (e > 0 ? (t / e * 100).toFixed(2) : 0) + "%",
                                o += " cdn有效比：" + (i > 0 ? a / i * 100 : 0).toFixed(2) + "%",
                                o += " 补片有效比：" + (s > 0 ? n / s * 100 : 0).toFixed(2) + "%",
                                o += " 补片比：" + (s / (i + e) * 100).toFixed(2) + "%",
                                o += " 节省率：" + (e / (e + i) * 100).toFixed(2) + "%",
                                o += " 总重复切片：" + c.default.getRepeatIndex(),
                                o += " 延时：" + c.default.getStreamDelays().toString(),
                                o += " rtt：" + d.default.videoLink.avgRtt(),
                                o += " 固定子流：" + f.default.forceArr.join("-"),
                                o += " 节点子流：" + c.default.getP2PStreamIndexs().join("-"),
                                o += " cdn带宽：" + r,
                                o += " 上行上限：" + f.default.curUplinkStreamNum,
                                o += " 上行带宽：" + p.default.getUplinkBw() + " " + (p.default.getUplinkBw() / 1e3).toFixed(2) + "Kb",
                                o += " 竞争子流：" + c.default.getCompeteStreams().join("-"),
                                o += " 强制子流：" + c.default.getForceStreams().join("-"),
                                o += " 固定流量：" + u(g, I.keys.FLOW_FIXED),
                                o += " 强制流量：" + u(g, I.keys.FLOW_FORCE),
                                o += " 竞争流量：" + u(g, I.keys.FLOW_COMPETE),
                                o += " cdn流量：" + u(g, I.keys.SERVER_TOTAL_STREAM_FLOW),
                                o += " 补片流量：" + u(g, I.keys.RANGE_TOTAL_STREAM_FLOW),
                                o += " 可用节点数：" + p.default.getPunchedCnt(),
                                o += " csMinBw：" + f.default.csMinBw + " " + (f.default.csMinBw / 1e3).toFixed(2) + "Kb",
                                h.default.log(o, "color:#F101AC"),
                                g.clear()
                        }()
                    },
                    keys: {
                        P2P_TOTAL_STREAM_FLOW: 1,
                        P2P_VALID_STREAM_FLOW: 2,
                        SERVER_TOTAL_STREAM_FLOW: 3,
                        SERVER_VALID_STREAM_FLOW: 4,
                        RESEND_SEQ_NUM: 7,
                        REAL_UPLINK_STREAM_SUM: 8,
                        SUBSCRIBE_TIMEOUT_TIMES: 10,
                        SUBSCRIBE_FAILED_TIMES: 11,
                        SUBSCRIBE_SUCCESS_TIMES: 12,
                        SUBSCRIBE_TOTAL_TIMES: 14,
                        INVALID_PACKET_NUM: 13,
                        TOTAL_PEER_NODES: 22,
                        ACTIVE_PUNCH_NODES: 23,
                        PASSIVE_PUNCH_NODES: 24,
                        TRY_PUNCH_NUM: 29,
                        PUNCH_FAIL_NUM: 30,
                        PUNCH_SUC_NUM: 31,
                        FORWARD_REJECT_NUM: 32,
                        GET_NODES_VALID: s(),
                        GET_NODES_TOTAL: s(),
                        SUB_NODES: s(),
                        CDN_SLICE_SEND_COUNT: 85,
                        CDN_SLICE_RECV_COUNT: 86,
                        PUNCH_FAIL_HAS_ICE: 500,
                        PUNCH_FAIL_NO_ICE: 501,
                        RANGE_TOTAL_STREAM_FLOW: 502,
                        RANGE_VALID_STREAM_FLOW: 503,
                        SLICE_REPEAT_CDN: 504,
                        SLICE_REPEAT_P2P: 505,
                        PATCH_FLOW: s(),
                        SUB_TIMEOUT_TIMES: s(),
                        SUB_SUC_TIMES: s(),
                        SUB_FAIL_TIMES: s(),
                        SUB_TOTAL_TIMES: s(),
                        SUB_TRY_TIMES: s(),
                        SUB_KICK_TIMES: s(),
                        COMPETE_TIMEOUT_TIMES: s(),
                        COMPETE_SUC_TIMES: s(),
                        COMPETE_FAIL_TIMES: s(),
                        COMPETE_TOTAL_TIMES: s(),
                        DIF_PEER_NUM: s(),
                        FORCE_NO_PEER: s(),
                        FORCE_SUB_END: s(),
                        FORCE_SUB_TIMEOUT: s(),
                        FORCE_SUB_FAIL: s(),
                        FORCE_DEPTH_LARGE: s(),
                        FORCE_SUB_FAIL_SWITCH: s(),
                        FLOW_COMPETE: s(),
                        FLOW_FORCE: s(),
                        FLOW_FIXED: s(),
                        FLOW_SINGLLING: s(),
                        FLOW_DEFAULT: s(),
                        FLOW_FAST: s(),
                        FLOW_SINGLLING_DOWN: s(),
                        FORCE_TIMES: s(),
                        REMOVE_SUB_TIMES: s(),
                        SUB_RES_TOTAL: s(),
                        SUB_FAIL_SUC: s(),
                        SUB_FAIL_STREAM_LIMIT: s(),
                        SUB_FAIL_SLICE_LATE: s(),
                        SUB_FAIL_SLICE_FAST: s(),
                        SUB_FAIL_SLICE_LARGE: s(),
                        SUB_FAIL_EMPTY_PEER_INFO: s(),
                        SUB_FAIL_STREAM_LATE: s(),
                        SUB_FAIL_SUBSCRIBE_UPLINK_NOT_ENOUGHE: s(),
                        SUB_FAIL_SUBSCRIBE_CYCLE: s(),
                        SUB_FAIL_OTHER: s(),
                        SUB_FAIL_KICK_OUT: s(),
                        SUB_FAIL_SELF_WORST: s(),
                        SWITCH_LAST_PUB: s(),
                        SWITCH_STREAM_LIMIT: s(),
                        SWITCH_SLICE_LARGE: s(),
                        SWITCH_SLICE_LATE: s(),
                        SWITCH_SLICE_FAST: s(),
                        SWITCH_EMPTY_PEER_INFO: s(),
                        SWITCH_STREAM_LATE: s(),
                        SWITCH_SUBSCRIBE_UPLINK_NOT_ENOUGH: s(),
                        SWITCH_SUBSCRIBE_CYCLE: s(),
                        SWITCH_KICK_OUT: s(),
                        SWITCH_SELF_WORST: s(),
                        SWITCH_SUC: s(),
                        SWITCH_OTHER: s(),
                        LAST_STREAM_LIMIT: s(),
                        LAST_SLICE_LARGE: s(),
                        LAST_SLICE_LATE: s(),
                        LAST_SLICE_FAST: s(),
                        LAST_STREAM_LATE: s(),
                        LAST_UPLINK: s(),
                        LAST_CYCLE: s(),
                        LAST_KICK: s(),
                        LAST_SELF_WORST: s(),
                        LAST_SUC: s(),
                        LAST_OTHER: s(),
                        DEFAULT_REASON: s(),
                        LEAVE_PING_DIF: s(),
                        LEAVE_RESET: s(),
                        PUNCH_BACK_TIMES: s(),
                        PUNCH_BACK_SUC: s(),
                        PUNCH_BACK_TRY: s(),
                        PUNCH_BACK_RET_SUC: s(),
                        PUNCH_BACK_RET_DIF_STREAM: s(),
                        PUNCH_BACK_RET_CLOSING: s(),
                        PUNCH_BACK_RET_COOLING: s(),
                        PUNCH_BACK_RET_REQUEST: s(),
                        PUNCH_BACK_REJECT: s(),
                        RESEND_FETCH_ERROR: s(),
                        VALID_RET_PRESENTER: s(),
                        VALID_RET_UPLINK: s(),
                        VALID_RET_PULL: s(),
                        VALID_RET_SUBED: s(),
                        VALID_RET_COOLING: s(),
                        VALID_RET_DELAY: s(),
                        VALID_RET_RTT: s(),
                        VALID_RET_BW: s(),
                        VALID_RET_LATE: s(),
                        VALID_RET_FAST: s(),
                        VALID_RET_NONE: s(),
                        CLIENT_TYPE: 160,
                        RATE: 120
                    },
                    EClientErrType: {
                        E_HTTPLINK_NO_DATA: 1,
                        E_lONG_HTTP_HEADER_COMPLETE_ERROR: 2,
                        E_SLICE_HTTP_HEADER_COMPLETE_ERROR: 3,
                        E_REQUEST_SLICE_TIMEOUT: 5,
                        E_OPEN_TCP_LINK_TIME: 6,
                        E_TCP_TIMEOUT: 7
                    }
                }
                    , E = 0;
                t.default = I
            }
            , function(e, t) {
                var i = e.exports = {
                    version: "2.5.7"
                };
                "number" == typeof __e && (__e = i)
            }
            , function(e, t, i) {
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var a = function(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }(i(20))
                    , s = {
                    h5Player: null,
                    isSendLoadTime: !1,
                    isSendH265: !1,
                    hasP2P: 0,
                    restartReason: -1,
                    restartTimes: 0,
                    turnToFlvReason: -1,
                    turnToFlvTimes: 0,
                    httpError: !1,
                    sendCdnTime: function(e, t) {
                        if (!this.isSendLoadTime)
                            if (this.isSendLoadTime = !0,
                                t) {
                                var i = [{
                                    sMetricName: "video.connect_video_time",
                                    vField: {
                                        value: e.connectVideoTime - e.startTime
                                    }
                                }, {
                                    sMetricName: "video.first_video_pkg_time",
                                    vField: {
                                        value: e.firstVideoPkgTime - e.connectVideoTime
                                    }
                                }, {
                                    sMetricName: "video.first_iframe_time",
                                    vField: {
                                        value: e.firstIFrameTime1 - e.connectVideoTime
                                    }
                                }, {
                                    sMetricName: "video.iframe_time",
                                    vField: {
                                        value: e.firstIFrameTime2 - e.firstIFrameTime1
                                    }
                                }, {
                                    sMetricName: "video.first_render_time",
                                    vField: {
                                        value: e.firstRenderTime - e.firstIFrameTime2
                                    }
                                }, {
                                    sMetricName: "video.video_played_time",
                                    vField: {
                                        value: e.onPlayTime - e.firstRenderTime
                                    }
                                }, {
                                    sMetricName: "video.video_load_time",
                                    vField: {
                                        value: e.onPlayTime - e.startTime
                                    }
                                }];
                                this.sendMetrics(i)
                            } else {
                                var a = [{
                                    sMetricName: "video.get_vp_time",
                                    vField: {
                                        value: e.getVPTime - e.startTime
                                    }
                                }, {
                                    sMetricName: "video.connect_video_time",
                                    vField: {
                                        value: e.connectVideoTime - e.getVPTime
                                    }
                                }, {
                                    sMetricName: "video.login_time",
                                    vField: {
                                        value: e.loginTime - e.connectVideoTime
                                    }
                                }, {
                                    sMetricName: "video.first_video_pkg_time",
                                    vField: {
                                        value: e.firstVideoPkgTime - e.loginTime
                                    }
                                }, {
                                    sMetricName: "video.first_iframe_time",
                                    vField: {
                                        value: e.firstIFrameTime - e.firstVideoPkgTime
                                    }
                                }, {
                                    sMetricName: "video.first_render_time",
                                    vField: {
                                        value: e.firstRenderTime - e.firstIFrameTime
                                    }
                                }, {
                                    sMetricName: "video.video_played_time",
                                    vField: {
                                        value: e.onPlayTime - e.firstRenderTime
                                    }
                                }, {
                                    sMetricName: "video.video_load_time",
                                    vField: {
                                        value: e.onPlayTime - e.startTime
                                    }
                                }];
                                this.sendMetrics(a)
                            }
                    },
                    sendFlvTime: function(e, t, i) {
                        if (!(this.isSendLoadTime || (this.isSendLoadTime = !0,
                        e > 1e4 || t > 1e4))) {
                            var a = 1 == i ? 2 : 0
                                , s = [{
                                sMetricName: "video.video_load_time_flv",
                                vField: {
                                    value: e
                                },
                                vDimension: {
                                    p2p: a
                                }
                            }, {
                                sMetricName: "video.video_load_time",
                                vField: {
                                    value: e
                                },
                                vDimension: {
                                    p2p: a
                                }
                            }, {
                                sMetricName: "video.video_connect_time_flv",
                                vField: {
                                    value: t
                                },
                                vDimension: {
                                    p2p: a
                                }
                            }];
                            this.sendMetrics(s)
                        }
                    },
                    sendMetrics: function(e) {
                        this.h5Player.trigger(a.default.DATA_METRIC2, e)
                    },
                    sendOldMetrics: function(e) {
                        this.h5Player.trigger(a.default.DATA_METRIC, e)
                    },
                    METRIC: {
                        VIDEO_FLOW_LINE: "video.flow.line",
                        VIDEO_FLOW_P2P: "video.flow.p2p",
                        VIDEO_BAD_QUALITY_RATIO: "video.video_bad_quality_ratio",
                        VIDEO_BAD_QUALITY_REASON: "video.video_bad_quality_reason",
                        WEB_HLS_PLAY_VIDEO_RATIO: "web.hls.play_video_ratio",
                        WEB_HLS_PLAY_SUC_RATIO: "web.hls.play_suc_ratio",
                        VIDEO_EMPTY_FRAMES_RATIO: "video.empty_frames_ratio",
                        WEB_P2P_PLAY_RATIO: "web.p2p.play_ratio",
                        WEB_P2P_PUNCH: "web.p2p.punch",
                        WEB_P2P_MAX_RTT: "web.p2p.max_rtt",
                        WEB_P2P_BW_P2P_VALID: "web.p2p.bw_p2p_valid",
                        WEB_P2P_BW_P2P_REPEAT: "web.p2p.bw_p2p_repeat",
                        WEB_P2P_BW_P2P_TOTAL: "web.p2p.bw_p2p_total",
                        WEB_P2P_BW_CDN_VALID: "web.p2p.bw_cdn_valid",
                        WEB_P2P_BW_CDN_REPEAT: "web.p2p.bw_cdn_repeat",
                        WEB_P2P_BW_CDN_TOTAL: "web.p2p.bw_cdn_total",
                        WEB_P2P_BW_RANGE_VALID: "web.p2p.bw_range_valid",
                        WEB_P2P_BW_RANGE_TOTAL: "web.p2p.bw_range_total",
                        WEB_P2P_PLAY_FAIL: "web.p2p.play_fail",
                        WEB_P2P_LOAD_RATIO: "web.p2p.load_ratio",
                        WEB_P2P_LOAD_SAMPLE: "web.p2p.load_sample",
                        WEB_P2P_CDN_RESTART: "web.p2p.cdn_restart",
                        WEB_P2P_TCP_NO_SLICE: "web.p2p.tcp_no_slice",
                        WEB_P2P_TCP_OPEN_TIME: "web.p2p.tcp_open_time",
                        WEB_P2P_HTTP_CODE: "web.p2p.http_code_",
                        WEB_P2P_TCP_TIMEOUT: "web.p2p.tcp_timeout",
                        WEB_H265: "web.h265",
                        SDK_P2P_TCP: "sdk.p2p.tcp",
                        SDK_VIDEO_LOGIN_SUC: "sdk.video.login_suc",
                        SDK_P2P_COOLING: "sdk.p2p.cooling",
                        SDK_P2P_SERVER_OPEN: "sdk.p2p.server_open",
                        SDK_P2P_USER_PROPERTY: "sdk.p2p.user_property",
                        SDK_P2P_REMOVE_TIMES: "sdk.p2p.remove_times",
                        SDK_P2P_PUNCHED_NUM: "sdk.p2p.punched_num",
                        VIDEO_VIDEO_BAD_QUALITY_5M_RATIO: "video.video_bad_quality_5m_ratio",
                        SDK_P2P_DETAILS: "sdk.p2p.details",
                        SDK_P2P_FORCE_REASON: "sdk.p2p.force_reason",
                        SDK_P2P_DEFAULT_REASON: "sdk.p2p.default_reason",
                        SDK_P2P_VALID_RET: "sdk.p2p.valid_ret",
                        SDK_PLAYER_PARSER: "sdk.player.parser",
                        SDK_P2P_GET_NODE: "sdk.p2p.get_node",
                        WEB_USER: "web.user"
                    },
                    INTERVAL: {
                        SDK_VIDEO_QUALITY: "sdk.video.quality",
                        SDK_VIDEO_QUALITY_5M: "sdk.video.quality_5m",
                        SDK_CALC_FLOW: "sdk.calc.flow",
                        SDK_P2P_TCP: "sdk.p2p.tcp",
                        SDK_P2P_FLOW: "sdk.p2p.flow",
                        SDK_P2P_PUNCH: "sdk.p2p.punch",
                        SDK_P2P_SUB: "sdk.p2p.sub",
                        SDK_P2P_RESEND: "sdk.p2p.resend",
                        SDK_P2P_DELAY: "sdk.p2p.resend",
                        SDK_P2P_OTHER: "sdk.p2p.other"
                    },
                    TRIGGER: {
                        SDK_HLS_PLAY: "sdk.hls.play",
                        SDK_HLS_LOAD: "sdk.hls.load",
                        SDK_MSE_ERROR: "sdk.mse.error",
                        SDK_P2P_LOAD: "sdk.p2p.load",
                        SDK_P2P_LOAD_SAMPLE: "sdk.p2p.load_sample",
                        SDK_P2P_RESTART: "sdk.p2p.restart",
                        SDK_WEB_H265: "sdk.web.h265"
                    }
                };
                t.default = s
            }
            , function(e, t, i) {
                var a = i(83)("wks")
                    , s = i(57)
                    , n = i(25).Symbol
                    , r = "function" == typeof n;
                (e.exports = function(e) {
                        return a[e] || (a[e] = r && n[e] || (r ? n : s)("Symbol." + e))
                    }
                ).store = a
            }
            , function(e, t, i) {
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var a = {
                    PLAY_STATUS: "PLAY_STATUS",
                    VIDEO_PLAY: "VIDEO_PLAY",
                    VIDEO_STOP: "VIDEO_STOP",
                    ANCHOR_STOP: "ANCHOR_STOP",
                    NO_VIDEO: "NO_VIDEO",
                    FLV_URL_UNAVAILABLE: "FLV_URL_UNAVAILABLE",
                    H5_PLAYER_ERROR: "H5_PLAYER_ERROR",
                    NO_DATA_RECEIVED: "NO_DATA_RECEIVED",
                    P2P_REPORT: "P2P_REPORT",
                    DATA_METRIC: "DATA_METRIC",
                    DATA_METRIC2: "DATA_METRIC2",
                    P2P_TIMEOUT: "P2P_TIMEOUT",
                    FLV_TO_P2P: "FLV_TO_P2P",
                    FLAC_AUDIO_START: "FLAC_AUDIO_START",
                    FLAC_AUDIO_ERROR: "FLAC_AUDIO_ERROR",
                    FLAC_AUDIO_NEED_RETRY: "FLAC_AUDIO_NEED_RETRY",
                    H264_SEI_PLAY: "H264_SEI_PLAY"
                };
                t.default = a,
                    t.Event = a,
                    t.Status = {
                        VIDEO_PLAYING: "VIDEO_PLAYING",
                        VIDEO_STOP: "VIDEO_STOP",
                        VIDEO_CACHING: "VIDEO_CACHING",
                        AUDIO_START: "AUDIO_START",
                        AUDIO_STOP: "AUDIO_STOP"
                    }
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                function s() {
                    var e = Z.getPunchedCnt();
                    S.default.MAX_PULL_NUM = Math.max(S.default.MAX_PEER_STREAM_NUM - parseInt(e / 2), 5)
                }
                function n(e, t) {
                    return !(!e.has(t) || I.default.now() - e.get(t) >= S.default.PUNCH_IGNORE_TIME && (e.delete(t),
                        1))
                }
                function r(e, t) {
                    if (t == S.default.DEL_REASON.PEER_TIMEOUT) {
                        var i = I.default.now();
                        e.isActive() ? O.set(e.uid, i) : F.set(e.uid, i)
                    }
                    e.alive = !1,
                        e.clear(),
                        1 === Number(h.default.extendConfig.p2pConfig.needQueue) && (w.has(e.uid) || e.tryPunch) ? (w.has(e.uid) ? (V.push(e),
                            B.set(e.uid, 0)) : (q.push(e),
                            G.set(e.uid, 0)),
                            u()) : e.close()
                }
                function u() {
                    if (!W) {
                        W = !0;
                        var e = Number(h.default.extendConfig.p2pConfig.queueTime);
                        E.default.add(o, null, e)
                    }
                }
                function o(e, t) {
                    var i = null;
                    V.length > 0 ? (i = V.shift(),
                        B.delete(i.uid),
                        D.set(i.uid, I.default.now()),
                        i.close()) : H.length > 0 ? (i = H.shift(),
                        G.delete(i.uid),
                        j.push({
                            uid: i.uid,
                            timeStamp: e + S.default.PUNCH_BACK_COOLING
                        }),
                        i.close()) : q.length > 0 ? (i = q.shift(),
                        G.delete(i.uid),
                        h.default.getUid() > i.uid ? K.push({
                            uid: i.uid,
                            timeStamp: e + S.default.PUNCH_BACK_COOLING
                        }) : x.set(i.uid, e + S.default.PUNCH_BACK_COOLING),
                        i.close()) : 0 == k.default.getP2p() && (W = !1,
                        E.default.remove(o, null))
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var l = a(i(14))
                    , d = a(i(6))
                    , h = a(i(9))
                    , f = a(i(2))
                    , c = a(i(13))
                    , p = a(i(35))
                    , v = a(i(73))
                    , m = a(i(28))
                    , y = a(i(42))
                    , _ = a(i(146))
                    , S = a(i(10))
                    , g = a(i(15))
                    , T = a(i(283))
                    , P = a(i(8))
                    , I = a(i(5))
                    , E = a(i(11))
                    , k = a(i(34))
                    , R = a(i(16))
                    , C = a(i(3))
                    , L = new g.default(10)
                    , A = new g.default(10)
                    , M = []
                    , U = []
                    , b = new d.default
                    , N = new d.default
                    , w = new d.default
                    , D = new d.default
                    , O = new d.default
                    , F = new d.default
                    , x = new d.default
                    , V = []
                    , B = new d.default
                    , q = []
                    , G = new d.default
                    , H = []
                    , j = []
                    , W = !1
                    , K = []
                    , Y = 0
                    , z = 0
                    , J = 0
                    , X = 0
                    , Q = 0
                    , Z = {
                    initConfig: function() {
                        Y = Number(h.default.extendConfig.p2pConfig.punchMin) || 1,
                            z = Number(h.default.extendConfig.p2pConfig.punchGap) || 1,
                            J = Number(h.default.extendConfig.p2pConfig.punchMax) || 4,
                            X = Number(h.default.extendConfig.p2pConfig.punchTime) || 60,
                            Q = Number(h.default.extendConfig.p2pConfig.punchBack) || 6
                    },
                    setCandidates: function(e) {
                        M = e
                    },
                    getPunchedCnt: function() {
                        return N.size
                    },
                    getRttDetail: function() {
                        var e = 0
                            , t = 0
                            , i = 0
                            , a = 0
                            , s = 0
                            , n = !0
                            , r = !1
                            , u = void 0;
                        try {
                            for (var o, d = (0,
                                l.default)(N.keys()); !(n = (o = d.next()).done); n = !0) {
                                var h = o.value
                                    , f = b.get(h);
                                if (f) {
                                    var c = f.rtt;
                                    c > 1e4 ? c = 1e4 : c < 0 && (c = 0),
                                        e += c,
                                        t++,
                                    (0 === a || a < c) && (a = c),
                                    (0 === s || s > c) && (s = c)
                                }
                            }
                        } catch (e) {
                            r = !0,
                                u = e
                        } finally {
                            try {
                                !n && d.return && d.return()
                            } finally {
                                if (r)
                                    throw u
                            }
                        }
                        return t > 0 && (i = Math.floor(e / t)),
                            {
                                max: a,
                                min: s,
                                avg: i
                            }
                    },
                    isPunchedMax: function() {
                        return N.size >= Number(h.default.extendConfig.p2pConfig.maxPunchedCnt)
                    },
                    isPunchedMaxMore: function() {
                        return N.size >= Number(h.default.extendConfig.p2pConfig.maxPunchedCntMore)
                    },
                    isNodeMax: function() {
                        return b.size >= Number(h.default.extendConfig.p2pConfig.maxNodeCnt) || q.length > Number(h.default.extendConfig.p2pConfig.delayCloseNum)
                    },
                    getUplinkBw: function() {
                        var e = L.average();
                        return e == P.default.UintMax && (e = 0),
                            e
                    },
                    addUplinkBw: function(e) {
                        L.addCur(e)
                    },
                    getDownlinkBw: function() {
                        var e = A.average();
                        return e == P.default.UintMax && (e = 0),
                            e
                    },
                    addDownlinkBw: function(e) {
                        A.addCur(e)
                    },
                    addPunch: function(e) {
                        R.default.add(R.default.keys.PUNCH_SUC_NUM, 1),
                            w.set(e, 0),
                            N.set(e, 0),
                            s()
                    },
                    getNode: function(e) {
                        return b.get(e)
                    },
                    getOrNewNode: function(e, t) {
                        if (!b.has(e)) {
                            var i = new T.default(e);
                            return b.set(e, i),
                                i
                        }
                        return b.get(e)
                    },
                    delNode: function(e, t) {
                        b.has(e) && (r(b.get(e), t),
                            b.delete(e),
                        N.has(e) && (N.delete(e),
                            s()),
                            p.default.delNode(e),
                            v.default.delNode(e),
                            y.default.delPeerInfo(e),
                            m.default.delNode(e))
                    },
                    hasNode: function(e) {
                        return b.has(e)
                    },
                    isIgnoreActive: function(e) {
                        return n(O, e)
                    },
                    isIgnorePassive: function(e) {
                        return n(F, e)
                    },
                    isIgnore: function(e) {
                        return h.default.getUid() < e ? n(O, e) : n(F, e)
                    },
                    isDelayClose: function(e) {
                        return G.has(e)
                    },
                    isDelayPunch: function(e) {
                        return B.has(e)
                    },
                    isPunchBackCooling: function(e) {
                        return I.default.now() < x.get(e)
                    },
                    isWaiting: function(e) {
                        return G.has(e) || B.has(e)
                    },
                    isCooling: function(e) {
                        if (D.has(e)) {
                            var t = D.get(e);
                            return !(I.default.now() - t > Number(h.default.extendConfig.p2pConfig.punchedCoolingTime) && (D.delete(e),
                                1))
                        }
                        return !1
                    },
                    sendToNode: function(e, t, i) {
                        b.has(e) && b.get(e).send(t, i)
                    },
                    checkDelNode: function(e) {
                        if (0 == p.default.getSubNum(e) && 0 == v.default.getPubCnt(e)) {
                            var t = this.getNode(e);
                            t && t.rtt > 600 && this.delNode(e, S.default.DEL_REASON.SUB_FAIL_TIMES)
                        }
                    },
                    onCheckTimer: function(e, t) {
                        if (c.default.opened && (A.calculate(),
                            L.calculate(),
                        t % S.default.PERIOD.GET_NODE != 0 || this.isPunchedMax() || _.default.sendGetNode(),
                            u(),
                            function(e, t) {
                                var i = b.values()
                                    , a = !0
                                    , s = !1
                                    , n = void 0;
                                try {
                                    for (var r, u = (0,
                                        l.default)(i); !(a = (r = u.next()).done); a = !0) {
                                        r.value.onCheckTimer(e, t)
                                    }
                                } catch (e) {
                                    s = !0,
                                        n = e
                                } finally {
                                    try {
                                        !a && u.return && u.return()
                                    } finally {
                                        if (s)
                                            throw n
                                    }
                                }
                            }(e, t),
                            function(e) {
                                for (var t = j.length - 1; t >= 0; t--) {
                                    var i = j[t];
                                    if (e > i.timeStamp) {
                                        j.splice(t, 1),
                                            _.default.sendPunchBackRsp(i.uid, S.default.punchBackRet.REQUEST);
                                        break
                                    }
                                }
                            }(e),
                        t % Y == 0 && function() {
                            if (!Z.isPunchedMax() && !Z.isNodeMax()) {
                                var e = function() {
                                    if (U.length > 0)
                                        for (var e = U.length, t = e - 1; t >= 0; t--) {
                                            var i = U[t];
                                            if (Z.hasNode(i) || Z.isIgnore(i) || Z.isDelayClose(i))
                                                U.splice(t, 1);
                                            else if (!Z.isCooling(i) && !Z.isDelayPunch(i))
                                                return U.splice(t, 1),
                                                    i
                                        }
                                    return !1
                                }() || function() {
                                    for (; M.length > 0; ) {
                                        var e = M.shift().uid;
                                        if (!(Z.hasNode(e) || Z.isIgnore(e) || Z.isDelayClose(e))) {
                                            if (!Z.isDelayPunch(e) && !Z.isCooling(e))
                                                return e;
                                            -1 == U.indexOf(e) && U.push(e)
                                        }
                                    }
                                    return 0
                                }();
                                if (0 != e) {
                                    Z.getOrNewNode(e, "onConnectTimer-candidate").connect()
                                }
                            }
                        }(),
                        t % Q == 1 && function() {
                            if (K.length > 0)
                                for (var e = K.length, t = I.default.now(), i = 0; i < e; i++) {
                                    var a = K[i];
                                    if (t > a.timeStamp) {
                                        R.default.add(R.default.keys.PUNCH_BACK_TRY, 1),
                                            K.splice(i, 1),
                                            _.default.sendPunchBackReq(a.uid);
                                        break
                                    }
                                }
                        }(),
                        Y < J && t % X == 0 && (Y += z),
                        t % 10 == 0)) {
                            var i = this.getDownlinkBw();
                            i = P.default.formatByteSize(i);
                            var a = L.average() / 10;
                            a == P.default.UintMax && (a = 0),
                                a = P.default.formatByteSize(a),
                                C.default.log("NodeMgr.onCheckTimer peer downlinkSpeed=" + i + "/s uplinkSpeed=" + a + "/s")
                        }
                    },
                    recvPunchBackReq: function(e) {
                        if (Z.isDelayClose(e.fromUid)) {
                            for (var t = q.length, i = 0; i < t; i++) {
                                var a = q[i];
                                if (a.uid === e.fromUid) {
                                    H.push(a),
                                        q.splice(i, 1);
                                    break
                                }
                            }
                            _.default.sendPunchBackRsp(e.fromUid, S.default.punchBackRet.CLOSING)
                        } else
                            Z.isPunchBackCooling(e.fromUid) ? (j.push({
                                uid: e.fromUid,
                                timeStamp: x.get(e.fromUid)
                            }),
                                _.default.sendPunchBackRsp(e.fromUid, S.default.punchBackRet.COOLING)) : _.default.sendPunchBackRsp(e.fromUid, S.default.punchBackRet.SUC)
                    },
                    recvPunchBackRsp: function(e) {
                        switch (e.ret) {
                            case S.default.punchBackRet.SUC:
                                R.default.add(R.default.keys.PUNCH_BACK_RET_SUC, 1);
                                break;
                            case S.default.punchBackRet.DIF_STREAM:
                                R.default.add(R.default.keys.PUNCH_BACK_RET_DIF_STREAM, 1);
                                break;
                            case S.default.punchBackRet.CLOSING:
                                R.default.add(R.default.keys.PUNCH_BACK_RET_CLOSING, 1);
                                break;
                            case S.default.punchBackRet.COOLING:
                                R.default.add(R.default.keys.PUNCH_BACK_RET_COOLING, 1);
                                break;
                            case S.default.punchBackRet.REQUEST:
                                R.default.add(R.default.keys.PUNCH_BACK_RET_REQUEST, 1)
                        }
                        e.ret !== S.default.punchBackRet.SUC && e.ret !== S.default.punchBackRet.REQUEST || Z.getOrNewNode(e.fromUid, e.ret === S.default.punchBackRet.SUC ? "punch back" : "punch back request").connectBack()
                    },
                    recvForwardReject: function(e) {
                        e.subUri === f.default.P2PPunchBackReq || e.subUri === f.default.P2PPunchBackRsp ? R.default.add(R.default.keys.PUNCH_BACK_REJECT, 1) : (R.default.add(R.default.keys.FORWARD_REJECT_NUM, 1),
                            Z.delNode(e.fromUid, S.default.DEL_REASON.SERVER_REJECT))
                    },
                    reset: function() {
                        !function() {
                            var e = !0
                                , t = !1
                                , i = void 0;
                            try {
                                for (var a, s = (0,
                                    l.default)(b.values()); !(e = (a = s.next()).done); e = !0) {
                                    var n = a.value;
                                    n.punched() && n.sendNotifyLeaveNet(S.default.LeaveReason.RESET),
                                        r(n, "reset")
                                }
                            } catch (e) {
                                t = !0,
                                    i = e
                            } finally {
                                try {
                                    !e && s.return && s.return()
                                } finally {
                                    if (t)
                                        throw i
                                }
                            }
                        }(),
                            b.clear(),
                            N.clear(),
                            M = [],
                            L.reset()
                    }
                };
                t.default = Z
            }
            , function(e, t, i) {
                var a = i(31)
                    , s = i(149)
                    , n = i(78)
                    , r = Object.defineProperty;
                t.f = i(26) ? Object.defineProperty : function(e, t, i) {
                    if (a(e),
                        t = n(t, !0),
                        a(i),
                        s)
                        try {
                            return r(e, t, i)
                        } catch (e) {}
                    if ("get"in i || "set"in i)
                        throw TypeError("Accessors not supported!");
                    return "value"in i && (e[t] = i.value),
                        e
                }
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                function s(e, t, i) {
                    var a = h[e];
                    if (!a)
                        return !1;
                    for (var s = 0, n = a.length; s < n; s++) {
                        var r = a[s];
                        if (r.callback == t && r.thisObj == i)
                            return !0
                    }
                    return !1
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var n = a(i(250))
                    , r = a(i(3))
                    , u = a(i(165))
                    , o = a(i(252))
                    , l = {
                    extendConfig: {
                        useWssAudio: !1
                    },
                    isHuya: !0,
                    isH265: !1,
                    isPull: !1,
                    presenterUid: 0,
                    uid: 0,
                    uuid: 0,
                    convertUid: 0,
                    getUid: function() {
                        return l.uuid
                    },
                    sid: 0,
                    subSid: 0,
                    appid: 66,
                    codeRate: 0,
                    curBitRate: 0,
                    userArea: 0,
                    proxyAreaType: 0,
                    clientAreaType: 0,
                    isFirstViewer: !1,
                    videoStreamId: null,
                    audioStreamId: null,
                    videoMetaData: null,
                    audioMetaData: null,
                    videoNtp: new u.default,
                    downlinkRTOCalculator: new o.default,
                    proxyLink: null,
                    videoLink: null,
                    initTafTime: 0,
                    getVPTime: 0,
                    startTime: 0,
                    connectVideoTime: 0,
                    firstVideoPkgTime: 0,
                    firstIFrameTime: 0,
                    firstRenderTime: 0,
                    onPlayTime: 0,
                    initUseTime: function(e) {
                        l.startTime = e,
                            l.connectVideoTime = 0,
                            l.loginTime = 0,
                            l.firstVideoPkgTime = 0,
                            l.firstIFrameTime = 0,
                            l.firstRenderTime = 0,
                            l.onPlayTime = 0
                    },
                    printUseTime: function() {
                        for (var e = ["\n%c" + ".".repeat(28), " getVPTime            = " + (l.getVPTime - l.startTime), " connectVideoTime     = " + (l.connectVideoTime - l.getVPTime), " loginTime            = " + (l.loginTime - l.connectVideoTime), " firstVideoPkgTime    = " + (l.firstVideoPkgTime - l.loginTime), " firstIFrameTime      = " + (l.firstIFrameTime - l.firstVideoPkgTime), " firstRenderTime      = " + (l.firstRenderTime - l.firstIFrameTime), " onPlayTime           = " + (l.onPlayTime - l.firstRenderTime), " totalTime            = " + (l.onPlayTime - l.startTime), ".".repeat(28)], t = 0; t < e.length; t++) {
                            var i = e[t];
                            i.length < 28 && (i += " ".repeat(28 - i.length),
                                e[t] = i)
                        }
                        var a = e.join("\n");
                        r.default.log(a, "color:#007500;background:#FFF5C2")
                    },
                    getConfig: function(e) {
                        return d.getConfig(e)
                    },
                    setConfig: function(e, t) {
                        r.default.log("G.setConfig key=" + e + " val=" + t),
                            d.setConfig(e, t)
                    },
                    hasListener: s,
                    addListener: function(e, t, i) {
                        if (!s(e, t, i)) {
                            var a = h[e] || [];
                            a.push({
                                callback: t,
                                thisObj: i,
                                bindCallback: i ? t.bind(i) : t
                            }),
                                h[e] = a
                        }
                    },
                    removeListener: function(e, t, i) {
                        var a = h[e];
                        if (a)
                            for (var s = a.length - 1; s >= 0; s--) {
                                var n = a[s];
                                if (n.callback == t && n.thisObj == i)
                                    return void a.splice(s, 1)
                            }
                    },
                    _onYYData: function(e, t) {
                        var i = h[e];
                        i && i.forEach(function(e) {
                            (0,
                                e.bindCallback)(t)
                        })
                    },
                    send: function(e) {
                        return !!l.videoLink && l.videoLink.send(e)
                    },
                    sendWup: function(e, t, i) {
                        var a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null
                            , s = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4];
                        if (!l.proxyLink)
                            return void r.default.error("G.sendWup proxyLink=null");
                        l.proxyLink.sendWup(e, t, i, a, s)
                    },
                    sendYY: function(e, t) {
                        if (!l.proxyLink)
                            return void r.default.error("G.sendYY proxyLink=null");
                        l.proxyLink.sendYY(e, t, l.getUid())
                    }
                };
                t.default = l;
                var d = new n.default
                    , h = {}
            }
            , function(e, t, i) {
                var a = i(25)
                    , s = i(17)
                    , n = i(37)
                    , r = i(29)
                    , u = i(32)
                    , o = function e(t, i, o) {
                    var l, d, h, f = t & e.F, c = t & e.G, p = t & e.S, v = t & e.P, m = t & e.B, y = t & e.W, _ = c ? s : s[i] || (s[i] = {}), S = _.prototype, g = c ? a : p ? a[i] : (a[i] || {}).prototype;
                    for (l in c && (o = i),
                        o)
                        (d = !f && g && void 0 !== g[l]) && u(_, l) || (h = d ? g[l] : o[l],
                            _[l] = c && "function" != typeof g[l] ? o[l] : m && d ? n(h, a) : y && g[l] == h ? function(e) {
                                var t = function(t, i, a) {
                                    if (this instanceof e) {
                                        switch (arguments.length) {
                                            case 0:
                                                return new e;
                                            case 1:
                                                return new e(t);
                                            case 2:
                                                return new e(t,i)
                                        }
                                        return new e(t,i,a)
                                    }
                                    return e.apply(this, arguments)
                                };
                                return t.prototype = e.prototype,
                                    t
                            }(h) : v && "function" == typeof h ? n(Function.call, h) : h,
                        v && ((_.virtual || (_.virtual = {}))[l] = h,
                        t & e.R && S && !S[l] && r(S, l, h)))
                };
                o.F = 1,
                    o.G = 2,
                    o.S = 4,
                    o.P = 8,
                    o.B = 16,
                    o.W = 32,
                    o.U = 64,
                    o.R = 128,
                    e.exports = o
            }
            , function(e, t) {
                var i = e.exports = "undefined" != typeof window && window.Math == Math ? window : "undefined" != typeof self && self.Math == Math ? self : Function("return this")();
                "number" == typeof __g && (__g = i)
            }
            , function(e, t, i) {
                e.exports = !i(38)(function() {
                    return 7 != Object.defineProperty({}, "a", {
                        get: function() {
                            return 7
                        }
                    }).a
                })
            }
            , function(e, t, i) {
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var a = function(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }(i(61))
                    , s = {};
                !function() {
                    var e = self.navigator.userAgent.toLowerCase()
                        , t = /(edge)\/([\w.]+)/.exec(e) || /(opr)[\/]([\w.]+)/.exec(e) || /(chrome)[ \/]([\w.]+)/.exec(e) || /(iemobile)[\/]([\w.]+)/.exec(e) || /(version)(applewebkit)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(e) || /(webkit)[ \/]([\w.]+).*(version)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(e) || /(webkit)[ \/]([\w.]+)/.exec(e) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(e) || /(msie) ([\w.]+)/.exec(e) || e.indexOf("trident") >= 0 && /(rv)(?::| )([\w.]+)/.exec(e) || e.indexOf("compatible") < 0 && /(firefox)[ \/]([\w.]+)/.exec(e) || []
                        , i = /(ipad)/.exec(e) || /(ipod)/.exec(e) || /(windows phone)/.exec(e) || /(iphone)/.exec(e) || /(kindle)/.exec(e) || /(android)/.exec(e) || /(windows)/.exec(e) || /(mac)/.exec(e) || /(linux)/.exec(e) || /(cros)/.exec(e) || []
                        , n = {
                        browser: t[5] || t[3] || t[1] || "",
                        version: t[2] || t[4] || "0",
                        majorVersion: t[4] || t[2] || "0",
                        platform: i[0] || ""
                    }
                        , r = {};
                    if (n.browser) {
                        r[n.browser] = !0;
                        var u = n.majorVersion.split(".");
                        r.version = {
                            major: parseInt(n.majorVersion, 10),
                            string: n.version
                        },
                        u.length > 1 && (r.version.minor = parseInt(u[1], 10)),
                        u.length > 2 && (r.version.build = parseInt(u[2], 10))
                    }
                    n.platform && (r[n.platform] = !0),
                    (r.chrome || r.opr || r.safari) && (r.webkit = !0),
                    (r.rv || r.iemobile) && (r.rv && delete r.rv,
                        n.browser = "msie",
                        r.msie = !0),
                    r.edge && (delete r.edge,
                        n.browser = "msedge",
                        r.msedge = !0),
                    r.opr && (n.browser = "opera",
                        r.opera = !0),
                    r.safari && r.android && (n.browser = "android",
                        r.android = !0);
                    for (var o in r.name = n.browser,
                        r.platform = n.platform,
                        s)
                        s.hasOwnProperty(o) && delete s[o];
                    (0,
                        a.default)(s, r)
                }(),
                s.version || (s.version = {
                    major: 0,
                    minor: 0,
                    build: 0,
                    string: "0.0.0"
                }),
                    t.default = s
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                function s() {
                    if (L.subChange) {
                        p.default.sendForceSubscribeNotify(),
                            L.subChange = !1;
                        var e = [];
                        R.reset();
                        for (var t = 0; t < d.default.maxSubNum; t++) {
                            var i = P[t];
                            i.isForced = !1,
                            h.default.isProxyUid(i.pubInfo.uid) && (e.push(t),
                                i.resetStamp()),
                                R.checkStream(i)
                        }
                        n(e)
                    }
                }
                function n(e) {
                    0 === e.length ? l.default.loaderMgr.stopSubStream(!0) : k.toString() !== e.toString() && l.default.loaderMgr.loadSubStream(R.getBaseIndex(), e),
                        k = e
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var r = a(i(14))
                    , u = a(i(0))
                    , o = a(i(1))
                    , l = a(i(9))
                    , d = a(i(13))
                    , h = a(i(10))
                    , f = a(i(16))
                    , c = a(i(42))
                    , p = a(i(72))
                    , v = a(i(5))
                    , m = a(i(287))
                    , y = a(i(288))
                    , _ = a(i(74))
                    , S = a(i(35))
                    , g = a(i(3))
                    , T = function() {
                    function e() {
                        (0,
                            u.default)(this, e),
                            this.cdnMaxSeq = 0,
                            this.p2pMinSeq = 0
                    }
                    return (0,
                        o.default)(e, [{
                        key: "reset",
                        value: function() {
                            this.cdnMaxSeq = 0,
                                this.p2pMinSeq = 0
                        }
                    }, {
                        key: "checkStream",
                        value: function(e) {
                            e.pubInfo.isFromPeer ? (0 === this.p2pMinSeq || this.p2pMinSeq > e.pubInfo.maxRecvSeq) && (this.p2pMinSeq = e.pubInfo.maxRecvSeq) : (0 === this.cdnMaxSeq || this.cdnMaxSeq < e.pubInfo.maxRecvSeq) && (this.cdnMaxSeq = e.pubInfo.maxRecvSeq)
                        }
                    }, {
                        key: "getBaseIndex",
                        value: function() {
                            var e = _.default.getMaxSeq();
                            if (0 === this.p2pMinSeq)
                                return this.cdnMaxSeq || e;
                            this.cdnMaxSeq = this.cdnMaxSeq || e;
                            var t = this.cdnMaxSeq + parseInt(.5 * (this.p2pMinSeq - this.cdnMaxSeq));
                            return this.cdnMaxSeq > this.p2pMinSeq && t - this.p2pMinSeq > h.default.LOST_SEQ_NUM ? t = this.p2pMinSeq + Math.floor(.6 * h.default.LOST_SEQ_NUM) : this.cdnMaxSeq < this.p2pMinSeq && t - this.cdnMaxSeq > h.default.LOST_SEQ_NUM && (t = this.cdnMaxSeq + Math.floor(.6 * h.default.LOST_SEQ_NUM)),
                                t
                        }
                    }]),
                        e
                }()
                    , P = []
                    , I = new m.default
                    , E = 0
                    , k = []
                    , R = new T
                    , C = 100
                    , L = {
                    subChange: !1,
                    getSubs: function() {
                        return k
                    },
                    initStream: function() {
                        if (0 === P.length)
                            for (var e = 0; e < d.default.maxSubNum; e++)
                                P.push(new y.default(e));
                        !function() {
                            for (var e = [], t = 0; t < d.default.maxSubNum; t++)
                                e.push(t),
                                    P[t].force = !1;
                            for (d.default.forceArr = []; e.length > 0 && d.default.forceArr.length < h.default.PROXY_NUM; ) {
                                var i = Math.random() * e.length | 0
                                    , a = e[i];
                                d.default.forceArr.push(a),
                                    P[a].force = !0,
                                    e.splice(i, 1)
                            }
                            d.default.forceArr.sort(function(e, t) {
                                return e - t
                            })
                        }();
                        var t = Number(l.default.extendConfig.patchSubTs) / 1e3;
                        C = parseInt(l.default.curBitRate / 1e3 * 125 * t),
                            C = Math.min(C, 1e3),
                            I.uploadMin = parseInt(.8 * d.default.curUplinkStreamNum)
                    },
                    getStream: function(e) {
                        return P[e]
                    },
                    updateByPing: function(e, t) {
                        var i = v.default.now();
                        if (t.streamDelay.length >= d.default.maxSubNum)
                            for (var a = 0; a < d.default.maxSubNum; a++)
                                P[a].updateByPing(e, t.streamDelay[a], t.maxSeqs[a], i)
                    },
                    getStreamDelay: function(e) {
                        var t = P[e];
                        return t ? t.getStreamDelay() : -1
                    },
                    getStreamDelays: function() {
                        for (var e = [], t = 0; t < d.default.maxSubNum; t++) {
                            var i = P[t].getStreamDelay();
                            i > h.default.DEFAULT_DELAY && (i = h.default.DEFAULT_DELAY),
                                e.push(i)
                        }
                        return e
                    },
                    getDelayDetail: function() {
                        for (var e = 0, t = 0, i = 0, a = 0; a < d.default.maxSubNum; a++) {
                            var s = P[a].getStreamDelay();
                            s > h.default.DEFAULT_DELAY ? s = h.default.DEFAULT_DELAY : s < 0 && (s = 0),
                                e += s,
                            (0 === t || t < s) && (t = s),
                            (0 === i || i > s) && (i = s)
                        }
                        return {
                            max: t,
                            min: i,
                            avg: Math.floor(e / d.default.maxSubNum)
                        }
                    },
                    getP2PStreamIndexs: function() {
                        for (var e = [], t = 0; t < d.default.maxSubNum; t++) {
                            var i = P[t].pubInfo.uid;
                            h.default.isProxyUid(i) || e.push(t)
                        }
                        return e
                    },
                    getStreamMaxSeqs: function() {
                        for (var e = [], t = 0; t < d.default.maxSubNum; t++) {
                            var i = P[t].pubInfo.maxRecvSeq;
                            e.push(i)
                        }
                        return e
                    },
                    delNode: function(e) {
                        for (var t = 0; t < d.default.maxSubNum; t++)
                            P[t].delNode(e)
                    },
                    addPubCandidate: function(e) {
                        for (var t = c.default.getPeerInfo(e), i = 0; i < d.default.maxSubNum; i++) {
                            var a = P[i];
                            a.force || a.addPubCandidate(e, t)
                        }
                    },
                    calcPeerLoss: function(e, t, i) {
                        if (!(Number(l.default.extendConfig.p2pConfig.uplinkStreamNum) > 0 || t > 100 * i)) {
                            t < i && (t = i);
                            var a = v.default.now();
                            I.update(e, t, i, a),
                            I.ready(a) && (d.default.curUplinkStreamNum = I.updateUploadBandwidth(d.default.curUplinkStreamNum, a),
                            d.default.curUplinkStreamNum > d.default.maxUpLinkStreamNumLimit && (d.default.curUplinkStreamNum = d.default.maxUpLinkStreamNumLimit),
                                l.default.userAbility.setUplinkMax(d.default.curUplinkStreamNum))
                        }
                    },
                    onCheckTimer: function(e, t) {
                        I.addActualUpload(S.default.getUplinkNum()),
                            c.default.resetCurSubNum(),
                            R.reset(),
                            d.default.competeArr = [];
                        var i = []
                            , a = !0
                            , s = !1
                            , u = void 0;
                        try {
                            for (var o, h = (0,
                                r.default)(P); !(a = (o = h.next()).done); a = !0) {
                                var v = o.value;
                                R.checkStream(v),
                                    v.onTimer(e, t),
                                v.unsubscribeCdn && (v.unsubscribeCdn = !1,
                                    i.push(v.index))
                            }
                        } catch (e) {
                            s = !0,
                                u = e
                        } finally {
                            try {
                                !a && h.return && h.return()
                            } finally {
                                if (s)
                                    throw u
                            }
                        }
                        if (d.default.competeArr.length > 0 && (f.default.add(f.default.keys.COMPETE_TOTAL_TIMES, 1),
                            p.default.sendCompeteReq(d.default.competeArr)),
                        1 === l.default.extendConfig.p2pConfig.useUnsubCdn && i.length > 0) {
                            p.default.sendForceSubscribeNotify();
                            for (var m = k.slice(); i.length > 0; ) {
                                var y = i.shift()
                                    , _ = m.indexOf(y);
                                -1 != _ && m.splice(_, 1)
                            }
                            n(m)
                        }
                    },
                    recvCompeteRes: function(e) {
                        d.default.csMinBw = e.csMinBw,
                            d.default.remainP2pStreamNum = e.remainP2pStreamNum,
                            d.default.SNBw = e.SNBw,
                            g.default.log("StreamMgr recvCompeteRes", e),
                            0 == e.ret ? f.default.add(f.default.keys.COMPETE_SUC_TIMES, 1) : 5 !== e.ret && f.default.add(f.default.keys.COMPETE_FAIL_TIMES, 1);
                        var t = !0
                            , i = !1
                            , a = void 0;
                        try {
                            for (var s, n = (0,
                                r.default)(P); !(t = (s = n.next()).done); t = !0)
                                s.value.recvCompeteRes(e)
                        } catch (e) {
                            i = !0,
                                a = e
                        } finally {
                            try {
                                !t && n.return && n.return()
                            } finally {
                                if (i)
                                    throw a
                            }
                        }
                    },
                    onCheckFastTimer: function(e, t) {
                        for (var i = !0, a = 0; a < d.default.maxSubNum; a++) {
                            var n = P[a];
                            n.onCheckFastTimer(e, t),
                            2 !== n.pubInfo.status && (i = !1)
                        }
                        i && s()
                    },
                    getRepeatIndex: function() {
                        return E
                    },
                    loadStreams: function(e) {
                        var t = !0
                            , i = !1
                            , a = void 0;
                        try {
                            for (var n, u = (0,
                                r.default)(P); !(t = (n = u.next()).done); t = !0)
                                n.value.subStream(e)
                        } catch (e) {
                            i = !0,
                                a = e
                        } finally {
                            try {
                                !t && u.return && u.return()
                            } finally {
                                if (i)
                                    throw a
                            }
                        }
                        s();
                        var o = R.getBaseIndex();
                        l.default.loaderMgr.loadPatchSubStream(C, o, [0])
                    },
                    recvSlice: function(e) {
                        if (0 != P.length) {
                            var t = e.seq % d.default.maxSubNum
                                , i = P[t];
                            _.default.hasSlice(e.seq) ? (E++,
                                i.recvSlice(e, !0)) : (_.default.addSlice(e),
                                i.recvSlice(e, !1))
                        }
                    },
                    recvSliceVideo: function(e) {
                        if (0 != P.length && e.config.has(3)) {
                            var t = e.seq % d.default.maxSubNum;
                            P[t].addDelay(e)
                        }
                    },
                    getCompeteStreams: function() {
                        for (var e = [], t = 0; t < d.default.maxSubNum; t++)
                            h.default.isCompete(P[t].pubInfo.uid) && e.push(t);
                        return e
                    },
                    getForceStreams: function() {
                        for (var e = [], t = 0; t < d.default.maxSubNum; t++)
                            !P[t].force && h.default.isForce(P[t].pubInfo.uid) && e.push(t);
                        return e
                    },
                    restart: function() {
                        var e = !0
                            , t = !1
                            , i = void 0;
                        try {
                            for (var a, s = (0,
                                r.default)(P); !(e = (a = s.next()).done); e = !0)
                                a.value.restart()
                        } catch (e) {
                            t = !0,
                                i = e
                        } finally {
                            try {
                                !e && s.return && s.return()
                            } finally {
                                if (t)
                                    throw i
                            }
                        }
                        k = [],
                            this.subChange = !1
                    },
                    reset: function() {
                        var e = !0
                            , t = !1
                            , i = void 0;
                        try {
                            for (var a, s = (0,
                                r.default)(P); !(e = (a = s.next()).done); e = !0)
                                a.value.reset()
                        } catch (e) {
                            t = !0,
                                i = e
                        } finally {
                            try {
                                !e && s.return && s.return()
                            } finally {
                                if (t)
                                    throw i
                            }
                        }
                        E = 0,
                            k = [],
                            this.subChange = !1
                    }
                };
                t.default = L
            }
            , function(e, t, i) {
                var a = i(22)
                    , s = i(44);
                e.exports = i(26) ? function(e, t, i) {
                        return a.f(e, t, s(1, i))
                    }
                    : function(e, t, i) {
                        return e[t] = i,
                            e
                    }
            }
            , function(e, t) {
                e.exports = function(e) {
                    return "object" == (void 0 === e ? "undefined" : a(e)) ? null !== e : "function" == typeof e
                }
            }
            , function(e, t, i) {
                var a = i(30);
                e.exports = function(e) {
                    if (!a(e))
                        throw TypeError(e + " is not an object!");
                    return e
                }
            }
            , function(e, t) {
                var i = {}.hasOwnProperty;
                e.exports = function(e, t) {
                    return i.call(e, t)
                }
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(6))
                    , n = a(i(0))
                    , r = a(i(1))
                    , u = function() {
                    function e(t) {
                        var i = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                        (0,
                            n.default)(this, e),
                            this.view = t,
                            this.pos = 0,
                            this.len = 0,
                            this.uri = 0,
                            this.resCode = 0,
                        !0 === i && (this.len = this.popUInt32(),
                            this.uri = this.popUInt32(),
                            this.resCode = this.popUInt16())
                    }
                    return (0,
                        r.default)(e, [{
                        key: "bytesAvailable",
                        value: function() {
                            return this.view.byteLength - this.pos
                        }
                    }, {
                        key: "popBool",
                        value: function() {
                            return 1 == this.popUInt8()
                        }
                    }, {
                        key: "popUInt8",
                        value: function() {
                            if (this.pos + 1 > this.view.byteLength)
                                return 0;
                            var e = this.view.getUint8(this.pos);
                            return this.pos++,
                                e
                        }
                    }, {
                        key: "popUInt16",
                        value: function() {
                            if (this.pos + 2 > this.view.byteLength)
                                return 0;
                            var e = this.view.getUint16(this.pos, !0);
                            return this.pos += 2,
                                e
                        }
                    }, {
                        key: "popUInt32",
                        value: function() {
                            if (this.pos + 4 > this.view.byteLength)
                                return 0;
                            var e = this.view.getUint32(this.pos, !0);
                            return this.pos += 4,
                                e
                        }
                    }, {
                        key: "popUInt64",
                        value: function() {
                            if (this.pos + 8 > this.view.byteLength)
                                return 0;
                            var e = this.view.getUint32(this.pos, !0);
                            this.pos += 4;
                            var t = this.view.getUint32(this.pos, !0);
                            return this.pos += 4,
                            4294967296 * t + e
                        }
                    }, {
                        key: "popUint8Array",
                        value: function() {
                            var e = this.popUInt16();
                            if (this.pos + e > this.view.byteLength)
                                return null;
                            var t = new Uint8Array(this.view.buffer,this.pos,e);
                            return this.pos += e,
                                t.slice()
                        }
                    }, {
                        key: "popUint8Array32",
                        value: function() {
                            var e = this.popUInt32();
                            if (this.pos + e > this.view.byteLength)
                                return null;
                            var t = new Uint8Array(this.view.buffer,this.pos,e);
                            return this.pos += e,
                                t.slice()
                        }
                    }, {
                        key: "popUInt64Vector",
                        value: function() {
                            var e = this.popUInt32();
                            if (this.pos + 8 * e > this.view.byteLength)
                                return null;
                            for (var t = [], i = 0; i < e; i++)
                                t.push(this.popUInt64());
                            return t
                        }
                    }, {
                        key: "popUInt32Vector",
                        value: function() {
                            var e = this.popUInt32();
                            if (this.pos + 4 * e > this.view.byteLength)
                                return null;
                            for (var t = [], i = 0; i < e; i++)
                                t.push(this.popUInt32());
                            return t
                        }
                    }, {
                        key: "popUInt16Vector",
                        value: function() {
                            var e = this.popUInt32();
                            if (this.pos + 2 * e > this.view.byteLength)
                                return null;
                            for (var t = [], i = 0; i < e; i++)
                                t.push(this.popUInt16());
                            return t
                        }
                    }, {
                        key: "popObjVector",
                        value: function(e) {
                            for (var t = this.popUInt32(), i = [], a = 0; a < t; a++) {
                                var s = new e;
                                i.push(s.unmarshall(this))
                            }
                            return i
                        }
                    }, {
                        key: "popString",
                        value: function() {
                            var e = this.popUInt16();
                            if (this.pos + e > this.view.byteLength)
                                return null;
                            for (var t = [], i = 0; i < e; ++i)
                                t[i] = String.fromCharCode(this.popUInt8());
                            return t.join("")
                        }
                    }, {
                        key: "popMapKey8Val32",
                        value: function() {
                            for (var e = this.popUInt32(), t = new s.default, i = 0; i < e; i++) {
                                var a = this.popUInt8()
                                    , n = this.popUInt32();
                                t.set(a, n)
                            }
                            return t
                        }
                    }]),
                        e
                }();
                t.default = u
            }
            , function(e, t, i) {
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var a = function(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }(i(15))
                    , s = {
                    speed: new a.default(20),
                    rtt: new a.default(20),
                    p2p: 0
                }
                    , n = {
                    addSpeed: function(e) {
                        var t = parseInt(e.replace("KB", ""));
                        s.speed.add(t)
                    },
                    addRtt: function(e) {
                        s.rtt.add(e)
                    },
                    setP2p: function(e) {
                        s.p2p = e
                    },
                    getP2p: function() {
                        return s.p2p
                    },
                    getResult: function() {
                        return {
                            speed: s.speed.getSamples(),
                            rtt: s.rtt.getSamples(),
                            p2p: s.p2p
                        }
                    }
                };
                t.default = n
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(14))
                    , n = a(i(6))
                    , r = a(i(10))
                    , u = a(i(8))
                    , o = a(i(3))
                    , l = a(i(13))
                    , d = a(i(21))
                    , h = a(i(282))
                    , f = a(i(16))
                    , c = new n.default
                    , p = {
                    addSub: function(e, t, i) {
                        f.default.add(f.default.keys.REAL_UPLINK_STREAM_SUM, 1);
                        var a = c.get(e);
                        a || (a = new h.default(e),
                            c.set(e, a)),
                            a.add(t, 2, i)
                    },
                    delSub: function(e, t, i) {
                        var a = d.default.getNode(e);
                        if (o.default.log("P2P SubMgr delSub，subUid", e, "streamIndex", t, "reason", i, "nodeRtt", a ? a.rtt : 0),
                            c.has(e)) {
                            var s = c.get(e);
                            if (s.has(t))
                                return s.del(t),
                                    f.default.add(f.default.keys.REAL_UPLINK_STREAM_SUM, -1),
                                0 === s.getStreamNum() && c.delete(e),
                                    !0
                        }
                        return !1
                    },
                    hasSub: function(e, t) {
                        return !!c.has(e) && c.get(e).has(t)
                    },
                    getSubNum: function(e) {
                        return c.has(e) ? c.get(e).getStreamNum() : 0
                    },
                    updateAlive: function(e, t) {
                        c.has(e) && (c.get(e).aliveStamp = t)
                    },
                    delNode: function(e) {
                        if (c.has(e)) {
                            o.default.log("P2P SubMgr delNode 节点断开，删除订阅信息，订阅者uid", e);
                            var t = c.get(e);
                            f.default.add(f.default.keys.REAL_UPLINK_STREAM_SUM, -t.getStreamNum()),
                                c.delete(e)
                        }
                    },
                    getWorstSubByBw: function() {
                        var e = r.default.VIDEO_FORCE_UID
                            , t = u.default.UintMax
                            , i = !0
                            , a = !1
                            , n = void 0;
                        try {
                            for (var o, l = (0,
                                s.default)(c.keys()); !(i = (o = l.next()).done); i = !0) {
                                var h = o.value
                                    , f = d.default.getNode(h);
                                if (!f) {
                                    e = h;
                                    break
                                }
                                f.uplinkBw < t && (e = h,
                                    t = f.uplinkBw)
                            }
                        } catch (e) {
                            a = !0,
                                n = e
                        } finally {
                            try {
                                !i && l.return && l.return()
                            } finally {
                                if (a)
                                    throw n
                            }
                        }
                        return e
                    },
                    getSubMinBw: function() {
                        var e = u.default.UintMax
                            , t = l.default.curUplinkStreamNum
                            , i = !0
                            , a = !1
                            , n = void 0;
                        try {
                            for (var r, o = (0,
                                s.default)(c.entries()); !(i = (r = o.next()).done); i = !0) {
                                var h = r.value
                                    , f = h[0]
                                    , p = h[1];
                                if (d.default.hasNode(f)) {
                                    var v = d.default.getNode(f);
                                    e > v.uplinkBw && (e = v.uplinkBw)
                                }
                                t = Math.max(t - p.getStreamNum(), 0)
                            }
                        } catch (e) {
                            a = !0,
                                n = e
                        } finally {
                            try {
                                !i && o.return && o.return()
                            } finally {
                                if (a)
                                    throw n
                            }
                        }
                        return t > 0 && (e = 0),
                            e
                    },
                    getUplinkNum: function() {
                        var e = 0
                            , t = !0
                            , i = !1
                            , a = void 0;
                        try {
                            for (var n, r = (0,
                                s.default)(c.values()); !(t = (n = r.next()).done); t = !0)
                                e += n.value.getStreamNum()
                        } catch (e) {
                            i = !0,
                                a = e
                        } finally {
                            try {
                                !t && r.return && r.return()
                            } finally {
                                if (i)
                                    throw a
                            }
                        }
                        return e
                    },
                    onCheckFastTimer: function(e, t) {
                        var i = !0
                            , a = !1
                            , n = void 0;
                        try {
                            for (var u, o = (0,
                                s.default)(c.values()); !(i = (u = o.next()).done); i = !0) {
                                var l = u.value;
                                l.isTimeOut(e) && d.default.delNode(l.uid, r.default.DEL_REASON.SUB_TIMEOUT)
                            }
                        } catch (e) {
                            a = !0,
                                n = e
                        } finally {
                            try {
                                !i && o.return && o.return()
                            } finally {
                                if (a)
                                    throw n
                            }
                        }
                    },
                    reset: function() {
                        c.clear()
                    }
                };
                t.default = p
            }
            , function(e, t, i) {
                var a = i(214)(!0);
                i(77)(String, "String", function(e) {
                    this._t = String(e),
                        this._i = 0
                }, function() {
                    var e, t = this._t, i = this._i;
                    return i >= t.length ? {
                        value: void 0,
                        done: !0
                    } : (e = a(t, i),
                        this._i += e.length,
                        {
                            value: e,
                            done: !1
                        })
                })
            }
            , function(e, t, i) {
                var a = i(148);
                e.exports = function(e, t, i) {
                    if (a(e),
                    void 0 === t)
                        return e;
                    switch (i) {
                        case 1:
                            return function(i) {
                                return e.call(t, i)
                            }
                                ;
                        case 2:
                            return function(i, a) {
                                return e.call(t, i, a)
                            }
                                ;
                        case 3:
                            return function(i, a, s) {
                                return e.call(t, i, a, s)
                            }
                    }
                    return function() {
                        return e.apply(t, arguments)
                    }
                }
            }
            , function(e, t) {
                e.exports = function(e) {
                    try {
                        return !!e()
                    } catch (e) {
                        return !0
                    }
                }
            }
            , function(e, t) {
                e.exports = {}
            }
            , function(e, t, i) {
                var a = i(80)
                    , s = i(76);
                e.exports = function(e) {
                    return a(s(e))
                }
            }
            , function(e, t, i) {
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }),
                    t.default = {
                        VIDEO_ACCESS_MODE: 0,
                        AUDIO_ACCESS_MODE: 1,
                        VIDEO_JIT_BUFLEN: 2,
                        AUDIO_JIT_BUFLEN: 3,
                        VIDEO_P2P_MODE: 4,
                        AUDIO_PUSH_LEN: 5,
                        VIDEO_JIT_MAX_BUFLEN: 6,
                        JIT_DOWN_MODE: 7,
                        JIT_UP_MODE: 8,
                        PUSH_GOP: 9,
                        JIT_ADJUST_MODE: 10,
                        P2P_MAX_SUB_NUM: 50
                    }
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(14))
                    , n = a(i(6))
                    , r = a(i(10))
                    , u = a(i(8))
                    , o = a(i(281))
                    , l = a(i(3));
                a(i(13));
                var d = new n.default
                    , h = {
                    addPeerInfo: function(e) {
                        if (!d.has(e)) {
                            var t = new o.default(e);
                            return r.default.isProxyUid(e) && t.rttCalc.add(0),
                                d.set(e, t),
                                !0
                        }
                        return !1
                    },
                    delPeerInfo: function(e) {
                        return !!d.has(e) && (l.default.log("P2P PeerMgr delPeerInfo peerUid", e),
                            d.delete(e),
                            !0)
                    },
                    getPeerInfo: function(e) {
                        return d.get(e)
                    },
                    setPeerInfo: function(e, t) {
                        var i = d.get(e.fromUid);
                        i && (i.subMinBw = e.subMinBw,
                            i.subNum = e.subNum,
                            i.remainUplinkNum = e.remainUplinkNum,
                        t !== u.default.UintMax && i.addRtt(t))
                    },
                    updatePeer: function(e, t, i) {
                        var a = d.get(e);
                        a && a.addSendRecv(t, i)
                    },
                    resetCurSubNum: function() {
                        var e = !0
                            , t = !1
                            , i = void 0;
                        try {
                            for (var a, n = (0,
                                s.default)(d.values()); !(e = (a = n.next()).done); e = !0)
                                a.value.curSubNum = 0
                        } catch (e) {
                            t = !0,
                                i = e
                        } finally {
                            try {
                                !e && n.return && n.return()
                            } finally {
                                if (t)
                                    throw i
                            }
                        }
                    },
                    delSubNum: function(e) {
                        if (d.has(e)) {
                            var t = d.get(e);
                            t.subNum > 0 && t.subNum--
                        }
                    },
                    reset: function() {
                        d.clear()
                    }
                };
                t.default = h
            }
            , function(e, t, i) {
                e.exports = {
                    default: i(211),
                    __esModule: !0
                }
            }
            , function(e, t) {
                e.exports = function(e, t) {
                    return {
                        enumerable: !(1 & e),
                        configurable: !(2 & e),
                        writable: !(4 & e),
                        value: t
                    }
                }
            }
            , function(e, t, i) {
                i(221);
                for (var a = i(25), s = i(29), n = i(39), r = i(19)("toStringTag"), u = "CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","), o = 0; o < u.length; o++) {
                    var l = u[o]
                        , d = a[l]
                        , h = d && d.prototype;
                    h && !h[r] && s(h, r, l),
                        n[l] = n.Array
                }
            }
            , function(e, t, i) {
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }),
                    function(e) {
                        e && e.__esModule
                    }(i(3));
                var a = void 0
                    , s = {
                    presenterUid: 0,
                    uid: 0,
                    uuid: 0,
                    convertUid: 0,
                    sid: 0,
                    subSid: 0,
                    lineType: -1,
                    curBitrate: 0,
                    originalBitrate: -1,
                    extendConfig: {
                        flvToP2PChannel: ""
                    },
                    jumpBackToP2P: function() {
                        return void 0 == a && function() {
                            if ("" == s.extendConfig.flvToP2PChannel)
                                return void (a = !1);
                            if ("-1" == s.extendConfig.flvToP2PChannel)
                                return void (a = !0);
                            for (var e = s.sid.toString(), t = s.sid + "_" + s.subSid, i = s.extendConfig.flvToP2PChannel.split(/\,|\，/), n = "!" == i[0] || "！" == i[0], r = !1, u = 0; u < i.length; u++) {
                                var o = i[u];
                                if (n) {
                                    if (0 == u)
                                        continue;
                                    if (o == e || o == t) {
                                        r = !0;
                                        break
                                    }
                                } else if (o == e || o == t)
                                    return void (a = !0)
                            }
                            a = !(!n || 1 == i.length || r)
                        }(),
                            a
                    }
                };
                t.default = s
            }
            , function(e, t, i) {
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var a = window.HUYA || {};
                window.HUYA = a,
                    t.default = a,
                    a.VideoGatewayProxy2VGPingReq = function() {
                        this.lLocalTime = 0
                    }
                    ,
                    a.VideoGatewayProxy2VGPingReq.prototype._clone = function() {
                        return new a.VideoGatewayProxy2VGPingReq
                    }
                    ,
                    a.VideoGatewayProxy2VGPingReq.prototype._write = function(e, t, i) {
                        e.writeStruct(t, i)
                    }
                    ,
                    a.VideoGatewayProxy2VGPingReq.prototype._read = function(e, t, i) {
                        return e.readStruct(t, !0, i)
                    }
                    ,
                    a.VideoGatewayProxy2VGPingReq.prototype.writeTo = function(e) {
                        e.writeInt64(0, this.lLocalTime)
                    }
                    ,
                    a.VideoGatewayProxy2VGPingReq.prototype.readFrom = function(e) {
                        this.lLocalTime = e.readInt64(0, !1, this.lLocalTime)
                    }
                    ,
                    a.VideoGatewayProxy2VGPingRsp = function() {
                        this.lLocalTime = 0
                    }
                    ,
                    a.VideoGatewayProxy2VGPingRsp.prototype._clone = function() {
                        return new a.VideoGatewayProxy2VGPingRsp
                    }
                    ,
                    a.VideoGatewayProxy2VGPingRsp.prototype._write = function(e, t, i) {
                        e.writeStruct(t, i)
                    }
                    ,
                    a.VideoGatewayProxy2VGPingRsp.prototype._read = function(e, t, i) {
                        return e.readStruct(t, !0, i)
                    }
                    ,
                    a.VideoGatewayProxy2VGPingRsp.prototype.writeTo = function(e) {
                        e.writeInt64(0, this.lLocalTime)
                    }
                    ,
                    a.VideoGatewayProxy2VGPingRsp.prototype.readFrom = function(e) {
                        this.lLocalTime = e.readInt64(0, !1, this.lLocalTime)
                    }
                    ,
                    a.GetInfoFromVGReq = function() {
                        this.lUid = 0,
                            this.iServiceType = 0,
                            this.iClientType = 0,
                            this.iClientIp = 0,
                            this.iTerminalType = 0,
                            this.iRequestVPType = 0,
                            this.sMsg = new Taf.BinBuffer,
                            this.iUri = 0,
                            this.sProtoName = "",
                            this.lSid = 0,
                            this.vStreamName = new Taf.Vector(new Taf.STRING),
                            this.tId = new a.UserId
                    }
                    ,
                    a.GetInfoFromVGReq.prototype._clone = function() {
                        return new a.GetInfoFromVGReq
                    }
                    ,
                    a.GetInfoFromVGReq.prototype._write = function(e, t, i) {
                        e.writeStruct(t, i)
                    }
                    ,
                    a.GetInfoFromVGReq.prototype._read = function(e, t, i) {
                        return e.readStruct(t, !0, i)
                    }
                    ,
                    a.GetInfoFromVGReq.prototype.writeTo = function(e) {
                        e.writeInt64(0, this.lUid),
                            e.writeInt32(1, this.iServiceType),
                            e.writeInt32(2, this.iClientType),
                            e.writeInt64(3, this.iClientIp),
                            e.writeInt32(4, this.iTerminalType),
                            e.writeInt32(5, this.iRequestVPType),
                            e.writeBytes(6, this.sMsg),
                            e.writeInt64(7, this.iUri),
                            e.writeString(8, this.sProtoName),
                            e.writeInt64(9, this.lSid),
                            e.writeVector(10, this.vStreamName),
                            e.writeStruct(11, this.tId)
                    }
                    ,
                    a.GetInfoFromVGReq.prototype.readFrom = function(e) {
                        this.lUid = e.readInt64(0, !1, this.lUid),
                            this.iServiceType = e.readInt32(1, !1, this.iServiceType),
                            this.iClientType = e.readInt32(2, !1, this.iClientType),
                            this.iClientIp = e.readInt64(3, !1, this.iClientIp),
                            this.iTerminalType = e.readInt32(4, !1, this.iTerminalType),
                            this.iRequestVPType = e.readInt32(5, !1, this.iRequestVPType),
                            this.sMsg = e.readBytes(6, !1, this.sMsg),
                            this.iUri = e.readInt64(7, !1, this.iUri),
                            this.sProtoName = e.readString(8, !1, this.sProtoName),
                            this.lSid = e.readInt64(9, !1, this.lSid),
                            this.vStreamName = e.readVector(10, !1, this.vStreamName),
                            this.tId = e.readStruct(11, !1, this.tId)
                    }
                    ,
                    a.GetInfoFromVGRsp = function() {
                        this.lUid = 0,
                            this.ServerId = 0,
                            this.sMsg = new Taf.BinBuffer,
                            this.iUri = 0,
                            this.sProtoName = ""
                    }
                    ,
                    a.GetInfoFromVGRsp.prototype._clone = function() {
                        return new a.GetInfoFromVGRsp
                    }
                    ,
                    a.GetInfoFromVGRsp.prototype._write = function(e, t, i) {
                        e.writeStruct(t, i)
                    }
                    ,
                    a.GetInfoFromVGRsp.prototype._read = function(e, t, i) {
                        return e.readStruct(t, !0, i)
                    }
                    ,
                    a.GetInfoFromVGRsp.prototype.writeTo = function(e) {
                        e.writeInt64(0, this.lUid),
                            e.writeInt64(1, this.ServerId),
                            e.writeBytes(2, this.sMsg),
                            e.writeInt64(3, this.iUri),
                            e.writeString(4, this.sProtoName)
                    }
                    ,
                    a.GetInfoFromVGRsp.prototype.readFrom = function(e) {
                        this.lUid = e.readInt64(0, !1, this.lUid),
                            this.ServerId = e.readInt64(1, !1, this.ServerId),
                            this.sMsg = e.readBytes(2, !1, this.sMsg),
                            this.iUri = e.readInt64(3, !1, this.iUri),
                            this.sProtoName = e.readString(4, !1, this.sProtoName)
                    }
                    ,
                    a.GetCdnTokenExReq = function() {
                        this.sFlvUrl = "",
                            this.sStreamName = ""
                    }
                    ,
                    a.GetCdnTokenExReq.prototype._clone = function() {
                        return new a.GetCdnTokenExReq
                    }
                    ,
                    a.GetCdnTokenExReq.prototype._write = function(e, t, i) {
                        e.writeStruct(t, i)
                    }
                    ,
                    a.GetCdnTokenExReq.prototype._read = function(e, t, i) {
                        return e.readStruct(t, !0, i)
                    }
                    ,
                    a.GetCdnTokenExReq.prototype.writeTo = function(e) {
                        e.writeString(0, this.sFlvUrl),
                            e.writeString(1, this.sStreamName)
                    }
                    ,
                    a.GetCdnTokenExReq.prototype.readFrom = function(e) {
                        this.sFlvUrl = e.readString(0, !1, this.sFlvUrl),
                            this.sStreamName = e.readString(1, !1, this.sStreamName)
                    }
                    ,
                    a.GetCdnTokenExRsp = function() {
                        this.sFlvToken = "",
                            this.iExpireTime = 0
                    }
                    ,
                    a.GetCdnTokenExRsp.prototype._clone = function() {
                        return new a.GetCdnTokenExRsp
                    }
                    ,
                    a.GetCdnTokenExRsp.prototype._write = function(e, t, i) {
                        e.writeStruct(t, i)
                    }
                    ,
                    a.GetCdnTokenExRsp.prototype._read = function(e, t, i) {
                        return e.readStruct(t, !0, i)
                    }
                    ,
                    a.GetCdnTokenExRsp.prototype.writeTo = function(e) {
                        e.writeString(0, this.sFlvToken),
                            e.writeInt32(1, this.iExpireTime)
                    }
                    ,
                    a.GetCdnTokenExRsp.prototype.readFrom = function(e) {
                        this.sFlvToken = e.readString(0, !1, this.sFlvToken),
                            this.iExpireTime = e.readInt32(1, !1, this.iExpireTime)
                    }
                    ,
                    a.LiveScenarioType = {
                        ECommon_Live: 0,
                        EAudio_Only: 1,
                        EVideo_Only: 2,
                        ELink_Live: 3
                    },
                    a.LimitedStreamInfo = function() {
                        this.iVerMin = 0,
                            this.iVerMax = 0,
                            this.sCdnType = "",
                            this.iIsMaster = 0,
                            this.lChannelId = 0,
                            this.lSubChannelId = 0,
                            this.lPresenterUid = 0,
                            this.sStreamName = "",
                            this.sFlvUrl = "",
                            this.sFlvUrlSuffix = "",
                            this.sFlvAntiCode = "",
                            this.sHlsUrl = "",
                            this.sHlsUrlSuffix = "",
                            this.sHlsAntiCode = "",
                            this.iLineIndex = 0,
                            this.iIsMultiStream = 0,
                            this.iPCPriorityRate = 0,
                            this.iWebPriorityRate = 0,
                            this.iMobilePriorityRate = 0,
                            this.vFlvIPList = new Taf.Vector(new Taf.STRING),
                            this.iIsP2PSupport = 0,
                            this.sP2pUrl = "",
                            this.sP2pUrlSuffix = "",
                            this.sP2pAntiCode = "",
                            this.lFreeFlag = 0
                    }
                    ,
                    a.LimitedStreamInfo.prototype._clone = function() {
                        return new a.LimitedStreamInfo
                    }
                    ,
                    a.LimitedStreamInfo.prototype._write = function(e, t, i) {
                        e.writeStruct(t, i)
                    }
                    ,
                    a.LimitedStreamInfo.prototype._read = function(e, t, i) {
                        return e.readStruct(t, !0, i)
                    }
                    ,
                    a.LimitedStreamInfo.prototype.writeTo = function(e) {
                        e.writeInt32(0, this.iVerMin),
                            e.writeInt32(1, this.iVerMax),
                            e.writeString(2, this.sCdnType),
                            e.writeInt32(3, this.iIsMaster),
                            e.writeInt64(4, this.lChannelId),
                            e.writeInt64(5, this.lSubChannelId),
                            e.writeInt64(6, this.lPresenterUid),
                            e.writeString(7, this.sStreamName),
                            e.writeString(8, this.sFlvUrl),
                            e.writeString(9, this.sFlvUrlSuffix),
                            e.writeString(10, this.sFlvAntiCode),
                            e.writeString(11, this.sHlsUrl),
                            e.writeString(12, this.sHlsUrlSuffix),
                            e.writeString(13, this.sHlsAntiCode),
                            e.writeInt32(14, this.iLineIndex),
                            e.writeInt32(15, this.iIsMultiStream),
                            e.writeInt32(16, this.iPCPriorityRate),
                            e.writeInt32(17, this.iWebPriorityRate),
                            e.writeInt32(18, this.iMobilePriorityRate),
                            e.writeVector(19, this.vFlvIPList),
                            e.writeInt32(20, this.iIsP2PSupport),
                            e.writeString(21, this.sP2pUrl),
                            e.writeString(22, this.sP2pUrlSuffix),
                            e.writeString(23, this.sP2pAntiCode),
                            e.writeInt64(24, this.lFreeFlag)
                    }
                    ,
                    a.LimitedStreamInfo.prototype.readFrom = function(e) {
                        this.iVerMin = e.readInt32(0, !1, this.iVerMin),
                            this.iVerMax = e.readInt32(1, !1, this.iVerMax),
                            this.sCdnType = e.readString(2, !1, this.sCdnType),
                            this.iIsMaster = e.readInt32(3, !1, this.iIsMaster),
                            this.lChannelId = e.readInt64(4, !1, this.lChannelId),
                            this.lSubChannelId = e.readInt64(5, !1, this.lSubChannelId),
                            this.lPresenterUid = e.readInt64(6, !1, this.lPresenterUid),
                            this.sStreamName = e.readString(7, !1, this.sStreamName),
                            this.sFlvUrl = e.readString(8, !1, this.sFlvUrl),
                            this.sFlvUrlSuffix = e.readString(9, !1, this.sFlvUrlSuffix),
                            this.sFlvAntiCode = e.readString(10, !1, this.sFlvAntiCode),
                            this.sHlsUrl = e.readString(11, !1, this.sHlsUrl),
                            this.sHlsUrlSuffix = e.readString(12, !1, this.sHlsUrlSuffix),
                            this.sHlsAntiCode = e.readString(13, !1, this.sHlsAntiCode),
                            this.iLineIndex = e.readInt32(14, !1, this.iLineIndex),
                            this.iIsMultiStream = e.readInt32(15, !1, this.iIsMultiStream),
                            this.iPCPriorityRate = e.readInt32(16, !1, this.iPCPriorityRate),
                            this.iWebPriorityRate = e.readInt32(17, !1, this.iWebPriorityRate),
                            this.iMobilePriorityRate = e.readInt32(18, !1, this.iMobilePriorityRate),
                            this.vFlvIPList = e.readVector(19, !1, this.vFlvIPList),
                            this.iIsP2PSupport = e.readInt32(20, !1, this.iIsP2PSupport),
                            this.sP2pUrl = e.readString(21, !1, this.sP2pUrl),
                            this.sP2pUrlSuffix = e.readString(22, !1, this.sP2pUrlSuffix),
                            this.sP2pAntiCode = e.readString(23, !1, this.sP2pAntiCode),
                            this.lFreeFlag = e.readInt64(24, !1, this.lFreeFlag)
                    }
                    ,
                    a.ClassifiedStreamInfoPack = function() {
                        this.iLiveScenarioType = 0,
                            this.vStreamInfo = new Taf.Vector(new a.LimitedStreamInfo),
                            this.vCdnList = new Taf.Vector(new Taf.STRING),
                            this.lLiveId = 0,
                            this.sLinkGroupId = "",
                            this.mStreamRatioWeb = new Taf.Map(new Taf.STRING,new Taf.INT32),
                            this.mStreamRatioPC = new Taf.Map(new Taf.STRING,new Taf.INT32),
                            this.mStreamRatioMobile = new Taf.Map(new Taf.STRING,new Taf.INT32)
                    }
                    ,
                    a.ClassifiedStreamInfoPack.prototype._clone = function() {
                        return new a.ClassifiedStreamInfoPack
                    }
                    ,
                    a.ClassifiedStreamInfoPack.prototype._write = function(e, t, i) {
                        e.writeStruct(t, i)
                    }
                    ,
                    a.ClassifiedStreamInfoPack.prototype._read = function(e, t, i) {
                        return e.readStruct(t, !0, i)
                    }
                    ,
                    a.ClassifiedStreamInfoPack.prototype.writeTo = function(e) {
                        e.writeInt32(0, this.iLiveScenarioType),
                            e.writeVector(1, this.vStreamInfo),
                            e.writeVector(2, this.vCdnList),
                            e.writeInt64(3, this.lLiveId),
                            e.writeString(4, this.sLinkGroupId),
                            e.writeMap(5, this.mStreamRatioWeb),
                            e.writeMap(6, this.mStreamRatioPC),
                            e.writeMap(7, this.mStreamRatioMobile)
                    }
                    ,
                    a.ClassifiedStreamInfoPack.prototype.readFrom = function(e) {
                        this.iLiveScenarioType = e.readInt32(0, !1, this.iLiveScenarioType),
                            this.vStreamInfo = e.readVector(1, !1, this.vStreamInfo),
                            this.vCdnList = e.readVector(2, !1, this.vCdnList),
                            this.lLiveId = e.readInt64(3, !1, this.lLiveId),
                            this.sLinkGroupId = e.readString(4, !1, this.sLinkGroupId),
                            this.mStreamRatioWeb = e.readMap(5, !1, this.mStreamRatioWeb),
                            this.mStreamRatioPC = e.readMap(6, !1, this.mStreamRatioPC),
                            this.mStreamRatioMobile = e.readMap(7, !1, this.mStreamRatioMobile)
                    }
                    ,
                    a.LivingStreamInfoNotice = function() {
                        this.lPresenterUid = 0,
                            this.lLiveId = 0,
                            this.mStreamInfo = new Taf.Map(new Taf.INT32,new a.ClassifiedStreamInfoPack)
                    }
                    ,
                    a.LivingStreamInfoNotice.prototype._clone = function() {
                        return new a.LivingStreamInfoNotice
                    }
                    ,
                    a.LivingStreamInfoNotice.prototype._write = function(e, t, i) {
                        e.writeStruct(t, i)
                    }
                    ,
                    a.LivingStreamInfoNotice.prototype._read = function(e, t, i) {
                        return e.readStruct(t, !0, i)
                    }
                    ,
                    a.LivingStreamInfoNotice.prototype.writeTo = function(e) {
                        e.writeInt64(0, this.lPresenterUid),
                            e.writeInt64(1, this.lLiveId),
                            e.writeMap(2, this.mStreamInfo)
                    }
                    ,
                    a.LivingStreamInfoNotice.prototype.readFrom = function(e) {
                        this.lPresenterUid = e.readInt64(0, !1, this.lPresenterUid),
                            this.lLiveId = e.readInt64(1, !1, this.lLiveId),
                            this.mStreamInfo = e.readMap(2, !1, this.mStreamInfo)
                    }
                    ,
                    a.LivingStreamEndNotice = function() {
                        this.sStreamName = "",
                            this.sCdnType = "",
                            this.iLineIndex = 0,
                            this.lLiveId = 0,
                            this.iLiveScenarioType = 0
                    }
                    ,
                    a.LivingStreamEndNotice.prototype._clone = function() {
                        return new a.LivingStreamEndNotice
                    }
                    ,
                    a.LivingStreamEndNotice.prototype._write = function(e, t, i) {
                        e.writeStruct(t, i)
                    }
                    ,
                    a.LivingStreamEndNotice.prototype._read = function(e, t, i) {
                        return e.readStruct(t, !0, i)
                    }
                    ,
                    a.LivingStreamEndNotice.prototype.writeTo = function(e) {
                        e.writeString(0, this.sStreamName),
                            e.writeString(1, this.sCdnType),
                            e.writeInt32(2, this.iLineIndex),
                            e.writeInt64(3, this.lLiveId),
                            e.writeInt32(4, this.iLiveScenarioType)
                    }
                    ,
                    a.LivingStreamEndNotice.prototype.readFrom = function(e) {
                        this.sStreamName = e.readString(0, !1, this.sStreamName),
                            this.sCdnType = e.readString(1, !1, this.sCdnType),
                            this.iLineIndex = e.readInt32(2, !1, this.iLineIndex),
                            this.lLiveId = e.readInt64(3, !1, this.lLiveId),
                            this.iLiveScenarioType = e.readInt32(4, !1, this.iLiveScenarioType)
                    }
                    ,
                    a.GetLivingStreamInfoReq = function() {
                        this.tId = new a.UserId,
                            this.lTopSid = 0,
                            this.lSubSid = 0,
                            this.lPresenterUid = 0,
                            this.sTraceSource = ""
                    }
                    ,
                    a.GetLivingStreamInfoReq.prototype._clone = function() {
                        return new a.GetLivingStreamInfoReq
                    }
                    ,
                    a.GetLivingStreamInfoReq.prototype._write = function(e, t, i) {
                        e.writeStruct(t, i)
                    }
                    ,
                    a.GetLivingStreamInfoReq.prototype._read = function(e, t, i) {
                        return e.readStruct(t, !0, i)
                    }
                    ,
                    a.GetLivingStreamInfoReq.prototype.writeTo = function(e) {
                        e.writeStruct(0, this.tId),
                            e.writeInt64(1, this.lTopSid),
                            e.writeInt64(2, this.lSubSid),
                            e.writeInt64(3, this.lPresenterUid),
                            e.writeString(4, this.sTraceSource)
                    }
                    ,
                    a.GetLivingStreamInfoReq.prototype.readFrom = function(e) {
                        this.tId = e.readStruct(0, !1, this.tId),
                            this.lTopSid = e.readInt64(1, !1, this.lTopSid),
                            this.lSubSid = e.readInt64(2, !1, this.lSubSid),
                            this.lPresenterUid = e.readInt64(3, !1, this.lPresenterUid),
                            this.sTraceSource = e.readString(4, !1, this.sTraceSource)
                    }
                    ,
                    a.GetLivingStreamInfoRsp = function() {
                        this.bIsLiving = 0,
                            this.tNotice = new a.LivingStreamInfoNotice,
                            this.bIsSelfLiving = 0
                    }
                    ,
                    a.GetLivingStreamInfoRsp.prototype._clone = function() {
                        return new a.GetLivingStreamInfoRsp
                    }
                    ,
                    a.GetLivingStreamInfoRsp.prototype._write = function(e, t, i) {
                        e.writeStruct(t, i)
                    }
                    ,
                    a.GetLivingStreamInfoRsp.prototype._read = function(e, t, i) {
                        return e.readStruct(t, !0, i)
                    }
                    ,
                    a.GetLivingStreamInfoRsp.prototype.writeTo = function(e) {
                        e.writeInt32(0, this.bIsLiving),
                            e.writeStruct(1, this.tNotice),
                            e.writeInt32(2, this.bIsSelfLiving)
                    }
                    ,
                    a.GetLivingStreamInfoRsp.prototype.readFrom = function(e) {
                        this.bIsLiving = e.readInt32(0, !1, this.bIsLiving),
                            this.tNotice = e.readStruct(1, !1, this.tNotice),
                            this.bIsSelfLiving = e.readInt32(2, !1, this.bIsSelfLiving)
                    }
                    ,
                    a.VideoClientReportReq = function() {
                        this.iReportType = 0,
                            this.sReportString = "",
                            this.sMsg = new Taf.BinBuffer,
                            this.lUid = 0
                    }
                    ,
                    a.VideoClientReportReq.prototype._clone = function() {
                        return new a.VideoClientReportReq
                    }
                    ,
                    a.VideoClientReportReq.prototype._write = function(e, t, i) {
                        e.writeStruct(t, i)
                    }
                    ,
                    a.VideoClientReportReq.prototype._read = function(e, t, i) {
                        return e.readStruct(t, !0, i)
                    }
                    ,
                    a.VideoClientReportReq.prototype.writeTo = function(e) {
                        e.writeInt32(0, this.iReportType),
                            e.writeString(1, this.sReportString),
                            e.writeBytes(2, this.sMsg),
                            e.writeInt64(3, this.lUid)
                    }
                    ,
                    a.VideoClientReportReq.prototype.readFrom = function(e) {
                        this.iReportType = e.readInt32(0, !1, this.iReportType),
                            this.sReportString = e.readString(1, !1, this.sReportString),
                            this.sMsg = e.readBytes(2, !1, this.sMsg),
                            this.lUid = e.readInt64(3, !1, this.lUid)
                    }
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(6))
                    , n = a(i(0))
                    , r = a(i(1))
                    , u = a(i(4))
                    , o = function() {
                    function e() {
                        (0,
                            n.default)(this, e),
                            this.ip = 0,
                            this.tcpPorts = [],
                            this.udpPorts = [],
                            this.videoProxyInfo = new s.default
                    }
                    return (0,
                        r.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new u.default(!1);
                            return "number" == typeof this.ip ? e.pushUInt32(this.ip) : e.pushUInt32(this.ip2uint(this.ip)),
                                e.pushUInt16Vector(this.tcpPorts),
                                e.pushUInt16Vector(this.udpPorts),
                                e.pushUInt32(this.videoProxyInfo.size),
                                this.videoProxyInfo.forEach(function(t, i) {
                                    e.pushUInt8(i),
                                        e.pushUInt32(t)
                                }),
                                e.marshall()
                        }
                    }, {
                        key: "unmarshall",
                        value: function(e) {
                            this.ip = this.uint2ip(e.popUInt32()),
                                this.tcpPorts = e.popUInt16Vector(),
                                this.udpPorts = e.popUInt16Vector(),
                                this.videoProxyInfo.clear();
                            for (var t = e.popUInt32(), i = 0; i < t; i++) {
                                var a = e.popUInt8()
                                    , s = e.popUInt32();
                                this.videoProxyInfo.set(a, s)
                            }
                            return this
                        }
                    }, {
                        key: "ip2uint",
                        value: function(e) {
                            for (var t = 0, i = e.split("."), a = 0; a < i.length; a++)
                                t |= Number(i[a]) << 8 * a;
                            return t < 0 && (t += 4294967296),
                                t
                        }
                    }, {
                        key: "uint2ip",
                        value: function(e) {
                            return (255 & e) + "." + (e >> 8 & 255) + "." + (e >> 16 & 255) + "." + (e >> 24 & 255)
                        }
                    }]),
                        e
                }();
                t.default = o
            }
            , function(e, t, i) {
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }),
                    t.default = {
                        STREAM_VIDEO_RAW: 0,
                        STREAM_VIDEO_TRANSCODE: 1,
                        STREAM_VIDEO_RTMP_RAW: 2,
                        STREAM_VIDEO_RTMP_TRANSCODE: 3,
                        STRAEM_TYPE_AUDIO_START: 32,
                        STREAM_AUDIO_RAW: 32,
                        STREAM_AUDIO_TRANSCODE: 33,
                        STREAM_AUDIO_FLV_RAW: 34,
                        STREAM_AUDIO_FLV_TRANSCODE: 35,
                        STREAM_AUDIO_RTMP_RAW: 36,
                        STREAM_AUDIO_RTMP_TRANSCODE: 37,
                        STREAM_AUDIO_ALL_SID: 39,
                        STREAM_TYPE_UNKNOWN: 255
                    }
            }
            , function(e, t, i) {
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }),
                    t.default = {
                        STREAM_UNKNOWN: 0,
                        AUDIO_SPEEX: 0,
                        AUDIO_AACPLUS: 1,
                        AUDIO_SILK: 2,
                        AUDIO_AAC_44100HZ_STEREO_128KBPS: 35,
                        AUDIO_AAC_44100HZ_STEREO_160KBPS: 36,
                        AUDIO_AAC_44100HZ_STEREO_192KBPS: 37,
                        AUDIO_ELD_AAC_44100HZ_STEREO: 38,
                        AUDIO_ELD_AAC_SBR_44100HZ_STEREO: 39,
                        AUDIO_MP3: 50,
                        AUDIO_NELLYMOSER: 54,
                        VIDEO_264_START: 401,
                        VIDEO_H264_100K: 401,
                        VIDEO_H264_500K: 405,
                        VIDEO_H264_800K: 408,
                        VIDEO_H264_1200K: 412,
                        VIDEO_H264_1500K: 415,
                        VIDEO_H264_2000K: 420,
                        VIDEO_H264_3000K: 430,
                        VIDEO_H264_4000K: 440,
                        VIDEO_H264_6000K: 460,
                        VIDEO_H264_8000K: 480,
                        VIDEO_H264_END: 480,
                        VIDEO_265_START: 503,
                        VIDEO_H265_300K: 503,
                        VIDEO_H265_500K: 505,
                        VIDEO_H265_800K: 508,
                        VIDEO_H265_1200K: 512,
                        VIDEO_H265_1500K: 515,
                        VIDEO_H265_2000K: 520,
                        VIDEO_H265_3000K: 530,
                        VIDEO_H265_4000K: 540,
                        VIDEO_H265_6000K: 560,
                        VIDEO_H265_8000K: 580,
                        VIDEO_H265_END: 580
                    }
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(6))
                    , n = a(i(0))
                    , r = a(i(1))
                    , u = a(i(4))
                    , o = function() {
                    function e() {
                        (0,
                            n.default)(this, e),
                            this.ip = 0,
                            this.tcpPorts = [],
                            this.udpPorts = [],
                            this.videoProxyInfo = new s.default
                    }
                    return (0,
                        r.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new u.default(!1);
                            return "number" == typeof this.ip ? e.pushUInt32(this.ip) : e.pushUInt32(this.ip2uint(this.ip)),
                                e.pushUInt16Vector(this.tcpPorts),
                                e.pushUInt16Vector(this.udpPorts),
                                e.pushUInt32(this.videoProxyInfo.size),
                                this.videoProxyInfo.forEach(function(t, i) {
                                    e.pushUInt8(i),
                                        e.pushUInt32(t)
                                }),
                                e.marshall()
                        }
                    }, {
                        key: "unmarshall",
                        value: function(e) {
                            this.ip = this.uint2ip(e.popUInt32()),
                                this.tcpPorts = e.popUInt16Vector(),
                                this.udpPorts = e.popUInt16Vector(),
                                this.videoProxyInfo.clear();
                            for (var t = e.popUInt32(), i = 0; i < t; i++) {
                                var a = e.popUInt8()
                                    , s = e.popUInt32();
                                this.videoProxyInfo.set(a, s)
                            }
                            return this
                        }
                    }, {
                        key: "ip2uint",
                        value: function(e) {
                            for (var t = 0, i = e.split("."), a = 0; a < i.length; a++)
                                t |= Number(i[a]) << 8 * a;
                            return t < 0 && (t += 4294967296),
                                t
                        }
                    }, {
                        key: "uint2ip",
                        value: function(e) {
                            return (255 & e) + "." + (e >> 8 & 255) + "." + (e >> 16 & 255) + "." + (e >> 24 & 255)
                        }
                    }]),
                        e
                }();
                t.default = o
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(11))
                    , u = a(i(3))
                    , o = a(i(15))
                    , l = function() {
                    function e(t) {
                        var i = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1]
                            , a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 10;
                        (0,
                            s.default)(this, e),
                            this.linkHandler = t,
                            this.ws = null,
                            this.connected = !1,
                            this.isYY = i,
                            this.url = null,
                            this.avgSpeed = new o.default(a)
                    }
                    return (0,
                        n.default)(e, [{
                        key: "destroy",
                        value: function() {
                            this.linkHandler = null,
                                this.reset(),
                                r.default.remove(this.onCheckTimer, this)
                        }
                    }, {
                        key: "connect",
                        value: function(e) {
                            this.reset(),
                                r.default.add(this.onCheckTimer, this, 1e3),
                                this.url = e,
                                this.ws = new WebSocket(e),
                                this.ws.binaryType = "arraybuffer",
                                this.ws.onopen = this.onopen.bind(this),
                                this.ws.onerror = this.onerror.bind(this),
                                this.ws.onclose = this.onclose.bind(this),
                                this.ws.onmessage = this.onmessage.bind(this)
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            this.ws && (this.connected = !1,
                                this.ws.onopen = null,
                                this.ws.onerror = null,
                                this.ws.onclose = null,
                                this.ws.onmessage = null,
                                this.ws.close(),
                                this.ws = null),
                                this.url = null,
                                this.avgSpeed.reset()
                        }
                    }, {
                        key: "send",
                        value: function(e) {
                            this.ws && this.connected && this.ws.send(e)
                        }
                    }, {
                        key: "onopen",
                        value: function() {
                            this.connected = !0,
                            this.linkHandler && this.linkHandler.onopen()
                        }
                    }, {
                        key: "onerror",
                        value: function(e) {
                            u.default.log("ProtoLink.onerror event=" + e),
                                this.connected = !1,
                                this.ws = null,
                            this.linkHandler && (this.linkHandler.onerror(e),
                                this.linkHandler = null)
                        }
                    }, {
                        key: "onclose",
                        value: function() {
                            this.connected = !1,
                                this.ws = null,
                            this.linkHandler && (this.linkHandler.onclose(),
                                this.linkHandler = null)
                        }
                    }, {
                        key: "onmessage",
                        value: function(e) {
                            this.avgSpeed.addCur(e.data.byteLength),
                                e.data instanceof ArrayBuffer ? this.processArrayBuffer(e.data) : this.processText(e.data)
                        }
                    }, {
                        key: "processText",
                        value: function(e) {
                            u.default.log("ProtoLink.processText data=" + e)
                        }
                    }, {
                        key: "processArrayBuffer",
                        value: function(e) {
                            if (this.isYY)
                                for (var t = new DataView(e), i = 0, a = 0, s = 0; i + 10 < e.byteLength; ) {
                                    if (i + (a = t.getUint32(i, !0)) > e.byteLength || a < 10)
                                        return void u.default.error("ProtoLink.processArrayBuffer length error pktLen=" + a + " bufferLen=" + e.byteLength);
                                    s = t.getUint32(i + 4, !0);
                                    var n = new DataView(e,i,a);
                                    this.linkHandler && this.linkHandler.onData(s, n),
                                        i += a
                                }
                            else
                                this.linkHandler && this.linkHandler.onData(e)
                        }
                    }, {
                        key: "onCheckTimer",
                        value: function(e, t) {
                            this.connected && this.avgSpeed.calculate()
                        }
                    }, {
                        key: "speed",
                        get: function() {
                            return this.avgSpeed.average()
                        }
                    }]),
                        e
                }();
                t.default = l
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(9))
                    , u = a(i(3))
                    , o = a(i(8))
                    , l = a(i(11))
                    , d = a(i(5))
                    , h = a(i(27))
                    , f = a(i(52))
                    , c = a(i(202))
                    , p = a(i(203))
                    , v = a(i(2))
                    , m = a(i(65))
                    , y = (a(i(16)),
                    a(i(10)))
                    , _ = a(i(18))
                    , S = a(i(34))
                    , g = a(i(205))
                    , T = a(i(206))
                    , P = 0
                    , I = void 0
                    , E = void 0
                    , k = void 0
                    , R = void 0
                    , C = void 0
                    , L = void 0
                    , A = function() {
                    function e(t, i) {
                        (0,
                            s.default)(this, e),
                            this.cdnMgr = t,
                            this.type = i || e.TYPE_FULL,
                            this.loaderId = ++P,
                            t.loaderMap.set(this.loaderId, {
                                loader: this
                            }),
                            this.isRangeLoader ? h.default.firefox ? this.link = new c.default(this) : this.link = new p.default(this) : this.link = new f.default(this,!1),
                            this.url = null,
                            this.lineType = -1,
                            this.started = !1,
                            this.status = 0,
                            this.connecting = !1,
                            this.connectTotalTs = 0,
                            this.flowRetryTimes = 0,
                            this.u8arr = new Uint8Array(0),
                            this.lastSeq = 0,
                            this.connectTs = 0,
                            this.connectedTs = 0,
                            this.firstPkgTs = 0,
                            this.firstPkgSeq = 0,
                            this.onRangeLoaded = null,
                            this.onRangeError = null,
                            this.isDelayCloseLoader = !1,
                            this.isForceSubLoader = !1,
                            this.isMultiCdnSubLoader = !1,
                            this.onMultiCdnSubLoaderCallback = null,
                            this.reportUrl = null,
                            this.sliceRecvSeq = 0,
                            this.sliceTs = 0,
                            this.sliceStamp = 0,
                            this.tcpStamp = 0,
                            this.logMark = "FullStream",
                            this.isSubLoader ? this.logMark = "SubStream" : this.isRangeLoader ? this.logMark = "Resend" : this.isPatchLoader && (this.logMark = "PathcSubStream"),
                            this.logMarkCss = "color:#01814A;background:#FFF5C2;font-weight:bold;",
                            Number(localStorage._printNetSpeed),
                            I = Number(r.default.extendConfig.connectTotalTime),
                            E = Number(r.default.extendConfig.connectTimeout),
                            k = Number(r.default.extendConfig.flowTimeout),
                            R = Number(r.default.extendConfig.flowRetryTimes),
                            C = Number(r.default.extendConfig.renderTimeout),
                            L = Number(r.default.extendConfig.noDataTimeout)
                    }
                    return (0,
                        n.default)(e, [{
                        key: "getLoaderInfo",
                        value: function() {
                            var e = this.isDelayCloseLoader ? " delayLoader" : ""
                                , t = this.isForceSubLoader ? " forceSubLoader" : ""
                                , i = "bufLen=" + this.cdnMgr.bufferLen;
                            return "type=" + this.type + " line=" + this.lineType + e + t + " " + i
                        }
                    }, {
                        key: "resetReport",
                        value: function() {
                            this.sliceRecvSeq = 0,
                                this.sliceStamp = 0,
                                this.tcpStamp = 0
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            this.u8arr = new Uint8Array(0),
                                this.status = 0,
                                this.lastSeq = 0,
                                this.connecting = !1,
                                this.connectTs = 0,
                                this.connectedTs = 0,
                                this.firstPkgTs = 0,
                                this.firstPkgSeq = 0,
                                this.sliceTs = 0,
                                this.resetReport(),
                                l.default.remove(this.onCheckTimer, this),
                                l.default.remove(this.onConnectTimeout, this),
                                l.default.remove(this.onFirstDataTimeout, this),
                                l.default.remove(this.onRenderTimeout, this),
                                this.isDelayCloseLoader = !1,
                                this.isRangeLoader || r.default.isHttp2() && 1 == this.lineType ? (this.link.destroy(),
                                    h.default.firefox ? this.link = new c.default(this) : this.link = new p.default(this)) : (this.link.destroy(),
                                    this.url && this.url.startsWith("http") ? h.default.firefox ? this.link = new c.default(this) : this.link = new p.default(this) : this.link = new f.default(this,!1)),
                            g.default.isRunning() && g.default.resetRangeBuffer(this.loaderId)
                        }
                    }, {
                        key: "connect",
                        value: function(e, t) {
                            var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
                            this.url = e,
                                this.lineType = t,
                                this.reset();
                            var a = d.default.now();
                            this.connectTs = a,
                                this.tcpStamp = a;
                            var s = e;
                            if (!this.isFullLoader) {
                                s += "&maxSeq=" + this.cdnMgr.getMaxSeq();
                                var n = this.cdnMgr.getMaxSeqTs();
                                s += "&maxSeqTime=" + d.default.getTimeStr(n)
                            }
                            r.default.isStartFromUrl || (s += "&timeStamp=" + d.default.getDateTimeStr().replace(" ", "_"),
                                s += "&u=" + r.default.convertUid + "&t=100&sv=1810311321",
                            r.default.myIp && (s += "&myIp=" + r.default.myIp));
                            var o = "";
                            if (i) {
                                var h = [];
                                for (var f in i) {
                                    var c = i[f];
                                    c && h.push(f + "=" + c)
                                }
                                o = h.join(" "),
                                    this.otherInfoStr = o
                            }
                            u.default.log("%c" + this.logMark, this.logMarkCss, s + " " + this.getLoaderInfo() + " " + o),
                                this.connecting = !0,
                                this.link.connect(s),
                                this.started = !0,
                                l.default.add(this.onCheckTimer, this, 1e3),
                            this.isRangeLoader || l.default.once(this.onConnectTimeout, this, E)
                        }
                    }, {
                        key: "reconnect",
                        value: function() {
                            null != this.url && -1 != this.lineType ? (r.default.sFlvToken && -1 == this.url.indexOf(r.default.sFlvToken) && (this.url = this.url.replace(/(wsSecret=.+?&wsTime=.+?)(\&|$)/, r.default.sFlvToken + "$2")),
                                u.default.group("VideoLoader.reconnect"),
                                this.close(),
                                this.connect(this.url, this.lineType),
                                u.default.groupEnd()) : u.default.error("VideoLoader.reconnect url=" + this.url + " line=" + this.lineType)
                        }
                    }, {
                        key: "close",
                        value: function() {
                            this.reset(),
                                this.started = !1
                        }
                    }, {
                        key: "onopen",
                        value: function() {
                            var e = d.default.now();
                            this.connectedTs = e;
                            var t = this.connectedTs - this.connectTs;
                            this.isRangeLoader || u.default.log("VideoLoader.onopen " + this.getLoaderInfo() + " cost time=" + t),
                            this.isFullLoader && 0 == r.default.connectVideoTime && (r.default.connectVideoTime = e,
                                u.default.log("%c[TIME] connectVideoTime=" + (r.default.connectVideoTime - r.default.startTime) + " totalTime=" + (e - r.default.startTime), "color:#A23400;background:#FFF5C2")),
                            this.isRangeLoader || r.default.loaderMgr.delayDestroy(),
                            this.isSubLoader && this._reportStat(3),
                                this.connecting = !1,
                                this._reportTcp(),
                                l.default.remove(this.onConnectTimeout, this),
                            this.isRangeLoader || this.isPatchLoader || l.default.once(this.onFirstDataTimeout, this, k)
                        }
                    }, {
                        key: "onclose",
                        value: function() {
                            if (this.connecting = !1,
                                this.isRangeLoader) {
                                var e = this.url
                                    , t = this.firstPkgTs - this.connectTs;
                                this.close(),
                                "function" == typeof this.onRangeLoaded && this.onRangeLoaded(e, t)
                            } else
                                this.resetReport(),
                                    u.default.log("VideoLoader.onclose " + this.getLoaderInfo()),
                                    this.sliceTs > 0 ? this.getProxy() : this.connectedTs > 0 ? this.onFirstDataTimeout() : l.default.once(this.onConnectTimeout, this, 1e3)
                        }
                    }, {
                        key: "onerror",
                        value: function(e, t) {
                            if (this.connecting = !1,
                                u.default.log("VideoLoader.onerror " + this.getLoaderInfo()),
                            this.isSubLoader && this._reportStat(2),
                            404 != t && 403 != t || (this.isFullLoader && (_.default.httpError = !0),
                                _.default.sendMetrics([{
                                    sMetricName: _.default.METRIC.WEB_P2P_HTTP_CODE + t,
                                    vDimension: {
                                        success: this.type
                                    }
                                }])),
                                this.isRangeLoader) {
                                var i = this.url;
                                this.close(),
                                "function" == typeof this.onRangeError && this.onRangeError(i, t)
                            } else
                                this.resetReport(),
                                    this.sliceTs > 0 ? this.getProxy() : this.connectedTs > 0 ? this.onFirstDataTimeout() : l.default.once(this.onConnectTimeout, this, 1e3)
                        }
                    }, {
                        key: "onstatus",
                        value: function(e) {
                            this.status = e
                        }
                    }, {
                        key: "onConnectTimeout",
                        value: function() {
                            this.connectedTs > 0 || (this._reportStat(1),
                                this.connectTotalTs += d.default.now() - this.connectTs,
                                u.default.warn("VideoLoader.onConnectTimeout connectTotalTs=" + this.connectTotalTs + "/" + I + " " + this.getLoaderInfo()),
                                this.connectTotalTs < I ? this.reconnect() : this.isMultiCdnSubLoader ? this._multiCdnPreCallback(T.default.RECONNECT_CONNECTION_FAILED) : this.isFullLoader ? this.cdnMgr.turnToFlv(y.default.turnToFlvReason.FULL_CONNECT_TIMEOUT) : this.isSubLoader && this.cdnMgr.turnToFlv(y.default.turnToFlvReason.SUB_CONNECT_TIMEOUT),
                            this.isRangeLoader || this.cdnMgr.loaderErrorTimes++,
                                this.isFullLoader ? this.cdnMgr.pauseStat.add(y.default.pauseReason.P2P_FULL_LOADER_CONNECT_FAIL) : this.isSubLoader && this.cdnMgr.pauseStat.add(y.default.pauseReason.P2P_SUB_LOADER_CONNECT_FAIL))
                        }
                    }, {
                        key: "onFirstDataTimeout",
                        value: function() {
                            if (!(this.sliceTs > 0 || this.isPatchLoader)) {
                                var e = d.default.now();
                                u.default.warn("VideoLoader.onFirstDataTimeout", e - this.connectedTs),
                                    this.cdnMgr.isEverSuccessPlayed ? this.flowRetryTimes++ < R ? this.reconnect() : this.isMultiCdnSubLoader ? this._multiCdnPreCallback(T.default.RECONNECT_NO_DATA) : this.isFullLoader ? this.cdnMgr.turnToFlv(y.default.turnToFlvReason.FULL_NO_DATA) : this.cdnMgr.turnToFlv(y.default.turnToFlvReason.SUB_NO_DATA) : this.isFullLoader ? this.cdnMgr.turnToFlv(y.default.turnToFlvReason.FULL_NO_DATA) : this.cdnMgr.turnToFlv(y.default.turnToFlvReason.SUB_NO_DATA),
                                this.isRangeLoader || this.cdnMgr.loaderErrorTimes++,
                                    this.isFullLoader ? this.cdnMgr.pauseStat.add(y.default.pauseReason.P2P_FULL_LOADER_NO_DATA) : this.isSubLoader && this.cdnMgr.pauseStat.add(y.default.pauseReason.P2P_SUB_LOADER_NO_DATA)
                            }
                        }
                    }, {
                        key: "onRenderTimeout",
                        value: function() {
                            this.sliceTs > 0 && this.isFullLoader && this.cdnMgr.onRenderTimeout()
                        }
                    }, {
                        key: "_reportStat",
                        value: function(e) {
                            _.default.sendMetrics([{
                                sMetricName: _.default.METRIC.SDK_P2P_TCP,
                                vDimension: {
                                    success: this.type,
                                    ip: r.default.wanIp
                                },
                                vField: {
                                    state: e
                                }
                            }])
                        }
                    }, {
                        key: "_reportNoSlice",
                        value: function(e) {
                            this.isRangeLoader || 0 === this.sliceStamp || e - this.sliceStamp > 2500 && this.url && (_.default.sendMetrics([{
                                sMetricName: _.default.METRIC.WEB_P2P_TCP_NO_SLICE,
                                vDimension: {
                                    success: this.type,
                                    ip: r.default.wanIp
                                }
                            }]),
                                this.sliceStamp = 0)
                        }
                    }, {
                        key: "_reportNoHeader",
                        value: function() {
                            !this.isRangeLoader && this.url && this.reportUrl !== this.url && (this.reportUrl = this.url)
                        }
                    }, {
                        key: "_reportTcp",
                        value: function() {
                            var e = d.default.now() - this.tcpStamp;
                            this.tcpStamp > 0 && e > 1e3 && this.url && e < 1e4 && _.default.sendMetrics([{
                                sMetricName: _.default.METRIC.WEB_P2P_TCP_OPEN_TIME,
                                vField: {
                                    value: e
                                },
                                vDimension: {
                                    success: this.type,
                                    ip: r.default.wanIp
                                }
                            }]),
                            this.tcpStamp > 0 && e > 2e3 && this.url && this.isMultiCdnSubLoader && this._multiCdnPreCallback(T.default.RECONNECT_CONNECTION_SLOW),
                                this.tcpStamp = 0
                        }
                    }, {
                        key: "reportTimeout",
                        value: function(e) {
                            _.default.sendMetrics([{
                                sMetricName: _.default.METRIC.WEB_P2P_TCP_TIMEOUT,
                                vDimension: {
                                    success: this.type
                                }
                            }])
                        }
                    }, {
                        key: "onData",
                        value: function(e) {
                            r.default.globalSpeedCalc.addCur(e.byteLength);
                            var t = d.default.now();
                            if (this.sliceTs = t,
                                this.sliceStamp = t,
                            0 != S.default.getP2p()) {
                                if (0 == this.firstPkgTs) {
                                    this.firstPkgTs = t;
                                    var i = this.firstPkgTs - this.connectedTs
                                        , a = o.default.formatByteSize(e.byteLength);
                                    u.default.log("VideoLoader.onData " + this.getLoaderInfo() + " firstPkgTs=" + i + " size=" + a),
                                        l.default.remove(this.onFirstDataTimeout, this),
                                    this.isFullLoader && l.default.once(this.onRenderTimeout, this, C),
                                        this.connectTotalTs = 0,
                                        this.flowRetryTimes = 0
                                }
                                this._onData(e)
                            } else
                                this.close()
                        }
                    }, {
                        key: "_onData",
                        value: function(e) {
                            if (g.default.isRunning())
                                g.default.parsePkgData({
                                    loaderId: this.loaderId,
                                    buffer: e,
                                    fromType: this.type,
                                    line: this.lineType,
                                    isWs: this.link instanceof f.default
                                });
                            else if (this.link instanceof f.default)
                                this.onProto(new Uint8Array(e));
                            else {
                                var t = this.u8arr
                                    , i = new Uint8Array(e);
                                0 == t.length ? this.u8arr = i : (this.u8arr = new Uint8Array(t.length + i.length),
                                    this.u8arr.set(t, 0),
                                    this.u8arr.set(i, t.length));
                                var a = this.onProto(this.u8arr);
                                a > 0 && (this.u8arr = this.u8arr.slice(a))
                            }
                        }
                    }, {
                        key: "onProto",
                        value: function(e) {
                            for (var t = new DataView(e.buffer), i = 0, a = 0, s = void 0, n = void 0, o = void 0, l = void 0, d = void 0, h = void 0; i + 10 < e.byteLength; ) {
                                if ((a = t.getUint16(i + 8, !0)) < 10)
                                    return u.default.error("VideoLoader.onProto length error pktLen=" + a + ", smaller than 10 bytes."),
                                        i;
                                if (i + a > e.byteLength)
                                    return i;
                                o = t.getUint32(i, !0),
                                    l = 4294967296 * t.getUint32(i + 4, !0) + o,
                                    this.isFullLoader ? (this.lastSeq > 0 && Math.abs(l - this.lastSeq) > 1 && u.default.warn("VideoLoader seq discontinuous, lastSeq=" + this.lastSeq + " curSeq=" + l + " jump=" + (l - this.lastSeq)),
                                        this.lastSeq = l) : this.isSubLoader && 0 == this.firstPkgSeq && (this.firstPkgSeq = l,
                                        u.default.log("VideoLoader type=2 line=" + this.lineType + " firstSeq=" + l)),
                                    this.sliceRecvSeq = l;
                                var f = Number(localStorage._dropSliceCnt);
                                f > 0 && (localStorage._dropSliceCnt = f - 1),
                                    d = t.getUint32(i + 14, !0),
                                    n = e.slice(i + 10, i + a),
                                    h = new DataView(n.buffer),
                                r.default.videoLink && !f && r.default.videoLink.onData(d, h, l),
                                    (s = new m.default).seq = l,
                                    s.uri = d,
                                    s.from = this.type,
                                    s.payload = n,
                                f || r.default._onYYData(v.default.PP2pSliceData, s),
                                    i += a
                            }
                            return i
                        }
                    }, {
                        key: "onCheckTimer",
                        value: function(e, t) {
                            this.started && (this._reportNoSlice(e),
                            !this.isPatchLoader && !this.isRangeLoader && this.sliceTs > 0 && e - this.sliceTs >= L && (this.isMultiCdnSubLoader ? this._multiCdnPreCallback(T.default.RECONNECT_NO_SLICE) : this.getProxy(),
                                this.cdnMgr.pauseStat.add(y.default.pauseReason.P2P_NO_SLICE)))
                        }
                    }, {
                        key: "printNetSpeed",
                        value: function() {
                            var e = this.link.speed;
                            e != o.default.UintMax && (e = o.default.formatByteSize(e),
                                u.default.log("VideoLoader speed " + e + "/s " + this.getLoaderInfo()))
                        }
                    }, {
                        key: "getProxy",
                        value: function() {
                            this.isRangeLoader || (u.default.log("VideoLoader.getProxy " + this.getLoaderInfo()),
                                this._reportNoHeader(),
                                this.reset(),
                            this.isRangeLoader || this.cdnMgr.loaderErrorTimes++,
                                this.isPatchLoader ? this.reconnect() : this.isMultiCdnSubLoader ? this._multiCdnPreCallback(T.default.RECONNECT_CONNECTION_ERROR) : this.cdnMgr.restart(y.default.restartReason.CONNECT))
                        }
                    }, {
                        key: "_multiCdnPreCallback",
                        value: function(e) {
                            if (!this.isMultiCdnSubLoader || !this.isSubLoader)
                                throw new Error("MultiLoader callback error.");
                            "function" == typeof this.onMultiCdnSubLoaderCallback && this.onMultiCdnSubLoaderCallback({
                                line: this.lineType,
                                reason: e
                            })
                        }
                    }, {
                        key: "connected",
                        get: function() {
                            return this.link && this.link.connected
                        }
                    }, {
                        key: "isFullLoader",
                        get: function() {
                            return this.type == e.TYPE_FULL
                        }
                    }, {
                        key: "isSubLoader",
                        get: function() {
                            return this.type == e.TYPE_SUB
                        }
                    }, {
                        key: "isPatchLoader",
                        get: function() {
                            return this.type == e.TYPE_PATCH
                        }
                    }, {
                        key: "isRangeLoader",
                        get: function() {
                            return this.type == e.TYPE_RANGE
                        }
                    }, {
                        key: "isConnectTimeout",
                        get: function() {
                            var e = d.default.now() - this.connectTs;
                            return this.connecting && e > 2e3
                        }
                    }, {
                        key: "isResponseTimeout",
                        get: function() {
                            var e = d.default.now() - this.connectedTs;
                            return this.connectedTs > 0 && e > 2e3
                        }
                    }, {
                        key: "speed",
                        get: function() {
                            var e = this.link.speed;
                            return e == o.default.UintMax && (e = 0),
                                e
                        }
                    }]),
                        e
                }();
                A.TYPE_FULL = 1,
                    A.TYPE_SUB = 2,
                    A.TYPE_RANGE = 3,
                    A.TYPE_PATCH = 4,
                    t.default = A
            }
            , function(e, t) {
                e.exports = !0
            }
            , function(e, t, i) {
                var a = i(152)
                    , s = i(84);
                e.exports = Object.keys || function(e) {
                    return a(e, s)
                }
            }
            , function(e, t, i) {
                var a = i(75)
                    , s = Math.min;
                e.exports = function(e) {
                    return e > 0 ? s(a(e), 9007199254740991) : 0
                }
            }
            , function(e, t) {
                var i = 0
                    , a = Math.random();
                e.exports = function(e) {
                    return "Symbol(".concat(void 0 === e ? "" : e, ")_", (++i + a).toString(36))
                }
            }
            , function(e, t, i) {
                var a = i(22).f
                    , s = i(32)
                    , n = i(19)("toStringTag");
                e.exports = function(e, t, i) {
                    e && !s(e = i ? e : e.prototype, n) && a(e, n, {
                        configurable: !0,
                        value: t
                    })
                }
            }
            , function(e, t, i) {
                var a = i(76);
                e.exports = function(e) {
                    return Object(a(e))
                }
            }
            , function(e, t) {
                t.f = {}.propertyIsEnumerable
            }
            , function(e, t, i) {
                e.exports = {
                    default: i(231),
                    __esModule: !0
                }
            }
            , function(e, t, i) {
                var a = i(37)
                    , s = i(159)
                    , n = i(160)
                    , r = i(31)
                    , u = i(56)
                    , o = i(90)
                    , l = {}
                    , d = {};
                (t = e.exports = function(e, t, i, h, f) {
                        var c, p, v, m, y = f ? function() {
                                return e
                            }
                            : o(e), _ = a(i, h, t ? 2 : 1), S = 0;
                        if ("function" != typeof y)
                            throw TypeError(e + " is not iterable!");
                        if (n(y)) {
                            for (c = u(e.length); c > S; S++)
                                if ((m = t ? _(r(p = e[S])[0], p[1]) : _(e[S])) === l || m === d)
                                    return m
                        } else
                            for (v = y.call(e); !(p = v.next()).done; )
                                if ((m = s(v, _, p.value, t)) === l || m === d)
                                    return m
                    }
                ).BREAK = l,
                    t.RETURN = d
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                function s(e, t, i) {
                    var a = "font-weight:900";
                    return e && (a += ";color:" + e),
                    t && (a += ";background:" + t),
                    i && (a += ";border:3px solid " + i),
                        a
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var n = a(i(61))
                    , r = a(i(0))
                    , u = a(i(1))
                    , o = (a(i(8)),
                    a(i(11)))
                    , l = a(i(5))
                    , d = a(i(3))
                    , h = a(i(9))
                    , f = a(i(23))
                    , c = a(i(47))
                    , p = a(i(2))
                    , v = a(i(33))
                    , m = !!Number(localStorage._printProtocol)
                    , y = function() {
                    function e() {
                        (0,
                            r.default)(this, e),
                            this._connected = !1,
                            this.WEBSOCKET_CONNECTED = "WEBSOCKET_CONNECTED",
                            this.WEBSOCKET_CLOSED = "WEBSOCKET_CLOSED",
                            this.WEBSOCKET_ERROR = "WEBSOCKET_ERROR",
                            this.TAFLINK_INITED = "TAFLINK_INITED",
                            this.delayWup = [],
                            this.delayListener = []
                    }
                    return (0,
                        u.default)(e, [{
                        key: "setTafHandler",
                        value: function(e) {
                            var t = l.default.now();
                            h.default.initTafTime = f.default.initTafTime = t;
                            var i = Math.max(h.default.startTime, f.default.startTime);
                            d.default.log("%c[TIME] initTafTime=" + (t - i), "color:#A23400;background:#FFF5C2"),
                                this._taf = e,
                                this._taf.connected ? this._onConnected() : this._taf.addListener(this.WEBSOCKET_CONNECTED, this._onConnected.bind(this)),
                                h.default._onYYData(this.TAFLINK_INITED),
                                f.default._onYYData(this.TAFLINK_INITED)
                        }
                    }, {
                        key: "_onConnected",
                        value: function() {
                            this._ping(),
                                o.default.add(this._ping, this, 1e4);
                            var e = this;
                            this.delayWup.forEach(function(t) {
                                var i = t.servantName
                                    , a = t.funcName
                                    , s = t.data
                                    , n = t.callback
                                    , r = t.once
                                    , u = t.iRequestId;
                                e.sendWup(i, a, s, n, r, u)
                            }),
                                this.delayWup = [],
                                this.delayListener.forEach(function(t) {
                                    var i = t.p0
                                        , a = t.p1
                                        , s = t.p2;
                                    switch (i) {
                                        case "add":
                                            e.addListener(a, s);
                                            break;
                                        case "remove":
                                            e.removeListener(a, s);
                                            break;
                                        case "dispatch":
                                            e.dispatch(a, s)
                                    }
                                }),
                                this.delayListener = []
                        }
                    }, {
                        key: "_ping",
                        value: function(e, t) {
                            if (this.connected) {
                                var i = new c.default.VideoGatewayProxy2VGPingReq;
                                i.lLocalTime = .001 * Date.now() >> 0,
                                    this._taf.sendWup("videogateway", "videoGatewayProxy2VGPing", i)
                            }
                        }
                    }, {
                        key: "getUserId",
                        value: function() {
                            return this._taf.getUserId()
                        }
                    }, {
                        key: "sendWup",
                        value: function(e, t, i) {
                            var a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null
                                , s = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4]
                                , n = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : -1;
                            this.connected ? this._taf.sendWup2 ? this._taf.sendWup2(e, t, i, a, s, n) : this._taf.sendWup(e, t, i, a, s, n) : this.delayWup.push({
                                servantName: e,
                                funcName: t,
                                data: i,
                                callback: a,
                                once: s,
                                iRequestId: n
                            })
                        }
                    }, {
                        key: "sendYY",
                        value: function(e, t) {
                            var a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0
                                , n = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3]
                                , r = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4]
                                , u = e.constructor.name
                                , o = p.default[u]
                                , l = new c.default.GetInfoFromVGReq;
                            l.lUid = a || 0,
                                l.sMsg = new window.Taf.BinBuffer(e.marshall().buffer),
                                l.sProtoName = "yy",
                                l.iUri = o || 0,
                                l.lSid = 0,
                                l.tId = this.getUserId(),
                            m && d.default.log("%c>>>>>>> " + u, s("#009100"), e);
                            var h = r ? "getInfoFromCdnVG" : "getInfoFromVG";
                            this.sendWup("videogateway", h, l, function(a) {
                                if (0 != a.sMsg.len) {
                                    if (a.lUid == l.lUid) {
                                        var n = new DataView(a.sMsg.buffer)
                                            , o = new v.default(n);
                                        if (!(u = p.default[o.uri]))
                                            throw printGateway || d.default.log("%c<<<<<<< %crspWup:%c GetInfoFromVG", s("#0000E3"), s("black"), s("#0000E3"), "videogateway", a),
                                                new Error("[x] Unmatched protocol, uri=" + (o.uri >> 8) + " resCode=" + o.resCode + " len=" + o.len);
                                        var h = o
                                            , f = null;
                                        try {
                                            f = r ? i(94)("./" + u).default : i(126)("./" + u).default
                                        } catch (e) {
                                            d.default.warn("[x] Unmatched protocol", o.uri >> 8, u)
                                        }
                                        f && (h = new f).unmarshall(o),
                                        m && d.default.log("%c<<<<<<< " + u, s("#0000E3"), h),
                                            "function" == typeof t ? t(h) : this.dispatch(o.uri, h)
                                    }
                                } else
                                    d.default.warn("GetInfoFromVG response an empty pkg.", e, l, a)
                            }
                                .bind(this), n)
                        }
                    }, {
                        key: "addListener",
                        value: function(e, t) {
                            this.connected ? this._taf.addListener(e, t) : this.delayListener.push({
                                p0: "add",
                                p1: e,
                                p2: t
                            })
                        }
                    }, {
                        key: "removeListener",
                        value: function(e, t) {
                            this.connected ? this._taf.removeListener(e, t) : this.delayListener.push({
                                p0: "remove",
                                p1: e,
                                p2: t
                            })
                        }
                    }, {
                        key: "dispatch",
                        value: function(e, t) {
                            this.connected ? this._taf.dispatch(e, t) : this.delayListener.push({
                                p0: "dispatch",
                                p1: e,
                                p2: t
                            })
                        }
                    }, {
                        key: "inited",
                        get: function() {
                            return !!this._taf
                        }
                    }, {
                        key: "connected",
                        get: function() {
                            return this._taf && this._taf.connected
                        }
                    }]),
                        e
                }()
                    , _ = window.TafMx || {};
                window.TafMx = _,
                    _.UriMapping = _.UriMapping || {},
                    _.WupMapping = _.WupMapping || {},
                    (0,
                        n.default)(_.UriMapping, {
                        8102: c.default.LivingStreamInfoNotice,
                        8103: c.default.LivingStreamEndNotice
                    }),
                    (0,
                        n.default)(_.WupMapping, {
                        getInfoFromVG: c.default.GetInfoFromVGRsp,
                        GetInfoFromVG: c.default.GetInfoFromVGRsp,
                        getInfoFromCdnVG: c.default.GetInfoFromVGRsp,
                        videoGatewayProxy2VGPing: c.default.VideoGatewayProxy2VGPingRsp,
                        VideoGatewayProxy2VGPing: c.default.VideoGatewayProxy2VGPingRsp,
                        doLaunch: c.default.LiveLaunchRsp,
                        getLivingInfo: c.default.GetLivingInfoRsp,
                        getCdnTokenInfoEx: c.default.GetCdnTokenExRsp,
                        getLivingStreamInfo: c.default.GetLivingStreamInfoRsp
                    });
                var S = new y;
                t.default = S
            }
            , function(e, t, i) {
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }),
                    t.default = {
                        STREAM_UNKNOWN: 0,
                        AUDIO_SPEEX: 0,
                        AUDIO_AACPLUS: 1,
                        AUDIO_SILK: 2,
                        AUDIO_AAC_44100HZ_STEREO_128KBPS: 35,
                        AUDIO_AAC_44100HZ_STEREO_160KBPS: 36,
                        AUDIO_AAC_44100HZ_STEREO_192KBPS: 37,
                        AUDIO_ELD_AAC_44100HZ_STEREO: 38,
                        AUDIO_ELD_AAC_SBR_44100HZ_STEREO: 39,
                        AUDIO_MP3: 50,
                        AUDIO_NELLYMOSER: 54,
                        VIDEO_264_START: 401,
                        VIDEO_H264_100K: 401,
                        VIDEO_H264_500K: 405,
                        VIDEO_H264_800K: 408,
                        VIDEO_H264_1200K: 412,
                        VIDEO_H264_1500K: 415,
                        VIDEO_H264_2000K: 420,
                        VIDEO_H264_3000K: 430,
                        VIDEO_H264_4000K: 440,
                        VIDEO_H264_6000K: 460,
                        VIDEO_H264_8000K: 480,
                        VIDEO_H264_END: 480,
                        VIDEO_265_START: 503,
                        VIDEO_H265_300K: 503,
                        VIDEO_H265_500K: 505,
                        VIDEO_H265_800K: 508,
                        VIDEO_H265_1200K: 512,
                        VIDEO_H265_1500K: 515,
                        VIDEO_H265_2000K: 520,
                        VIDEO_H265_3000K: 530,
                        VIDEO_H265_4000K: 540,
                        VIDEO_H265_6000K: 560,
                        VIDEO_H265_8000K: 580,
                        VIDEO_H265_END: 580,
                        VIDEO_H264_EX_BASE: 1e3,
                        VIDEO_H264_EX_START: 1005,
                        VIDEO_H264_EX_500K: 1005,
                        VIDEO_H264_EX_1M: 1010,
                        VIDEO_H264_EX_5M: 1050,
                        VIDEO_H264_EX_8M: 1080,
                        VIDEO_H264_EX_10M: 1100,
                        VIDEO_H264_EX_12M: 1120,
                        VIDEO_H264_EX_15M: 1150,
                        VIDEO_H264_EX_20M: 1200,
                        VIDEO_H264_EX_END: 1200,
                        VIDEO_H265_EX_BASE: 4e3,
                        VIDEO_H265_EX_START: 4005,
                        VIDEO_H265_EX_500K: 4005,
                        VIDEO_H265_EX_1M: 4010,
                        VIDEO_H265_EX_5M: 4050,
                        VIDEO_H265_EX_8M: 4080,
                        VIDEO_H265_EX_10M: 4100,
                        VIDEO_H265_EX_12M: 4120,
                        VIDEO_H265_EX_15M: 4150,
                        VIDEO_H265_EX_20M: 4200,
                        VIDEO_H265_EX_END: 4200
                    }
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(2))
                    , u = a(i(4))
                    , o = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.seq = 0,
                            this.uri = 0,
                            this.from = 0,
                            this.uid = 0,
                            this.payload = null
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new u.default;
                            return e.setUri(r.default.PP2pSliceData),
                                e.pushUInt64(this.seq),
                                e.pushUInt32(this.uri),
                                e.pushUInt8(this.from),
                                e.pushUInt64(this.uid),
                                e.pushUint8Array(this.payload),
                                e.marshall()
                        }
                    }, {
                        key: "unmarshall",
                        value: function(e) {
                            return this.seq = e.popUInt64(),
                                this.uri = e.popUInt32(),
                                this.from = e.popUInt8(),
                                this.uid = e.popUInt64(),
                                this.payload = e.popUint8Array(),
                                this
                        }
                    }, {
                        key: "isAudio",
                        get: function() {
                            return this.uri == r.default.PP2pSliceAudioData
                        }
                    }, {
                        key: "isVideo",
                        get: function() {
                            return this.uri == r.default.PP2pSliceVideoData
                        }
                    }, {
                        key: "isCtrlSlice",
                        get: function() {
                            return this.uri == r.default.PP2pSliceControlData
                        }
                    }, {
                        key: "isSubSlice",
                        get: function() {
                            return 2 == this.from
                        }
                    }, {
                        key: "isResend",
                        get: function() {
                            return 3 == this.from && 0 == this.uid
                        }
                    }, {
                        key: "isPatchSlice",
                        get: function() {
                            return 4 == this.from
                        }
                    }, {
                        key: "isFromPeer",
                        get: function() {
                            return 0 !== this.uid
                        }
                    }]),
                        e
                }();
                t.default = o
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(4))
                    , u = a(i(129))
                    , o = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.sid = 0,
                            this.fuzzyParam = new u.default
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new r.default(!1);
                            return e.pushUInt64(this.sid),
                                e.pushUint8ArrayWithoutLen(this.fuzzyParam.marshall()),
                                e.marshall()
                        }
                    }]),
                        e
                }();
                t.default = o
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(6))
                    , n = a(i(0))
                    , r = a(i(1))
                    , u = a(i(2))
                    , o = a(i(4))
                    , l = (a(i(12)),
                    a(i(135)))
                    , d = a(i(127))
                    , h = function() {
                    function e() {
                        (0,
                            n.default)(this, e),
                            this.version = 0,
                            this.uid = 0,
                            this.streamGroupIds = [],
                            this.clientAppid = 0,
                            this.clientType = 0,
                            this.loginStamp = 0,
                            this.videoGroupId = 0,
                            this.tcpId = 0,
                            this.commandType = 0,
                            this.fastAccessInterval = 0,
                            this.cookie = "",
                            this.localIps = [],
                            this.localPort = 0,
                            this.vpToken = new l.default,
                            this.apToken = new d.default,
                            this.token = "",
                            this.sdkVersion = 0,
                            this.tokenVersion = 0,
                            this.tokens = new s.default,
                            this.audioCodecType = [],
                            this.serviceType = 0
                    }
                    return (0,
                        r.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new o.default;
                            return e.setUri(u.default.PLoginVideoProxyUniformly),
                                e.pushUInt8(this.version),
                                e.pushUInt64(this.uid),
                                e.pushUInt32(this.streamGroupIds.length),
                                this.streamGroupIds.forEach(function(t) {
                                    e.pushUint8ArrayWithoutLen(t.marshall())
                                }),
                                e.pushUInt32(this.clientAppid),
                                e.pushUInt8(this.clientType),
                                e.pushUInt32(this.loginStamp),
                                e.pushUInt32(this.videoGroupId),
                                e.pushUInt8(this.tcpId),
                                e.pushUInt8(this.commandType),
                                e.pushUInt32(this.fastAccessInterval),
                                e.pushString(this.cookie),
                                e.pushUInt32Vector(this.localIps),
                                e.pushUInt16(this.localPort),
                                e.pushUint8ArrayWithoutLen(this.vpToken.marshall()),
                                e.pushUint8ArrayWithoutLen(this.apToken.marshall()),
                                e.pushString(this.token),
                                e.pushUInt32(this.sdkVersion),
                                e.pushUInt32(this.tokenVersion),
                                e.pushUInt32(this.tokens.size),
                                this.tokens.forEach(function(t, i) {
                                    e.pushUint8ArrayWithoutLen(i.marshall()),
                                        e.pushString(t)
                                }),
                                e.pushUInt32Vector(this.audioCodecType),
                                e.pushUInt32(this.serviceType),
                                e.marshall()
                        }
                    }]),
                        e
                }();
                t.default = h
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(2))
                    , u = a(i(4))
                    , o = a(i(12))
                    , l = a(i(8))
                    , d = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.streamGroupId = new o.default,
                            this.uid = 0,
                            this.seqNum = 0,
                            this.priority = 0,
                            this.lastKeyFrame = 0,
                            this.playTime = 0,
                            this.frameNum = 0,
                            this.stampc = 0,
                            this.ext = 0,
                            this.checkSum = 0,
                            this.streamData = null,
                            this.dts = l.default.UintMax,
                            this.uplinkResendTimes = 0,
                            this.isDownlinkResend = !1,
                            this.fromPeer = !1,
                            this.recvOsTime = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "reset",
                        value: function() {
                            this.streamGroupId = new o.default,
                                this.uid = 0,
                                this.seqNum = 0,
                                this.priority = 0,
                                this.lastKeyFrame = 0,
                                this.playTime = 0,
                                this.frameNum = 0,
                                this.stampc = 0,
                                this.ext = 0,
                                this.checkSum = 0,
                                this.streamData = null,
                                this.uplinkResendTimes = 0,
                                this.dts = l.default.UintMax,
                                this.isDownlinkResend = !1,
                                this.fromPeer = !1,
                                this.recvOsTime = 0
                        }
                    }, {
                        key: "marshall",
                        value: function() {
                            var e = new u.default;
                            return e.setUri(r.default.PStreamData3),
                                e.pushUint8ArrayWithoutLen(this.streamGroupId.marshall()),
                                e.pushUInt64(this.uid),
                                e.pushUInt32(this.seqNum),
                                e.pushUInt8(this.priority),
                                e.pushUInt32(this.lastKeyFrame),
                                e.pushUInt16(this.playTime),
                                e.pushUInt16(this.frameNum),
                                e.pushUInt32(this.stampc),
                                e.pushUInt32(this.ext),
                                e.pushUInt8(this.checkSum),
                                e.pushUint8Array32(this.streamData),
                                e.marshall()
                        }
                    }, {
                        key: "unmarshall",
                        value: function(e) {
                            return this.streamGroupId.unmarshall(e),
                                this.uid = e.popUInt64(),
                                this.seqNum = e.popUInt32(),
                                this.priority = e.popUInt8(),
                                this.lastKeyFrame = e.popUInt32(),
                                this.playTime = e.popUInt16(),
                                this.frameNum = e.popUInt16(),
                                this.stampc = e.popUInt32(),
                                this.ext = e.popUInt32(),
                                this.checkSum = e.popUInt8(),
                                this.streamData = e.popUint8Array32(),
                                this
                        }
                    }, {
                        key: "getFrameTime",
                        value: function() {
                            if (this.dts !== l.default.UintMax)
                                return this.dts;
                            if (!this.isFirstSeq)
                                return l.default.UintMax;
                            var e = 0;
                            0 === this.frameType && (e = this.streamData[0],
                                e += this.streamData[1] << 8,
                                e += this.streamData[2] << 16,
                                e += this.streamData[3] << 24 >>> 0,
                                e += 4);
                            var t = (255 & this.streamData[e + 7]) << 24 >>> 0
                                , i = (255 & this.streamData[e + 4]) << 16
                                , a = (255 & this.streamData[e + 5]) << 8
                                , s = 255 & this.streamData[e + 6];
                            return this.dts = t + i + a + s,
                                this.dts
                        }
                    }, {
                        key: "isVideo",
                        get: function() {
                            return this.streamGroupId.isVideoStream
                        }
                    }, {
                        key: "isAudio",
                        get: function() {
                            return this.streamGroupId.isAudioStream
                        }
                    }, {
                        key: "frameType",
                        get: function() {
                            return 3 & this.priority
                        }
                    }, {
                        key: "isFirstSeq",
                        get: function() {
                            return 0 != (4096 & this.playTime)
                        }
                    }, {
                        key: "isUplinkResend",
                        get: function() {
                            return 0 != (32768 & this.playTime)
                        }
                    }, {
                        key: "isFastAccessPacket",
                        get: function() {
                            return 0 != (512 & this.playTime)
                        }
                    }, {
                        key: "isForceSubscribePacket",
                        get: function() {
                            return 0 != (1024 & this.playTime)
                        }
                    }, {
                        key: "isRawStreamInput",
                        get: function() {
                            return 0 != (16384 & this.playTime)
                        }
                    }, {
                        key: "isServerResend",
                        get: function() {
                            return 0 != (8192 & this.playTime)
                        }
                    }, {
                        key: "hasCheckSum",
                        get: function() {
                            return 0 != (2048 & this.playTime)
                        }
                    }]),
                        e
                }();
                t.default = d
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(2))
                    , u = a(i(4))
                    , o = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.uid = 0,
                            this.stampc = 0,
                            this.loginStamp = 0,
                            this.uplinkBw = 0,
                            this.availPeers = 0,
                            this.bPunched = !1,
                            this.tcpEstableIds = 0,
                            this.tcpId = 0,
                            this.vipUser = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new u.default;
                            return e.setUri(r.default.PVideoProxyPing3),
                                e.pushUInt64(this.uid),
                                e.pushUInt32(this.stampc),
                                e.pushUInt32(this.loginStamp),
                                e.pushUInt32(this.uplinkBw),
                                e.pushUInt16(this.availPeers),
                                e.pushBool(this.bPunched),
                                e.pushUInt32(this.tcpEstableIds),
                                e.pushUInt8(this.tcpId),
                                e.pushUInt8(this.vipUser),
                                e.marshall()
                        }
                    }]),
                        e
                }();
                t.default = o
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(3))
                    , u = (a(i(11)),
                    a(i(5)))
                    , o = a(i(265))
                    , l = a(i(199))
                    , d = a(i(197))
                    , h = a(i(268))
                    , f = 0
                    , c = function() {
                    function e(t) {
                        var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "flv"
                            , a = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2]
                            , n = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
                        (0,
                            s.default)(this, e),
                            this.handler = t,
                            this.videoType = i,
                            this.isLive = a,
                            this.isPureAudio = n,
                            this._num_ = ++f,
                            this.remuxer = new d.default(this),
                            this.parser = "ts" === i ? new o.default(this,this.remuxer) : new l.default(this,this.remuxer),
                            this.JITTER_BUFMIN = 1e3,
                            this.JITTER_BUFLEN = 4e3,
                            this.JITTER_BUFMAX = 8e3,
                            this.playing = !1,
                            this.lastPlayTime = 0,
                            this.lastCheckPlayTime = 0,
                            this.paused = !1,
                            this.pausedTs = 0,
                            this.maxGop = 0,
                            this.playStartTime = 0,
                            this.delayReset = !1,
                            this.isPlayerError = !1,
                            this.isErrorEvent = !1,
                            this.tryPlayAgainTimout = 0,
                            this.onUpdateErrorBind = this.onUpdateError.bind(this),
                            this.onAudioUpdateEndBind = this.onAudioUpdateEnd.bind(this),
                            this.onVideoUpdateEndBind = this.onVideoUpdateEnd.bind(this),
                            this.onMediaSourceOpenBind = this.onMediaSourceOpen.bind(this),
                            this.onVideoErrorBind = this.onVideoError.bind(this),
                            this.mediaSource = new MediaSource,
                            this.mediaSource.addEventListener("sourceopen", this.onMediaSourceOpenBind),
                            this.h264SeiInfos = new h.default(this),
                            this.video = document.createElement("video"),
                            this.video.src = URL.createObjectURL(this.mediaSource),
                            this.video.addEventListener("error", this.onVideoErrorBind),
                            this.audioSourceBuffer = null,
                            this.videoSourceBuffer = null,
                            this.audioCodec = null,
                            this.videoCodec = null,
                            this.audioSegments = [],
                            this.videoSegments = [],
                            this.width = 1280,
                            this.height = 720,
                            this.playbackrateChangeAccess = !0,
                            this.printJitter = !!Number(localStorage._printJitter);
                        var u = navigator.userAgent.toLowerCase();
                        this.isAndroid = -1 !== u.indexOf("Android"),
                        -1 == r.default.getLevel() && window.chrome && (window.chrome.mse = this)
                    }
                    return (0,
                        n.default)(e, [{
                        key: "destroy",
                        value: function() {
                            if (r.default.log("MSEPlayer.destroy"),
                                this.playing = !1,
                                this.lastPlayTime = 0,
                                this.playStartTime = 0,
                                this.lastCheckPlayTime = 0,
                            this.handler && (this.handler.onVideoStop(this.video, !!this.videoSourceBuffer),
                                this.handler = null),
                                this.remuxer.destroy(),
                                this.parser.destroy(),
                                this.audioCodec = null,
                                this.videoCodec = null,
                                this.audioSegments = [],
                                this.videoSegments = [],
                            this.audioSourceBuffer && (this.audioSourceBuffer.removeEventListener("updateend", this.onAudioUpdateEndBind),
                                this.audioSourceBuffer.removeEventListener("error", this.onUpdateErrorBind),
                                this.audioSourceBuffer = null),
                            this.videoSourceBuffer && (this.videoSourceBuffer.removeEventListener("updateend", this.onVideoUpdateEndBind),
                                this.videoSourceBuffer.removeEventListener("error", this.onUpdateErrorBind),
                                this.videoSourceBuffer = null),
                                this.mediaSource) {
                                this.mediaSource.removeEventListener("sourceopen", this.onMediaSourceOpenBind);
                                for (var e = this.mediaSource.sourceBuffers; e.length; )
                                    this.mediaSource.removeSourceBuffer(e[0]);
                                this.mediaSource = this.onMediaSourceOpenBind = null
                            }
                            this.onAudioUpdateEndBind = this.onVideoUpdateEndBind = this.onUpdateErrorBind = null,
                            this.video && (this.video.removeEventListener("error", this.onVideoErrorBind),
                                this.video.pause(),
                                this.video.src = "",
                                this.video = null),
                                this.playbackrateChangeAccess = !0
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            if (r.default.log("MSEPlayer.reset"),
                                this.handler.onVideoStop(this.video, !!this.videoSourceBuffer),
                                this.JITTER_BUFMIN = 1e3,
                                this.JITTER_BUFLEN = 4e3,
                                this.JITTER_BUFMAX = 8e3,
                                this.playing = !1,
                                this.lastPlayTime = 0,
                                this.playStartTime = 0,
                                this.lastCheckPlayTime = 0,
                                this.audioCodec = null,
                                this.videoCodec = null,
                                this.audioSegments = [],
                                this.videoSegments = [],
                            this.paused && this.handler.onPlayResume(u.default.now()),
                                this.paused = !1,
                                this.pausedTs = 0,
                                this.maxGop = 0,
                                clearTimeout(this.tryPlayAgainTimout),
                            this.audioSourceBuffer && (this.audioSourceBuffer.removeEventListener("updateend", this.onAudioUpdateEndBind),
                                this.audioSourceBuffer.removeEventListener("error", this.onUpdateErrorBind),
                                this.audioSourceBuffer = null),
                            this.videoSourceBuffer && (this.videoSourceBuffer.removeEventListener("updateend", this.onVideoUpdateEndBind),
                                this.videoSourceBuffer.removeEventListener("error", this.onUpdateErrorBind),
                                this.videoSourceBuffer = null),
                                this.mediaSource) {
                                this.mediaSource.removeEventListener("sourceopen", this.onMediaSourceOpenBind);
                                for (var e = this.mediaSource.sourceBuffers; e.length; )
                                    this.mediaSource.removeSourceBuffer(e[0])
                            }
                            this.mediaSource = new MediaSource,
                                this.mediaSource.addEventListener("sourceopen", this.onMediaSourceOpenBind),
                            this.video && (this.video.removeEventListener("error", this.onVideoErrorBind),
                                this.video.pause(),
                                this.video.src = "",
                                this.video = null),
                                this.video = document.createElement("video"),
                                this.video.src = URL.createObjectURL(this.mediaSource),
                                this.video.addEventListener("error", this.onVideoErrorBind),
                                this.playbackrateChangeAccess = !0
                        }
                    }, {
                        key: "setPushGop",
                        value: function(e) {
                            this.parser.setPushGop(e)
                        }
                    }, {
                        key: "getPlayStat",
                        value: function() {
                            return this.parser.getPlayStat()
                        }
                    }, {
                        key: "getPlayVideo",
                        value: function() {
                            return this.video
                        }
                    }, {
                        key: "getBufferLen",
                        value: function() {
                            var e = 0;
                            if (this.video) {
                                var t = this.video.buffered;
                                t.length > 0 && (e = 1e3 * (t.end(t.length - 1) - this.video.currentTime) >> 0)
                            }
                            return e
                        }
                    }, {
                        key: "getParserBufLen",
                        value: function() {
                            return this.parser.getParserBufLen()
                        }
                    }, {
                        key: "getCurrentDts",
                        value: function() {
                            return this.remuxer.getInitDts() < 0 ? 0 : Math.round(1e3 * this.video.currentTime) + this.remuxer.getInitDts()
                        }
                    }, {
                        key: "getCurrentTime",
                        value: function() {
                            return Math.round(1e3 * this.video.currentTime)
                        }
                    }, {
                        key: "getCurrentRealTime",
                        value: function() {
                            return this.video ? Math.round(1e3 * this.video.currentTime) + this.remuxer.getInitDts() : 0
                        }
                    }, {
                        key: "appendFlv",
                        value: function(e) {
                            this.parser.parseFlv(e)
                        }
                    }, {
                        key: "appendTs",
                        value: function(e) {
                            this.parser.parseTs(e)
                        }
                    }, {
                        key: "saveH264SeiData",
                        value: function(e, t) {
                            this.h264SeiInfos.add(e, t)
                        }
                    }, {
                        key: "setPlaybackrateAccess",
                        value: function(e) {
                            this.playbackrateChangeAccess = e
                        }
                    }, {
                        key: "checkBuffer",
                        value: function() {
                            if (!this.video.paused) {
                                var e = u.default.now()
                                    , t = this.video.buffered
                                    , i = t.length
                                    , a = this.getBufferLen();
                                if (0 === this.video.currentTime && 0 !== this.lastPlayTime)
                                    return r.default.warn("MSEPlayer.checkBuffer onPlayerError(false) lastPlayTime=" + this.lastPlayTime + " bufLen=" + a),
                                        this._onPlayerError(!1),
                                        void (this.lastPlayTime = 0);
                                if (this.lastPlayTime = this.video.currentTime,
                                0 !== this.playStartTime && e > this.playStartTime + 5e3 && (a > 5e3 || 0 === a))
                                    if (0 == this.video.currentTime && a > 1e3)
                                        r.default.log("####### currentTime=0 ++ bufLen=" + a),
                                            this.video.play();
                                    else if (this.playStartTime = 0,
                                    0 === this.video.currentTime && !this.isAndroid)
                                        return r.default.warn("MSEPlayer.checkBuffer onPlayerError(true) playTime=" + this.video.currentTime + " bufLen=" + a),
                                            this._onErrorEvent(6),
                                            void this._onPlayerError(!0);
                                i && this.video.currentTime - t.start(0) > 20 && (this.audioSourceBuffer && !this.audioSourceBuffer.updating && this.audioSourceBuffer.remove(0, this.video.currentTime - 10),
                                this.videoSourceBuffer && !this.videoSourceBuffer.updating && this.videoSourceBuffer.remove(0, this.video.currentTime - 10))
                            }
                        }
                    }, {
                        key: "_onPlayerError",
                        value: function(e) {
                            this.isPlayerError || (this.isPlayerError = !0,
                                this.handler.onPlayerError(e))
                        }
                    }, {
                        key: "_onErrorEvent",
                        value: function(e) {
                            this.isErrorEvent || (this.isErrorEvent = !0,
                            this.handler.onErrorEvent && this.handler.onErrorEvent({
                                type: e
                            }))
                        }
                    }, {
                        key: "onAvcCfgChange",
                        value: function() {
                            return r.default.log("MSEPlayer.onAvcCfgChange"),
                                this.getBufferLen() < 500 ? (r.default.log("MSEPlayer.onAvcCfgChange reset player"),
                                    this.reset(),
                                    this.delayReset = !1,
                                    !1) : (this.delayReset = !0,
                                    !0)
                        }
                    }, {
                        key: "onRestart",
                        value: function() {
                            r.default.log("MSEPlayer.onRestart"),
                                this.reset()
                        }
                    }, {
                        key: "onGop",
                        value: function(e) {
                            this.handler.onGop && this.handler.onGop(e),
                            e > this.maxGop && (this.maxGop = e,
                                r.default.log("MSEPlayer.onGop update maxGop=" + this.maxGop))
                        }
                    }, {
                        key: "getMaxGop",
                        value: function() {
                            return this.maxGop
                        }
                    }, {
                        key: "setVolume",
                        value: function(e) {
                            this.video && (this.video.volume = e)
                        }
                    }, {
                        key: "getVolume",
                        value: function() {
                            return this.video ? this.video.volume : -1
                        }
                    }, {
                        key: "setMuted",
                        value: function(e) {
                            this.video && (this.video.muted = e,
                                r.default.log("MSEPlayer.setMuted " + e + " hasVideo=" + !!this.videoSourceBuffer + " hasAudio=" + !!this.audioSourceBuffer))
                        }
                    }, {
                        key: "getMuted",
                        value: function() {
                            return this.video ? this.video.muted : -1
                        }
                    }, {
                        key: "setResolution",
                        value: function(e, t) {
                            r.default.log("MSEPlayer.setResolution w/h=" + e + "/" + t),
                                this.width = e,
                                this.height = t
                        }
                    }, {
                        key: "getWidth",
                        value: function() {
                            return this.width
                        }
                    }, {
                        key: "getHeight",
                        value: function() {
                            return this.height
                        }
                    }, {
                        key: "onInitSegment",
                        value: function(e) {
                            e.audioCodec && (this.audioCodec = e.audioCodec),
                            e.videoCodec && (this.videoCodec = e.videoCodec),
                            this.isMediaSourceOpen && this.initSourceBuffer(),
                            e.audioMoov && this.audioSegments.push(e.audioMoov),
                            e.videoMoov && this.videoSegments.push(e.videoMoov),
                                this.playStartTime = 0
                        }
                    }, {
                        key: "onFragParsing",
                        value: function(e) {
                            "audio" === e.type ? this.audioSegments.push(e.data) : "video" === e.type && this.videoSegments.push(e.data)
                        }
                    }, {
                        key: "onFragParsed",
                        value: function() {
                            this.audioSourceBuffer && this.appendBuffer("audio"),
                            this.videoSourceBuffer && this.appendBuffer("video"),
                                this.triggerPlay()
                        }
                    }, {
                        key: "initSourceBuffer",
                        value: function() {
                            if (this.audioCodec && !this.audioSourceBuffer) {
                                r.default.log("MSEPlayer.initSourceBuffer audio codec=" + this.audioCodec);
                                try {
                                    this.audioSourceBuffer = this.mediaSource.addSourceBuffer("video/mp4;codecs=" + this.audioCodec),
                                        this.audioSourceBuffer.addEventListener("updateend", this.onAudioUpdateEndBind),
                                        this.audioSourceBuffer.addEventListener("error", this.onUpdateErrorBind)
                                } catch (e) {
                                    return r.default.warn("MSEPlayer.initSourceBuffer audio err=" + e.message),
                                        this._onErrorEvent(4),
                                        void this._onPlayerError(!0)
                                }
                            }
                            if (this.videoCodec && !this.videoSourceBuffer) {
                                r.default.log("MSEPlayer.initSourceBuffer video codec=" + this.videoCodec);
                                try {
                                    this.videoSourceBuffer = this.mediaSource.addSourceBuffer("video/mp4;codecs=" + this.videoCodec),
                                        this.videoSourceBuffer.addEventListener("updateend", this.onVideoUpdateEndBind),
                                        this.videoSourceBuffer.addEventListener("error", this.onUpdateErrorBind)
                                } catch (e) {
                                    r.default.warn("MSEPlayer.initSourceBuffer video err=" + e.message),
                                        this._onErrorEvent(5),
                                        this._onPlayerError(!0)
                                }
                            }
                        }
                    }, {
                        key: "appendBuffer",
                        value: function(e) {
                            if (0 != this.mediaSource.sourceBuffers.length && !this.isPlayerError)
                                if ("audio" == e) {
                                    if (this.audioSegments.length > 0 && this.audioSourceBuffer && !this.audioSourceBuffer.updating) {
                                        var t = this.audioSegments.shift();
                                        try {
                                            this.audioSourceBuffer.appendBuffer(t)
                                        } catch (e) {
                                            r.default.warn("MSEPlayer.appendBuffer audio err=" + e.message),
                                                this._onErrorEvent(7),
                                                this._onPlayerError(!0)
                                        }
                                    }
                                } else {
                                    if ("video" != e)
                                        throw new Error("MSEPlayer.appendBuffer type error! Valide type is audio or video.");
                                    if (this.videoSegments.length > 0 && this.videoSourceBuffer && !this.videoSourceBuffer.updating) {
                                        var i = this.videoSegments.shift();
                                        try {
                                            this.videoSourceBuffer.appendBuffer(i)
                                        } catch (e) {
                                            r.default.warn("MSEPlayer.appendBuffer video err=" + e.message),
                                                this._onErrorEvent(8),
                                                this._onPlayerError(!0)
                                        }
                                    }
                                }
                        }
                    }, {
                        key: "triggerPlay",
                        value: function() {
                            if (!this.playing && this.isMediaSourceOpen) {
                                this.playing = !0,
                                    this.playStartTime = u.default.now();
                                var e = !!this.videoSourceBuffer;
                                this.video.play(),
                                    this.handler.onPlayVideo(this.video, this.width, this.height, e),
                                    clearTimeout(this.tryPlayAgainTimout),
                                    this.tryPlayAgainTimout = setTimeout(this.setPlayAgain.bind(this), 100)
                            }
                        }
                    }, {
                        key: "setPlayAgain",
                        value: function() {
                            this.video && this.video.play()
                        }
                    }, {
                        key: "onH264Sei",
                        value: function(e, t) {
                            this.handler.onSendSeiData(e, t, this.video.currentTime)
                        }
                    }, {
                        key: "onMediaSourceOpen",
                        value: function() {
                            this.mediaSource.removeEventListener("sourceopen", this.onMediaSourceOpenBind),
                            (this.audioSegments.length > 0 || this.videoSegments.length > 0) && (this.initSourceBuffer(),
                                this.appendBuffer("audio"),
                                this.appendBuffer("video"),
                                this.triggerPlay())
                        }
                    }, {
                        key: "onAudioUpdateEnd",
                        value: function() {
                            this.appendBuffer("audio"),
                                this.checkAppendOver()
                        }
                    }, {
                        key: "onVideoUpdateEnd",
                        value: function() {
                            this.appendBuffer("video"),
                                this.checkAppendOver()
                        }
                    }, {
                        key: "checkAppendOver",
                        value: function() {
                            0 === this.videoSegments.length && 0 === this.audioSegments.length && (this.videoSourceBuffer && this.videoSourceBuffer.updating || this.audioSourceBuffer && this.audioSourceBuffer.updating || this.handler.onSBUpdateEnd && this.handler.onSBUpdateEnd())
                        }
                    }, {
                        key: "onUpdateError",
                        value: function(e) {
                            r.default.warn("MSEPlayer.onUpdateError", e)
                        }
                    }, {
                        key: "onVideoError",
                        value: function(e) {
                            var t = "";
                            if (this.video.error) {
                                var i = this.video.error.code;
                                t = " errCode=" + i + " " + ["Unknow", "用户终止", "网络错误", "解码错误", "格式不支持"][i],
                                3 != i && 4 != i || (this._onErrorEvent(3 == i ? 1 : 2),
                                    this._onPlayerError(!0),
                                    localStorage.decodeabnormal = "abnormal_" + (new Date).getTime())
                            }
                            r.default.warn("MSEPlayer.onVideoError" + t)
                        }
                    }, {
                        key: "onCheckTimer",
                        value: function(e, t) {
                            if (this.playing && this.isMediaSourceOpen) {
                                var i = this.getBufferLen()
                                    , a = Number(localStorage._printBufferLen);
                                if (-1 == a || a > 0 && a == this._num_) {
                                    var s = Math.max(0, i / 100);
                                    r.default.debug(this._getTag(), "bufLen", "-".repeat(s), i)
                                }
                                if (Number(localStorage._printMseLog) && this.audioSegments && this.videoSegments && r.default.debug("MSE aSegments=" + this.audioSegments.length + " vSegments=" + this.videoSegments.length + " bufLen=" + this.getBufferLen()),
                                    !this.video.paused) {
                                    if (this.isLive && t % 4 == 0 && i > 2e4 && !Number(localStorage._localFlvTest)) {
                                        var n = .001 * (i - 8e3);
                                        this.video.currentTime += n,
                                            r.default.warn("MSEPlayer.onCheckTimer jumpTs=" + n + " bufLen=" + this.getBufferLen())
                                    }
                                    this.checkBuffer(),
                                        this.onJitterTimer();
                                    var u = this.handler.lastEmptySliceTs || 0
                                        , o = u > 0 && e - u < 3e3;
                                    !!this.videoSourceBuffer && this.pausedTs > 0 && e - this.pausedTs > 5e3 && !o && (r.default.warn("MSEPlayer.onCheckTimer pause 5 sec."),
                                        this._onErrorEvent(3),
                                        this._onPlayerError(!0))
                                }
                            }
                        }
                    }, {
                        key: "onCheckFastTimer",
                        value: function(e, t) {
                            this.playing && this.isMediaSourceOpen && !this.video.paused && (this.checkEmptyFrames(),
                                this.checkDelayReset(),
                                this.checkSensePause(e))
                        }
                    }, {
                        key: "checkEmptyFrames",
                        value: function() {
                            this.handler.hasOwnProperty("hasEmptyFrames") && this.parser.hasEmptyFrames && (this.handler.hasEmptyFrames = this.parser.hasEmptyFrames)
                        }
                    }, {
                        key: "checkDelayReset",
                        value: function() {
                            this.delayReset && this.getBufferLen() < 500 && (r.default.log("MSEPlayer.checkDelayReset reset player"),
                                this.reset(),
                                this.parser.setPaused(!1),
                                this.delayReset = !1)
                        }
                    }, {
                        key: "checkSensePause",
                        value: function(e) {
                            var t = this.video
                                , i = t.currentTime;
                            if (0 !== this.lastCheckPlayTime)
                                if (i === this.lastCheckPlayTime) {
                                    var a = this.getBufferLen();
                                    this.paused ? a > 1e3 && e - this.pausedTs > 500 && (r.default.log("####### readyState=" + t.readyState + " bufLen=" + a + " rate=" + t.playbackRate),
                                        t.currentTime += 1,
                                        i = t.currentTime) : (this.paused = !0,
                                        this.pausedTs = e,
                                        r.default.log("MSEPlayer.checkSensePause readyState=" + t.readyState + " currentTime=" + i + " bufLen=" + a),
                                        this.handler.onPlayPause(e, !!this.videoSourceBuffer))
                                } else
                                    this.paused && (this.paused = !1,
                                        this.pausedTs = 0,
                                        this.handler.onPlayResume(e, !!this.videoSourceBuffer));
                            this.lastCheckPlayTime = i
                        }
                    }, {
                        key: "printBuffer",
                        value: function(e) {
                            if (this.video) {
                                var t = this.video.buffered
                                    , i = "buffered=[" + (1e3 * t.start(0) | 0) + "," + (1e3 * t.end(0) | 0) + "]"
                                    , a = 1e3 * this.video.currentTime >> 0
                                    , s = this.getBufferLen();
                                r.default.log("MSEPlayer.printBuffer " + e + " currentTime=" + a + " bufLen=" + s + " " + i)
                            }
                        }
                    }, {
                        key: "onJitterTimer",
                        value: function(e, t) {
                            if (this.playing && ("ts" != this.videoType || this.isLive)) {
                                var i = this.getPlayVideo();
                                if (i) {
                                    var a = this.getBufferLen()
                                        , s = i.playbackRate
                                        , n = 0;
                                    if (a < this.JITTER_BUFMIN ? n = a - this.JITTER_BUFLEN : a > this.JITTER_BUFMAX && (n = a - this.JITTER_BUFMAX),
                                        this.playbackrateChangeAccess)
                                        if (0 == n) {
                                            if (1 != s) {
                                                if (s < 1 && a < this.JITTER_BUFLEN)
                                                    return;
                                                if (s > 1 && a > this.JITTER_BUFLEN)
                                                    return;
                                                i.playbackRate = 1,
                                                this.printJitter && r.default.log(this._getTag(), "JitterBuffer reset rate=1 bufLen=" + a)
                                            }
                                        } else {
                                            var u = 1 + n / 1e4;
                                            if (u = Number(u.toFixed(3)),
                                                u = Math.min(u, 1.1),
                                                u = Math.max(u, .9),
                                            Math.abs(1 - u) < .03)
                                                return;
                                            if (1 != s && Math.abs(s - u) < .03)
                                                return;
                                            i.playbackRate = u > 1 ? 1 : u,
                                            this.printJitter && r.default.log(this._getTag(), "JitterBuffer adjust=" + n + " " + s + "->" + u + " bufLen=" + a)
                                        }
                                    else
                                        i.playbackRate = 1
                                }
                            }
                        }
                    }, {
                        key: "setJitter",
                        value: function() {
                            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 3e3
                                , t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1e3
                                , i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 5e3;
                            e < t && (e = t + 1e3),
                            i < e && (i = e + 2e3),
                                this.JITTER_BUFLEN = e,
                                this.JITTER_BUFMIN = t,
                                this.JITTER_BUFMAX = i,
                                r.default.info(this._getTag() + " MSEPlayer.setJitter bufMin=" + t + " bufLen=" + e + " bufMax=" + i)
                        }
                    }, {
                        key: "_getTag",
                        value: function() {
                            var e = this.handler.constructor.name;
                            return "FlvPlayer" == e && (e = (this.handler.huyaMgr || this.handler.cdnMgr).constructor.name),
                            this._num_ + " " + e
                        }
                    }, {
                        key: "isMediaSourceOpen",
                        get: function() {
                            return this.mediaSource && "open" === this.mediaSource.readyState
                        }
                    }]),
                        e
                }();
                t.default = c
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                t.__esModule = !0;
                var s = a(i(278))
                    , n = a(i(14));
                t.default = function() {
                    return function(e, t) {
                        if (Array.isArray(e))
                            return e;
                        if ((0,
                            s.default)(Object(e)))
                            return function(e, t) {
                                var i = []
                                    , a = !0
                                    , s = !1
                                    , r = void 0;
                                try {
                                    for (var u, o = (0,
                                        n.default)(e); !(a = (u = o.next()).done) && (i.push(u.value),
                                    !t || i.length !== t); a = !0)
                                        ;
                                } catch (e) {
                                    s = !0,
                                        r = e
                                } finally {
                                    try {
                                        !a && o.return && o.return()
                                    } finally {
                                        if (s)
                                            throw r
                                    }
                                }
                                return i
                            }(e, t);
                        throw new TypeError("Invalid attempt to destructure non-iterable instance")
                    }
                }()
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                function s(e) {
                    e.groupId.equal(p.default.streamId) ? S.default.getStream(e.streamIndex).recvSubStream(e) : U.sendSubStreamRes(e.uid, e.streamIndex, 0, 0, v.default.SubResCode.INVALID_STREAMID)
                }
                function n(e) {
                    e.groupId.equal(p.default.streamId) && S.default.getStream(e.streamIndex).recvSubStreamRes(e)
                }
                function r(e) {
                    e.payload ? y.default.opened && p.default._onYYData(m.default.PP2pSliceData, e) : _.default.delNode(e.uid, v.default.DEL_REASON.EMPTY_SLICE)
                }
                function u(e) {
                    if (e.isPatchSlice) {
                        var t = e.payload.length + 10;
                        P.default.add(P.default.keys.SERVER_TOTAL_STREAM_FLOW, t),
                            P.default.add(P.default.keys.PATCH_FLOW, t)
                    } else
                        S.default.recvSlice(e)
                }
                function o(e) {
                    y.default.opened && S.default.recvSliceVideo(e)
                }
                function l(e) {
                    p.default.streamId.equal(e.cdnGroupId) && S.default.getStream(e.streamIndex).recvRemoveSub(e)
                }
                function d(e) {
                    S.default.getStream(e.streamIndex).recvRemoveSubRes(e)
                }
                function h(e) {
                    S.default.getStream(e.streamIndex).recvSubRes(e)
                }
                function f(e) {
                    S.default.recvCompeteRes(e)
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var c = a(i(6))
                    , p = a(i(9))
                    , v = a(i(10))
                    , m = a(i(2))
                    , y = a(i(13))
                    , _ = a(i(21))
                    , S = a(i(28))
                    , g = a(i(35))
                    , T = a(i(3))
                    , P = a(i(16))
                    , I = a(i(109))
                    , E = a(i(110))
                    , k = a(i(106))
                    , R = a(i(107))
                    , C = a(i(115))
                    , L = a(i(111))
                    , A = a(i(112))
                    , M = new c.default
                    , U = {
                    initHandler: function() {
                        M.set(m.default.P2PSubStream, s),
                            M.set(m.default.P2PSubStreamRes, n),
                            M.set(m.default.P2PRemoveSub, l),
                            M.set(m.default.P2PRemoveSubRes, d),
                            M.set(m.default.PP2pSliceData, r),
                            p.default.addListener(m.default.PP2pSliceVideoData, o),
                            p.default.addListener(m.default.PP2pSliceData, u),
                            p.default.addListener(m.default.PCDNSubscribeRes, h),
                            p.default.addListener(m.default.PCDNCompeteSubscribeRes, f)
                    },
                    onChannelData: function(e, t) {
                        M.has(e) && M.get(e)(t)
                    },
                    sendSubStream: function(e, t, i) {
                        var a = new I.default;
                        a.uid = p.default.getUid(),
                            a.streamIndex = t,
                            a.groupId = p.default.streamId,
                            a.maxRecvSeq = i,
                            a.uplinkBw = _.default.getUplinkBw(),
                            _.default.sendToNode(e.bestUid, a, v.default.DataType.SIGNALLING)
                    },
                    sendSubStreamRes: function(e, t, i, a, s) {
                        var n = new E.default;
                        n.uid = p.default.getUid(),
                            n.groupId = p.default.streamId,
                            n.streamIndex = t,
                            n.streamDelay = s,
                            n.maxRecvSeq = i,
                            n.subMinBw = g.default.getSubMinBw(),
                            n.ret = a,
                            _.default.sendToNode(e, n, v.default.DataType.SIGNALLING)
                    },
                    sendRemoveSub: function(e, t, i, a) {
                        var s = _.default.getNode(e)
                            , n = new k.default;
                        n.uid = p.default.getUid(),
                            n.cdnGroupId = p.default.streamId,
                            n.streamIndex = t,
                            n.reason = i,
                            n.cdnRtt = p.default.videoLink.avgRtt(),
                            n.nodeRtt = s ? s.rtt : 0,
                            n.streamDelay = a,
                            _.default.sendToNode(e, n, v.default.DataType.SIGNALLING)
                    },
                    sendRemoveSubRes: function(e, t, i) {
                        var a = _.default.getNode(e)
                            , s = new R.default;
                        s.uid = p.default.getUid(),
                            s.streamIndex = t,
                            s.cdnRtt = p.default.videoLink.avgRtt(),
                            s.nodeRtt = a ? a.rtt : 0,
                            s.streamDelay = i,
                            _.default.sendToNode(e, s, v.default.DataType.SIGNALLING)
                    },
                    sendSubReq: function(e, t) {
                        var i = new C.default;
                        i.cdnGroupId = p.default.streamId,
                            i.publisher = p.default.getUid(),
                            i.subscriber = e,
                            i.streamIndex = t,
                            i.streamNum = y.default.maxSubNum,
                            i.version = y.default.version + "",
                            p.default.send(i)
                    },
                    sendCompeteReq: function(e) {
                        var t = new L.default;
                        t.cdnGroupId = p.default.streamId,
                            t.subscriber = p.default.getUid(),
                            t.subStreamIndex = e,
                            t.version = y.default.version + "",
                            t.uplinkBw = _.default.getUplinkBw(),
                            T.default.log("StreamProxy sendCompeteReq", t, e),
                            p.default.send(t)
                    },
                    sendForceSubscribeNotify: function() {
                        if (y.default.fixedArr.length > 0) {
                            var e = new A.default;
                            e.cdnGroupId = p.default.streamId,
                                e.subscriber = p.default.getUid(),
                                e.subStreamIndex = y.default.fixedArr,
                                p.default.send(e),
                                y.default.fixedArr = []
                        }
                    }
                };
                t.default = U
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(6))
                    , n = a(i(3))
                    , r = new s.default
                    , u = {
                    addPub: function(e) {
                        var t = 0;
                        r.has(e) && (t = r.get(e)),
                            r.set(e, t + 1)
                    },
                    delPub: function(e) {
                        if (r.has(e)) {
                            var t = r.get(e);
                            0 == --t ? r.delete(e) : r.set(e, t)
                        }
                    },
                    getPubCnt: function(e) {
                        return r.has(e) ? r.get(e) : 0
                    },
                    delNode: function(e) {
                        r.has(e) && (n.default.log("P2P PubMgr delNode 删除发布者", e),
                            r.delete(e))
                    },
                    reset: function() {
                        r.clear()
                    }
                };
                t.default = u
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(10))
                    , n = a(i(5))
                    , r = 0
                    , u = []
                    , o = 0
                    , l = 0
                    , d = {
                    addSlice: function(e) {
                        s.default.isSliceJumpFromPeer(o, e) || -1 == u.indexOf(e.seq) && (r >= s.default.MAX_PACKET_CNT && (r = 0),
                            u[r] = e.seq,
                            r++,
                        o < e.seq && (o = e.seq,
                            l = n.default.now()))
                    },
                    hasSlice: function(e) {
                        return -1 != u.indexOf(e)
                    },
                    getMaxSeq: function() {
                        return o
                    },
                    getMaxStamp: function() {
                        return l
                    },
                    reset: function() {
                        r = 0,
                            u = [],
                            o = 0,
                            l = 0
                    }
                };
                t.default = d
            }
            , function(e, t) {
                var i = Math.ceil
                    , a = Math.floor;
                e.exports = function(e) {
                    return isNaN(e = +e) ? 0 : (e > 0 ? a : i)(e)
                }
            }
            , function(e, t) {
                e.exports = function(e) {
                    if (void 0 == e)
                        throw TypeError("Can't call method on  " + e);
                    return e
                }
            }
            , function(e, t, i) {
                var a = i(54)
                    , s = i(24)
                    , n = i(151)
                    , r = i(29)
                    , u = i(39)
                    , o = i(215)
                    , l = i(58)
                    , d = i(220)
                    , h = i(19)("iterator")
                    , f = !([].keys && "next"in [].keys())
                    , c = function() {
                    return this
                };
                e.exports = function(e, t, i, p, v, m, y) {
                    o(i, t, p);
                    var _, S, g, T = function(e) {
                        if (!f && e in k)
                            return k[e];
                        switch (e) {
                            case "keys":
                            case "values":
                                return function() {
                                    return new i(this,e)
                                }
                        }
                        return function() {
                            return new i(this,e)
                        }
                    }, P = t + " Iterator", I = "values" == v, E = !1, k = e.prototype, R = k[h] || k["@@iterator"] || v && k[v], C = R || T(v), L = v ? I ? T("entries") : C : void 0, A = "Array" == t && k.entries || R;
                    if (A && (g = d(A.call(new e))) !== Object.prototype && g.next && (l(g, P, !0),
                    a || "function" == typeof g[h] || r(g, h, c)),
                    I && R && "values" !== R.name && (E = !0,
                            C = function() {
                                return R.call(this)
                            }
                    ),
                    a && !y || !f && !E && k[h] || r(k, h, C),
                        u[t] = C,
                        u[P] = c,
                        v)
                        if (_ = {
                            values: I ? C : T("values"),
                            keys: m ? C : T("keys"),
                            entries: L
                        },
                            y)
                            for (S in _)
                                S in k || n(k, S, _[S]);
                        else
                            s(s.P + s.F * (f || E), t, _);
                    return _
                }
            }
            , function(e, t, i) {
                var a = i(30);
                e.exports = function(e, t) {
                    if (!a(e))
                        return e;
                    var i, s;
                    if (t && "function" == typeof (i = e.toString) && !a(s = i.call(e)))
                        return s;
                    if ("function" == typeof (i = e.valueOf) && !a(s = i.call(e)))
                        return s;
                    if (!t && "function" == typeof (i = e.toString) && !a(s = i.call(e)))
                        return s;
                    throw TypeError("Can't convert object to primitive value")
                }
            }
            , function(e, t, i) {
                var a = i(31)
                    , s = i(216)
                    , n = i(84)
                    , r = i(82)("IE_PROTO")
                    , u = function() {}
                    , o = function() {
                    var e, t = i(150)("iframe"), a = n.length;
                    for (t.style.display = "none",
                             i(219).appendChild(t),
                             t.src = "javascript:",
                             (e = t.contentWindow.document).open(),
                             e.write("<script>document.F=Object<\/script>"),
                             e.close(),
                             o = e.F; a--; )
                        delete o.prototype[n[a]];
                    return o()
                };
                e.exports = Object.create || function(e, t) {
                    var i;
                    return null !== e ? (u.prototype = a(e),
                        i = new u,
                        u.prototype = null,
                        i[r] = e) : i = o(),
                        void 0 === t ? i : s(i, t)
                }
            }
            , function(e, t, i) {
                var a = i(81);
                e.exports = Object("z").propertyIsEnumerable(0) ? Object : function(e) {
                    return "String" == a(e) ? e.split("") : Object(e)
                }
            }
            , function(e, t) {
                var i = {}.toString;
                e.exports = function(e) {
                    return i.call(e).slice(8, -1)
                }
            }
            , function(e, t, i) {
                var a = i(83)("keys")
                    , s = i(57);
                e.exports = function(e) {
                    return a[e] || (a[e] = s(e))
                }
            }
            , function(e, t, i) {
                var a = i(17)
                    , s = i(25)
                    , n = s["__core-js_shared__"] || (s["__core-js_shared__"] = {});
                (e.exports = function(e, t) {
                        return n[e] || (n[e] = void 0 !== t ? t : {})
                    }
                )("versions", []).push({
                    version: a.version,
                    mode: i(54) ? "pure" : "global",
                    copyright: "© 2018 Denis Pushkarev (zloirock.ru)"
                })
            }
            , function(e, t) {
                e.exports = "constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")
            }
            , function(e, t, i) {
                t.f = i(19)
            }
            , function(e, t, i) {
                var s = i(57)("meta")
                    , n = i(30)
                    , r = i(32)
                    , u = i(22).f
                    , o = 0
                    , l = Object.isExtensible || function() {
                    return !0
                }
                    , d = !i(38)(function() {
                    return l(Object.preventExtensions({}))
                })
                    , h = function(e) {
                    u(e, s, {
                        value: {
                            i: "O" + ++o,
                            w: {}
                        }
                    })
                }
                    , f = e.exports = {
                    KEY: s,
                    NEED: !1,
                    fastKey: function(e, t) {
                        if (!n(e))
                            return "symbol" == (void 0 === e ? "undefined" : a(e)) ? e : ("string" == typeof e ? "S" : "P") + e;
                        if (!r(e, s)) {
                            if (!l(e))
                                return "F";
                            if (!t)
                                return "E";
                            h(e)
                        }
                        return e[s].i
                    },
                    getWeak: function(e, t) {
                        if (!r(e, s)) {
                            if (!l(e))
                                return !0;
                            if (!t)
                                return !1;
                            h(e)
                        }
                        return e[s].w
                    },
                    onFreeze: function(e) {
                        return d && f.NEED && l(e) && !r(e, s) && h(e),
                            e
                    }
                }
            }
            , function(e, t, i) {
                var a = i(25)
                    , s = i(17)
                    , n = i(54)
                    , r = i(85)
                    , u = i(22).f;
                e.exports = function(e) {
                    var t = s.Symbol || (s.Symbol = n ? {} : a.Symbol || {});
                    "_" == e.charAt(0) || e in t || u(t, e, {
                        value: r.f(e)
                    })
                }
            }
            , function(e, t) {
                t.f = Object.getOwnPropertySymbols
            }
            , function(e, t) {}
            , function(e, t, i) {
                var a = i(91)
                    , s = i(19)("iterator")
                    , n = i(39);
                e.exports = i(17).getIteratorMethod = function(e) {
                    if (void 0 != e)
                        return e[s] || e["@@iterator"] || n[a(e)]
                }
            }
            , function(e, t, i) {
                var a = i(81)
                    , s = i(19)("toStringTag")
                    , n = "Arguments" == a(function() {
                    return arguments
                }());
                e.exports = function(e) {
                    var t, i, r;
                    return void 0 === e ? "Undefined" : null === e ? "Null" : "string" == typeof (i = function(e, t) {
                        try {
                            return e[t]
                        } catch (e) {}
                    }(t = Object(e), s)) ? i : n ? a(t) : "Object" == (r = a(t)) && "function" == typeof t.callee ? "Arguments" : r
                }
            }
            , function(e, t, i) {
                var a = i(30);
                e.exports = function(e, t) {
                    if (!a(e) || e._t !== t)
                        throw TypeError("Incompatible receiver, " + t + " required!");
                    return e
                }
            }
            , function(e, t, i) {
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }),
                    t.default = {
                        VIDEO_JIT_BUFLEN: 2,
                        VIDEO_JIT_MIN_BUFLEN: 3,
                        VIDEO_JIT_MAX_BUFLEN: 6,
                        PUSH_GOP: 9
                    }
            }
            , function(e, t, i) {
                function a(e) {
                    var t = s(e);
                    return i(t)
                }
                function s(e) {
                    var t = n[e];
                    if (!(t + 1)) {
                        var i = new Error("Cannot find module '" + e + "'");
                        throw i.code = "MODULE_NOT_FOUND",
                            i
                    }
                    return t
                }
                var n = {
                    "./CdnAllocateInfo": 95,
                    "./CdnAllocateInfo.js": 95,
                    "./CdnGroupID": 7,
                    "./CdnGroupID.js": 7,
                    "./CdnGroupUsers": 166,
                    "./CdnGroupUsers.js": 166,
                    "./CurrentCdnProxyInfo": 96,
                    "./CurrentCdnProxyInfo.js": 96,
                    "./ESliceConfig": 167,
                    "./ESliceConfig.js": 167,
                    "./IpInfo": 168,
                    "./IpInfo.js": 168,
                    "./P2PAnswer": 97,
                    "./P2PAnswer.js": 97,
                    "./P2PCandidate": 98,
                    "./P2PCandidate.js": 98,
                    "./P2PKeepAlive": 99,
                    "./P2PKeepAlive.js": 99,
                    "./P2PKeepAliveRes": 100,
                    "./P2PKeepAliveRes.js": 100,
                    "./P2PNotifyNodeLeave": 101,
                    "./P2PNotifyNodeLeave.js": 101,
                    "./P2POffer": 102,
                    "./P2POffer.js": 102,
                    "./P2POfferReject": 103,
                    "./P2POfferReject.js": 103,
                    "./P2PPunchBackReq": 104,
                    "./P2PPunchBackReq.js": 104,
                    "./P2PPunchBackRsp": 105,
                    "./P2PPunchBackRsp.js": 105,
                    "./P2PRemoveSub": 106,
                    "./P2PRemoveSub.js": 106,
                    "./P2PRemoveSubRes": 107,
                    "./P2PRemoveSubRes.js": 107,
                    "./P2PRequestOffer": 108,
                    "./P2PRequestOffer.js": 108,
                    "./P2PSubStream": 109,
                    "./P2PSubStream.js": 109,
                    "./P2PSubStreamRes": 110,
                    "./P2PSubStreamRes.js": 110,
                    "./P2PSubscribeResCode": 169,
                    "./P2PSubscribeResCode.js": 169,
                    "./P2PSyncDepth": 170,
                    "./P2PSyncDepth.js": 170,
                    "./P2PSyncSubTree": 171,
                    "./P2PSyncSubTree.js": 171,
                    "./P2PWSForward": 172,
                    "./P2PWSForward.js": 172,
                    "./PCDNCompeteSubscribeReq": 111,
                    "./PCDNCompeteSubscribeReq.js": 111,
                    "./PCDNCompeteSubscribeRes": 173,
                    "./PCDNCompeteSubscribeRes.js": 173,
                    "./PCDNForceSubscribeNotify": 112,
                    "./PCDNForceSubscribeNotify.js": 112,
                    "./PCDNGetProxyListReq": 113,
                    "./PCDNGetProxyListReq.js": 113,
                    "./PCDNGetProxyListRsp": 174,
                    "./PCDNGetProxyListRsp.js": 174,
                    "./PCDNGetSliceStreamInfoReq": 114,
                    "./PCDNGetSliceStreamInfoReq.js": 114,
                    "./PCDNGetSliceStreamInfoRsp": 175,
                    "./PCDNGetSliceStreamInfoRsp.js": 175,
                    "./PCDNSubscribeReq": 115,
                    "./PCDNSubscribeReq.js": 115,
                    "./PCDNSubscribeRes": 176,
                    "./PCDNSubscribeRes.js": 176,
                    "./PCdnForceConnectVideoProxy": 177,
                    "./PCdnForceConnectVideoProxy.js": 177,
                    "./PCdnP2PErrStatics": 116,
                    "./PCdnP2PErrStatics.js": 116,
                    "./PCdnP2PUserRegister": 117,
                    "./PCdnP2PUserRegister.js": 117,
                    "./PCdnP2PUserRegisterRes": 178,
                    "./PCdnP2PUserRegisterRes.js": 178,
                    "./PCdnP2PWSForward": 118,
                    "./PCdnP2PWSForward.js": 118,
                    "./PCdnP2PWSForwardReject": 179,
                    "./PCdnP2PWSForwardReject.js": 179,
                    "./PCdnP2pGetNode": 119,
                    "./PCdnP2pGetNode.js": 119,
                    "./PCdnP2pGetNodeRes": 180,
                    "./PCdnP2pGetNodeRes.js": 180,
                    "./PCdnP2pReportLog": 181,
                    "./PCdnP2pReportLog.js": 181,
                    "./PCdnP2pUserUnRegister": 121,
                    "./PCdnP2pUserUnRegister.js": 121,
                    "./PCdnProxyPing": 122,
                    "./PCdnProxyPing.js": 122,
                    "./PCdnProxyPingRes": 182,
                    "./PCdnProxyPingRes.js": 182,
                    "./PP2PStaticsPkg3": 183,
                    "./PP2PStaticsPkg3.js": 183,
                    "./PP2pSliceAudioData": 123,
                    "./PP2pSliceAudioData.js": 123,
                    "./PP2pSliceControlData": 124,
                    "./PP2pSliceControlData.js": 124,
                    "./PP2pSliceData": 65,
                    "./PP2pSliceData.js": 65,
                    "./PP2pSliceVideoData": 125,
                    "./PP2pSliceVideoData.js": 125,
                    "./ProxyPeerInfo2": 120,
                    "./ProxyPeerInfo2.js": 120,
                    "./SlaveProxyInfo": 48,
                    "./SlaveProxyInfo.js": 48,
                    "./StreamCodecType": 64,
                    "./StreamCodecType.js": 64
                };
                a.keys = function() {
                    return Object.keys(n)
                }
                    ,
                    a.resolve = s,
                    e.exports = a,
                    a.id = 94
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(7))
                    , u = a(i(48))
                    , o = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.streamId = new r.default,
                            this.videoProxyInfos = [],
                            this.token = "",
                            this.streamSeqSN = 0,
                            this.quickAccessBeginIndex = 0,
                            this.quickAccessEndIndex = 0,
                            this.ip = 0,
                            this.urlTokenTime = 0,
                            this.urlToken = ""
                    }
                    return (0,
                        n.default)(e, [{
                        key: "unmarshall",
                        value: function(e) {
                            this.streamId.unmarshall(e),
                                this.videoProxyInfos = [];
                            for (var t = e.popUInt32(), i = 0; i < t; i++) {
                                var a = new u.default;
                                this.videoProxyInfos.push(a.unmarshall(e))
                            }
                            return this.token = e.popString(),
                                this.streamSeqSN = e.popUInt64(),
                                this.quickAccessBeginIndex = e.popUInt64(),
                                this.quickAccessEndIndex = e.popUInt64(),
                                this.ip = e.popUInt32(),
                                this.urlTokenTime = e.popUInt32(),
                                this.urlToken = e.popString(),
                                this
                        }
                    }]),
                        e
                }();
                t.default = o
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(6))
                    , n = a(i(0))
                    , r = a(i(1))
                    , u = a(i(4))
                    , o = a(i(7))
                    , l = a(i(48))
                    , d = function() {
                    function e() {
                        (0,
                            n.default)(this, e),
                            this.currentProxyInfos = new s.default
                    }
                    return (0,
                        r.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new u.default(!1);
                            return e.pushUInt32(this.currentProxyInfos.size),
                                this.currentProxyInfos.forEach(function(t, i) {
                                    e.pushUint8ArrayWithoutLen(i.marshall()),
                                        e.pushUInt32(t.length),
                                        t.forEach(function(t) {
                                            e.pushUint8ArrayWithoutLen(t.marshall())
                                        })
                                }),
                                e.marshall()
                        }
                    }, {
                        key: "unmarshall",
                        value: function(e) {
                            this.currentProxyInfos.clear();
                            for (var t = e.popUInt32(), i = 0; i < t; i++) {
                                var a = new o.default;
                                a.unmarshall(e);
                                for (var s = [], n = e.popUInt32(), r = 0; r < n; r++) {
                                    var u = new l.default;
                                    s.push(u.unmarshall(e))
                                }
                                this.currentProxyInfos.set(a, s)
                            }
                            return this
                        }
                    }]),
                        e
                }();
                t.default = d
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(4))
                    , u = a(i(2))
                    , o = a(i(7))
                    , l = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.cdnGroupId = new o.default,
                            this.lineType = 0,
                            this.fromUid = 0,
                            this.toUid = 0,
                            this.sdp = "",
                            this.sdpType = ""
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new r.default;
                            return e.setUri(u.default.P2PAnswer),
                                e.pushUint8ArrayWithoutLen(this.cdnGroupId.marshall()),
                                e.pushUInt8(this.lineType),
                                e.pushUInt64(this.fromUid),
                                e.pushUInt64(this.toUid),
                                e.pushString(this.sdp),
                                e.pushString(this.sdpType),
                                e.marshall()
                        }
                    }, {
                        key: "unmarshall",
                        value: function(e) {
                            this.cdnGroupId.unmarshall(e),
                                this.lineType = e.popUInt8(),
                                this.fromUid = e.popUInt64(),
                                this.toUid = e.popUInt64(),
                                this.sdp = e.popString(),
                                this.sdpType = e.popString()
                        }
                    }]),
                        e
                }();
                t.default = l
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(4))
                    , u = a(i(2))
                    , o = a(i(7))
                    , l = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.cdnGroupId = new o.default,
                            this.lineType = 0,
                            this.fromUid = 0,
                            this.toUid = 0,
                            this.sdpMLineIndex = 0,
                            this.sdpMid = "",
                            this.candidate = ""
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new r.default;
                            return e.setUri(u.default.P2PCandidate),
                                e.pushUint8ArrayWithoutLen(this.cdnGroupId.marshall()),
                                e.pushUInt8(this.lineType),
                                e.pushUInt64(this.fromUid),
                                e.pushUInt64(this.toUid),
                                e.pushUInt32(this.sdpMLineIndex),
                                e.pushString(this.sdpMid),
                                e.pushString(this.candidate),
                                e.marshall()
                        }
                    }, {
                        key: "unmarshall",
                        value: function(e) {
                            this.cdnGroupId.unmarshall(e),
                                this.lineType = e.popUInt8(),
                                this.fromUid = e.popUInt64(),
                                this.toUid = e.popUInt64(),
                                this.sdpMLineIndex = e.popUInt32(),
                                this.sdpMid = e.popString(),
                                this.candidate = e.popString()
                        }
                    }]),
                        e
                }();
                t.default = l
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(4))
                    , u = a(i(2))
                    , o = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.fromUid = 0,
                            this.timeStampc = 0,
                            this.uplinkBw = 0,
                            this.sendCount = 0,
                            this.streamDelay = [],
                            this.subMinBw = 0,
                            this.curSid = 0,
                            this.subNum = 0,
                            this.remainUplinkNum = 0,
                            this.cdnpip = 0,
                            this.maxSeqs = []
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new r.default;
                            return e.setUri(u.default.P2PKeepAlive),
                                e.pushUInt64(this.fromUid),
                                e.pushUInt32(this.timeStampc),
                                e.pushUInt32(this.uplinkBw),
                                e.pushUInt32(this.sendCount),
                                e.pushUInt16Vector(this.streamDelay),
                                e.pushUInt32(this.subMinBw),
                                e.pushUInt32(this.curSid),
                                e.pushUInt8(this.subNum),
                                e.pushUInt8(this.remainUplinkNum),
                                e.pushUInt32(this.cdnpip),
                                e.pushUInt64Vector(this.maxSeqs),
                                e.marshall()
                        }
                    }, {
                        key: "unmarshall",
                        value: function(e) {
                            this.fromUid = e.popUInt64(),
                                this.timeStampc = e.popUInt32(),
                                this.uplinkBw = e.popUInt32(),
                                this.sendCount = e.popUInt32(),
                                this.streamDelay = e.popUInt16Vector(),
                                this.subMinBw = e.popUInt32(),
                                this.curSid = e.popUInt32(),
                                this.subNum = e.popUInt8(),
                                this.remainUplinkNum = e.popUInt8(),
                                this.cdnpip = e.popUInt32(),
                                this.maxSeqs = e.popUInt64Vector()
                        }
                    }]),
                        e
                }();
                t.default = o
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(4))
                    , u = a(i(2))
                    , o = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.fromUid = 0,
                            this.timeStampc = 0,
                            this.uplinkBw = 0,
                            this.sendCount = 0,
                            this.recvCount = 0,
                            this.streamDelay = [],
                            this.subMinBw = 0,
                            this.curSid = 0,
                            this.subNum = 0,
                            this.remainUplinkNum = 0,
                            this.cdnpip = 0,
                            this.maxSeqs = []
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new r.default;
                            return e.setUri(u.default.P2PKeepAliveRes),
                                e.pushUInt64(this.fromUid),
                                e.pushUInt32(this.timeStampc),
                                e.pushUInt32(this.uplinkBw),
                                e.pushUInt32(this.sendCount),
                                e.pushUInt32(this.recvCount),
                                e.pushUInt16Vector(this.streamDelay),
                                e.pushUInt32(this.subMinBw),
                                e.pushUInt32(this.curSid),
                                e.pushUInt8(this.subNum),
                                e.pushUInt8(this.remainUplinkNum),
                                e.pushUInt32(this.cdnpip),
                                e.pushUInt64Vector(this.maxSeqs),
                                e.marshall()
                        }
                    }, {
                        key: "unmarshall",
                        value: function(e) {
                            this.fromUid = e.popUInt64(),
                                this.timeStampc = e.popUInt32(),
                                this.uplinkBw = e.popUInt32(),
                                this.sendCount = e.popUInt32(),
                                this.recvCount = e.popUInt32(),
                                this.streamDelay = e.popUInt16Vector(),
                                this.subMinBw = e.popUInt32(),
                                this.curSid = e.popUInt32(),
                                this.subNum = e.popUInt8(),
                                this.remainUplinkNum = e.popUInt8(),
                                this.cdnpip = e.popUInt32(),
                                this.maxSeqs = e.popUInt64Vector()
                        }
                    }]),
                        e
                }();
                t.default = o
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(4))
                    , u = a(i(2))
                    , o = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.uid = 0,
                            this.reason = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new r.default;
                            return e.setUri(u.default.P2PNotifyNodeLeave),
                                e.pushUInt64(this.uid),
                                e.pushUInt8(this.reason),
                                e.marshall()
                        }
                    }, {
                        key: "unmarshall",
                        value: function(e) {
                            this.uid = e.popUInt64(),
                                this.reason = e.popUInt8()
                        }
                    }]),
                        e
                }();
                t.default = o
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(4))
                    , u = a(i(2))
                    , o = a(i(7))
                    , l = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.cdnGroupId = new o.default,
                            this.lineType = 0,
                            this.fromUid = 0,
                            this.toUid = 0,
                            this.sdp = "",
                            this.sdpType = "",
                            this.version = 0,
                            this.lowestVersion = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new r.default;
                            return e.setUri(u.default.P2POffer),
                                e.pushUint8ArrayWithoutLen(this.cdnGroupId.marshall()),
                                e.pushUInt8(this.lineType),
                                e.pushUInt64(this.fromUid),
                                e.pushUInt64(this.toUid),
                                e.pushString(this.sdp),
                                e.pushString(this.sdpType),
                                e.pushUInt32(this.version),
                                e.pushUInt32(this.lowestVersion),
                                e.marshall()
                        }
                    }, {
                        key: "unmarshall",
                        value: function(e) {
                            this.cdnGroupId.unmarshall(e),
                                this.lineType = e.popUInt8(),
                                this.fromUid = e.popUInt64(),
                                this.toUid = e.popUInt64(),
                                this.sdp = e.popString(),
                                this.sdpType = e.popString(),
                                this.version = e.popUInt32(),
                                this.lowestVersion = e.popUInt32()
                        }
                    }]),
                        e
                }();
                t.default = l
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(4))
                    , u = a(i(2))
                    , o = a(i(7))
                    , l = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.cdnGroupId = new o.default,
                            this.lineType = 0,
                            this.fromUid = 0,
                            this.toUid = 0,
                            this.rejectReason = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new r.default;
                            return e.setUri(u.default.P2POfferReject),
                                e.pushUint8ArrayWithoutLen(this.cdnGroupId.marshall()),
                                e.pushUInt8(this.lineType),
                                e.pushUInt64(this.fromUid),
                                e.pushUInt64(this.toUid),
                                e.pushUInt32(this.rejectReason),
                                e.marshall()
                        }
                    }, {
                        key: "unmarshall",
                        value: function(e) {
                            this.cdnGroupId.unmarshall(e),
                                this.lineType = e.popUInt8(),
                                this.fromUid = e.popUInt64(),
                                this.toUid = e.popUInt64(),
                                this.rejectReason = e.popUInt32()
                        }
                    }]),
                        e
                }();
                t.default = l
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(4))
                    , u = a(i(2))
                    , o = a(i(7))
                    , l = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.cdnGroupId = null,
                            this.fromUid = 0,
                            this.lineType = 0,
                            this.version = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new r.default;
                            return e.setUri(u.default.P2PPunchBackReq),
                                e.pushUint8ArrayWithoutLen(this.cdnGroupId.marshall()),
                                e.pushUInt64(this.fromUid),
                                e.pushUInt8(this.lineType),
                                e.pushUInt32(this.version),
                                e.marshall()
                        }
                    }, {
                        key: "unmarshall",
                        value: function(e) {
                            this.cdnGroupId || (this.cdnGroupId = new o.default),
                                this.cdnGroupId.unmarshall(e),
                                this.fromUid = e.popUInt64(),
                                this.lineType = e.popUInt8(),
                                this.version = e.popUInt32()
                        }
                    }]),
                        e
                }();
                t.default = l
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(4))
                    , u = a(i(2))
                    , o = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.fromUid = 0,
                            this.ret = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new r.default;
                            return e.setUri(u.default.P2PPunchBackRsp),
                                e.pushUInt64(this.fromUid),
                                e.pushUInt8(this.ret),
                                e.marshall()
                        }
                    }, {
                        key: "unmarshall",
                        value: function(e) {
                            this.fromUid = e.popUInt64(),
                                this.ret = e.popUInt8()
                        }
                    }]),
                        e
                }();
                t.default = o
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(4))
                    , u = a(i(2))
                    , o = a(i(7))
                    , l = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.cdnGroupId = new o.default,
                            this.uid = 0,
                            this.streamIndex = 0,
                            this.reason = 0,
                            this.cdnRtt = 0,
                            this.nodeRtt = 0,
                            this.streamDelay = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new r.default;
                            return e.setUri(u.default.P2PRemoveSub),
                                e.pushUint8ArrayWithoutLen(this.cdnGroupId.marshall()),
                                e.pushUInt64(this.uid),
                                e.pushUInt8(this.streamIndex),
                                e.pushUInt8(this.reason),
                                e.pushUInt32(this.cdnRtt),
                                e.pushUInt32(this.nodeRtt),
                                e.pushUInt32(this.streamDelay),
                                e.marshall()
                        }
                    }, {
                        key: "unmarshall",
                        value: function(e) {
                            this.cdnGroupId.unmarshall(e),
                                this.uid = e.popUInt64(),
                                this.streamIndex = e.popUInt8(),
                                this.reason = e.popUInt8(),
                                this.cdnRtt = e.popUInt32(),
                                this.nodeRtt = e.popUInt32(),
                                this.streamDelay = e.popUInt32()
                        }
                    }]),
                        e
                }();
                t.default = l
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(4))
                    , u = a(i(2))
                    , o = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.uid = 0,
                            this.streamIndex = 0,
                            this.cdnRtt = 0,
                            this.nodeRtt = 0,
                            this.streamDelay = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new r.default;
                            return e.setUri(u.default.P2PRemoveSubRes),
                                e.pushUInt64(this.uid),
                                e.pushUInt8(this.streamIndex),
                                e.pushUInt32(this.cdnRtt),
                                e.pushUInt32(this.nodeRtt),
                                e.pushUInt32(this.streamDelay),
                                e.marshall()
                        }
                    }, {
                        key: "unmarshall",
                        value: function(e) {
                            this.uid = e.popUInt64(),
                                this.streamIndex = e.popUInt8(),
                                this.cdnRtt = e.popUInt32(),
                                this.nodeRtt = e.popUInt32(),
                                this.streamDelay = e.popUInt32()
                        }
                    }]),
                        e
                }();
                t.default = o
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(4))
                    , u = a(i(2))
                    , o = a(i(7))
                    , l = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.cdnGroupId = new o.default,
                            this.lineType = 0,
                            this.fromUid = 0,
                            this.toUid = 0,
                            this.uplinkBw = 0,
                            this.availPeerNodes = 0,
                            this.version = 0,
                            this.lowestVersion = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new r.default;
                            return e.setUri(u.default.P2PRequestOffer),
                                e.pushUint8ArrayWithoutLen(this.cdnGroupId.marshall()),
                                e.pushUInt8(this.lineType),
                                e.pushUInt64(this.fromUid),
                                e.pushUInt64(this.toUid),
                                e.pushUInt32(this.uplinkBw),
                                e.pushUInt8(this.availPeerNodes),
                                e.pushUInt32(this.version),
                                e.pushUInt32(this.lowestVersion),
                                e.marshall()
                        }
                    }, {
                        key: "unmarshall",
                        value: function(e) {
                            this.cdnGroupId.unmarshall(e),
                                this.lineType = e.popUInt8(),
                                this.fromUid = e.popUInt64(),
                                this.toUid = e.popUInt64(),
                                this.uplinkBw = e.popUInt32(),
                                this.availPeerNodes = e.popUInt8(),
                                this.version = e.popUInt32(),
                                this.lowestVersion = e.popUInt32()
                        }
                    }]),
                        e
                }();
                t.default = l
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(4))
                    , u = a(i(2))
                    , o = a(i(7))
                    , l = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.uid = 0,
                            this.groupId = new o.default,
                            this.streamIndex = 0,
                            this.maxRecvSeq = 0,
                            this.uplinkBw = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new r.default;
                            return e.setUri(u.default.P2PSubStream),
                                e.pushUInt64(this.uid),
                                e.pushUint8ArrayWithoutLen(this.groupId.marshall()),
                                e.pushUInt8(this.streamIndex),
                                e.pushUInt64(this.maxRecvSeq),
                                e.pushUInt32(this.uplinkBw),
                                e.marshall()
                        }
                    }, {
                        key: "unmarshall",
                        value: function(e) {
                            this.uid = e.popUInt64(),
                                this.groupId.unmarshall(e),
                                this.streamIndex = e.popUInt8(),
                                this.maxRecvSeq = e.popUInt64(),
                                this.uplinkBw = e.popUInt32()
                        }
                    }]),
                        e
                }();
                t.default = l
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(4))
                    , u = a(i(2))
                    , o = a(i(7))
                    , l = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.uid = 0,
                            this.groupId = new o.default,
                            this.streamIndex = 0,
                            this.streamDelay = 0,
                            this.maxRecvSeq = 0,
                            this.subMinBw = 0,
                            this.ret = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new r.default;
                            return e.setUri(u.default.P2PSubStreamRes),
                                e.pushUInt64(this.uid),
                                e.pushUint8ArrayWithoutLen(this.groupId.marshall()),
                                e.pushUInt8(this.streamIndex),
                                e.pushUInt16(this.streamDelay),
                                e.pushUInt64(this.maxRecvSeq),
                                e.pushUInt32(this.subMinBw),
                                e.pushUInt8(this.ret),
                                e.marshall()
                        }
                    }, {
                        key: "unmarshall",
                        value: function(e) {
                            this.uid = e.popUInt64(),
                                this.groupId.unmarshall(e),
                                this.streamIndex = e.popUInt8(),
                                this.streamDelay = e.popUInt16(),
                                this.maxRecvSeq = e.popUInt64(),
                                this.subMinBw = e.popUInt32(),
                                this.ret = e.popUInt8()
                        }
                    }]),
                        e
                }();
                t.default = l
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(2))
                    , u = a(i(4))
                    , o = a(i(7))
                    , l = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.cdnGroupId = new o.default,
                            this.version = "",
                            this.subscriber = 0,
                            this.subStreamIndex = [],
                            this.uplinkBw = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new u.default;
                            return e.setUri(r.default.PCDNCompeteSubscribeReq),
                                e.pushUint8ArrayWithoutLen(this.cdnGroupId.marshall()),
                                e.pushString(this.version),
                                e.pushUInt64(this.subscriber),
                                e.pushUint8Array32(this.subStreamIndex),
                                e.pushUInt32(this.uplinkBw),
                                e.marshall()
                        }
                    }]),
                        e
                }();
                t.default = l
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(2))
                    , u = a(i(4))
                    , o = a(i(7))
                    , l = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.cdnGroupId = new o.default,
                            this.subscriber = 0,
                            this.subStreamIndex = []
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new u.default;
                            return e.setUri(r.default.PCDNForceSubscribeNotify),
                                e.pushUint8ArrayWithoutLen(this.cdnGroupId.marshall()),
                                e.pushUInt64(this.subscriber),
                                e.pushUint8Array32(this.subStreamIndex),
                                e.marshall()
                        }
                    }]),
                        e
                }();
                t.default = l
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(2))
                    , u = a(i(4))
                    , o = (a(i(7)),
                    a(i(96)))
                    , l = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.uid = 0,
                            this.version = 0,
                            this.cdnGroupIdList = [],
                            this.currentInfo = new o.default,
                            this.appid = 0,
                            this.clientAppid = 0,
                            this.clientType = 0,
                            this.ip = 0,
                            this.sendTime = 0,
                            this.sdkVersion = 0,
                            this.imsi = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new u.default;
                            return e.setUri(r.default.PCDNGetProxyListReq),
                                e.pushUInt64(this.uid),
                                e.pushUInt8(this.version),
                                e.pushUInt32(this.cdnGroupIdList.length),
                                this.cdnGroupIdList.forEach(function(t) {
                                    e.pushUint8ArrayWithoutLen(t.marshall())
                                }),
                                e.pushUint8ArrayWithoutLen(this.currentInfo.marshall()),
                                e.pushUInt8(this.appid),
                                e.pushUInt32(this.clientAppid),
                                e.pushUInt32(this.clientType),
                                e.pushUInt32(this.ip),
                                e.pushUInt32(this.sendTime),
                                e.pushUInt32(this.sdkVersion),
                                e.pushUInt64(this.imsi),
                                e.marshall()
                        }
                    }]),
                        e
                }();
                t.default = l
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(2))
                    , u = a(i(4))
                    , o = a(i(7))
                    , l = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.uid = 0,
                            this.cdnGroupId = new o.default,
                            this.sendTime = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new u.default;
                            return e.setUri(r.default.PCDNGetSliceStreamInfoReq),
                                e.pushUInt64(this.uid),
                                e.pushUint8ArrayWithoutLen(this.cdnGroupId.marshall()),
                                e.pushUInt32(this.sendTime),
                                e.marshall()
                        }
                    }]),
                        e
                }();
                t.default = l
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(2))
                    , u = a(i(4))
                    , o = a(i(7))
                    , l = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.cdnGroupId = new o.default,
                            this.publisher = 0,
                            this.subscriber = 0,
                            this.streamIndex = 0,
                            this.streamNum = 0,
                            this.version = ""
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new u.default;
                            return e.setUri(r.default.PCDNSubscribeReq),
                                e.pushUint8ArrayWithoutLen(this.cdnGroupId.marshall()),
                                e.pushUInt64(this.publisher),
                                e.pushUInt64(this.subscriber),
                                e.pushUInt8(this.streamIndex),
                                e.pushUInt8(this.streamNum),
                                e.pushString(this.version),
                                e.marshall()
                        }
                    }]),
                        e
                }();
                t.default = l
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(6))
                    , n = a(i(0))
                    , r = a(i(1))
                    , u = a(i(2))
                    , o = a(i(4))
                    , l = a(i(7))
                    , d = function() {
                    function e() {
                        (0,
                            n.default)(this, e),
                            this.cdnGroupId = new l.default,
                            this.uid = 0,
                            this.type = 0,
                            this.errmsg = "",
                            this.staticsMap = new s.default
                    }
                    return (0,
                        r.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new o.default;
                            return e.setUri(u.default.PCdnP2PErrStatics),
                                e.pushUint8ArrayWithoutLen(this.cdnGroupId.marshall()),
                                e.pushUInt64(this.uid),
                                e.pushUInt32(this.type),
                                e.pushString(this.errmsg),
                                e.pushUInt32(this.staticsMap.size),
                                this.staticsMap.forEach(function(t, i) {
                                    e.pushUInt32(i),
                                        e.pushUInt32(t)
                                }),
                                e.marshall()
                        }
                    }]),
                        e
                }();
                t.default = d
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(2))
                    , u = a(i(4))
                    , o = a(i(7))
                    , l = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.cdnGroupId = new o.default,
                            this.uid = 0,
                            this.clientType = 0,
                            this.tcpId = 0,
                            this.localIps = [],
                            this.localPort = 0,
                            this.token = "",
                            this.tokenVersion = 0,
                            this.version = "",
                            this.cdnLineType = 0,
                            this.fixedCdnStreamCount = 0,
                            this.sourceCodecRate = 0,
                            this.clearSubscribeInfo = 0,
                            this.maxCdnStreamCount = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new u.default;
                            return e.setUri(r.default.PCdnP2PUserRegister),
                                e.pushUint8ArrayWithoutLen(this.cdnGroupId.marshall()),
                                e.pushUInt64(this.uid),
                                e.pushUInt32(this.clientType),
                                e.pushUInt8(this.tcpId),
                                e.pushUInt32Vector(this.localIps),
                                e.pushUInt16(this.localPort),
                                e.pushString(this.token),
                                e.pushUInt32(this.tokenVersion),
                                e.pushString(this.version),
                                e.pushUInt8(this.cdnLineType),
                                e.pushUInt8(this.fixedCdnStreamCount),
                                e.pushUInt32(this.sourceCodecRate),
                                e.pushUInt8(this.clearSubscribeInfo),
                                e.pushUInt8(this.maxCdnStreamCount),
                                e.marshall()
                        }
                    }]),
                        e
                }();
                t.default = l
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(2))
                    , u = a(i(4))
                    , o = a(i(7))
                    , l = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.cdnGroupId = new o.default,
                            this.fromUid = 0,
                            this.toUid = 0,
                            this.subUri = 0,
                            this.payload = null
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new u.default;
                            return e.setUri(r.default.PCdnP2PWSForward),
                                e.pushUint8ArrayWithoutLen(this.cdnGroupId.marshall()),
                                e.pushUInt64(this.fromUid),
                                e.pushUInt64(this.toUid),
                                e.pushUInt32(this.subUri),
                                e.pushUint8Array(this.payload),
                                e.marshall()
                        }
                    }]),
                        e
                }();
                t.default = l
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(2))
                    , u = a(i(4))
                    , o = a(i(7))
                    , l = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.uid = 0,
                            this.cdnGroupId = new o.default
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new u.default;
                            return e.setUri(r.default.PCdnP2pGetNode),
                                e.pushUInt64(this.uid),
                                e.pushUint8ArrayWithoutLen(this.cdnGroupId.marshall()),
                                e.marshall()
                        }
                    }]),
                        e
                }();
                t.default = l
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(4))
                    , u = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.uid = 0,
                            this.wanip = 0,
                            this.wanport = 0,
                            this.lanips = [],
                            this.lanport = 0,
                            this.availPeers = 0,
                            this.bPunched = !1,
                            this.uplinkBw = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new r.default(!1);
                            return e.pushUInt64(this.uid),
                                e.pushUInt32(this.wanip),
                                e.pushUInt16(this.wanport),
                                e.pushUInt32Vector(this.lanips),
                                e.pushUInt16(this.lanport),
                                e.pushUInt16(this.availPeers),
                                e.pushBool(this.bPunched),
                                e.pushUInt32(this.uplinkBw),
                                e.marshall()
                        }
                    }, {
                        key: "unmarshall",
                        value: function(e) {
                            this.uid = e.popUInt64(),
                                this.wanip = e.popUInt32(),
                                this.wanport = e.popUInt16(),
                                this.lanips = e.popUInt32Vector(),
                                this.lanport = e.popUInt16(),
                                this.availPeers = e.popUInt16(),
                                this.bPunched = e.popBool(),
                                this.uplinkBw = e.popUInt32()
                        }
                    }]),
                        e
                }();
                t.default = u
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(2))
                    , u = a(i(4))
                    , o = a(i(7))
                    , l = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.cdnGroupId = new o.default,
                            this.uid = 0,
                            this.clientType = 0,
                            this.tcpId = 0,
                            this.cdnLineType = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new u.default;
                            return e.setUri(r.default.PCdnP2pUserUnRegister),
                                e.pushUint8ArrayWithoutLen(this.cdnGroupId.marshall()),
                                e.pushUInt64(this.uid),
                                e.pushUInt8(this.clientType),
                                e.pushUInt8(this.tcpId),
                                e.pushUInt8(this.cdnLineType),
                                e.marshall()
                        }
                    }]),
                        e
                }();
                t.default = l
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(2))
                    , u = a(i(4))
                    , o = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.appid = 0,
                            this.uid = 0,
                            this.sid = 0,
                            this.stampc = 0,
                            this.loginStamp = 0,
                            this.uplinkBw = 0,
                            this.availPeers = 0,
                            this.bPunched = !1,
                            this.cdnLineType = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new u.default;
                            return e.setUri(r.default.PCdnProxyPing),
                                e.pushUInt32(this.appid),
                                e.pushUInt64(this.uid),
                                e.pushUInt64(this.sid),
                                e.pushUInt32(this.stampc),
                                e.pushUInt32(this.loginStamp),
                                e.pushUInt32(this.uplinkBw),
                                e.pushUInt16(this.availPeers),
                                e.pushBool(this.bPunched),
                                e.pushUInt8(this.cdnLineType),
                                e.marshall()
                        }
                    }]),
                        e
                }();
                t.default = o
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(2))
                    , u = a(i(4))
                    , o = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.seq = 0,
                            this.checkSum = 0,
                            this.codecType = 0,
                            this.streamData = null
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new u.default;
                            return e.setUri(r.default.PP2pSliceAudioData),
                                e.pushUInt8(this.checkSum),
                                e.pushUInt16(this.codecType),
                                e.pushUint8Array(this.streamData),
                                e.marshall()
                        }
                    }, {
                        key: "unmarshall",
                        value: function(e) {
                            return this.checkSum = e.popUInt8(),
                                this.codecType = e.popUInt16(),
                                this.streamData = e.popUint8Array(),
                                this
                        }
                    }]),
                        e
                }();
                t.default = o
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(2))
                    , u = a(i(4))
                    , o = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.seq = 0,
                            this.strData = null
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new u.default;
                            return e.setUri(r.default.PP2pSliceControlData),
                                e.pushUint8Array(this.strData),
                                e.marshall()
                        }
                    }, {
                        key: "unmarshall",
                        value: function(e) {
                            return this.strData = e.popUint8Array(),
                                this
                        }
                    }]),
                        e
                }();
                t.default = o
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(6))
                    , n = a(i(0))
                    , r = a(i(1))
                    , u = a(i(2))
                    , o = a(i(4))
                    , l = function() {
                    function e() {
                        (0,
                            n.default)(this, e),
                            this.seq = 0,
                            this.uid = 0,
                            this.checkSum = 0,
                            this.seqNum = 0,
                            this.frameNum = 0,
                            this.frameId = 0,
                            this.config = new s.default,
                            this.streamData = null
                    }
                    return (0,
                        r.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new o.default;
                            return e.setUri(u.default.PP2pSliceVideoData),
                                e.pushUInt8(this.checkSum),
                                e.pushUInt16(this.seqNum),
                                e.pushUInt16(this.frameNum),
                                e.pushUInt32(this.frameId),
                                e.pushUInt32(this.config.size),
                                this.config.forEach(function(t, i) {
                                    e.pushUInt8(i),
                                        e.pushUInt32(t)
                                }),
                                e.pushUint8Array(this.streamData),
                                e.marshall()
                        }
                    }, {
                        key: "unmarshall",
                        value: function(e) {
                            this.checkSum = e.popUInt8(),
                                this.seqNum = e.popUInt16(),
                                this.frameNum = e.popUInt16(),
                                this.frameId = e.popUInt32(),
                                this.config.clear();
                            for (var t = e.popUInt32(), i = 0; i < t; i++) {
                                var a = e.popUInt8()
                                    , s = e.popUInt32();
                                this.config.set(a, s)
                            }
                            return this.streamData = e.popUint8Array(),
                                this
                        }
                    }]),
                        e
                }();
                t.default = l
            }
            , function(e, t, i) {
                function a(e) {
                    var t = s(e);
                    return i(t)
                }
                function s(e) {
                    var t = n[e];
                    if (!(t + 1)) {
                        var i = new Error("Cannot find module '" + e + "'");
                        throw i.code = "MODULE_NOT_FOUND",
                            i
                    }
                    return t
                }
                var n = {
                    "./ApToken": 127,
                    "./ApToken.js": 127,
                    "./CurrentProxyInfo": 128,
                    "./CurrentProxyInfo.js": 128,
                    "./FuzzyQueryKey": 66,
                    "./FuzzyQueryKey.js": 66,
                    "./FuzzyQueryParam": 129,
                    "./FuzzyQueryParam.js": 129,
                    "./IpInfo": 130,
                    "./IpInfo.js": 130,
                    "./MeasureValueType": 131,
                    "./MeasureValueType.js": 131,
                    "./MetaDataInfo": 132,
                    "./MetaDataInfo.js": 132,
                    "./PAudienceGetProxyListReq": 133,
                    "./PAudienceGetProxyListReq.js": 133,
                    "./PAudienceGetProxyListRsp": 184,
                    "./PAudienceGetProxyListRsp.js": 184,
                    "./PForceConnectVideoProxy3": 185,
                    "./PForceConnectVideoProxy3.js": 185,
                    "./PLoginVideoProxyUniformly": 67,
                    "./PLoginVideoProxyUniformly.js": 67,
                    "./PLoginVideoProxyUniformlyRes": 136,
                    "./PLoginVideoProxyUniformlyRes.js": 136,
                    "./PNotifyCurrentStream4": 186,
                    "./PNotifyCurrentStream4.js": 186,
                    "./PNotifyStreamSwitch": 187,
                    "./PNotifyStreamSwitch.js": 187,
                    "./PNotifyUplinkRecvCount3": 188,
                    "./PNotifyUplinkRecvCount3.js": 188,
                    "./PP2pVideoPing3": 189,
                    "./PP2pVideoPing3.js": 189,
                    "./PPullStreamData": 137,
                    "./PPullStreamData.js": 137,
                    "./PReSendStreamData4": 138,
                    "./PReSendStreamData4.js": 138,
                    "./PResendStreamDataFailAck": 190,
                    "./PResendStreamDataFailAck.js": 190,
                    "./PStopStream": 191,
                    "./PStopStream.js": 191,
                    "./PStopStream3": 139,
                    "./PStopStream3.js": 139,
                    "./PStreamData3": 68,
                    "./PStreamData3.js": 68,
                    "./PSubscribeStream3": 140,
                    "./PSubscribeStream3.js": 140,
                    "./PSubscribeStreamRes3": 192,
                    "./PSubscribeStreamRes3.js": 192,
                    "./PUpdateVideoConfig2": 193,
                    "./PUpdateVideoConfig2.js": 193,
                    "./PVideoBroadcast4": 194,
                    "./PVideoBroadcast4.js": 194,
                    "./PVideoProxyPing3": 69,
                    "./PVideoProxyPing3.js": 69,
                    "./PVideoProxyPingRes4": 195,
                    "./PVideoProxyPingRes4.js": 195,
                    "./PVideoSyncSpeakerTime3": 141,
                    "./PVideoSyncSpeakerTime3.js": 141,
                    "./SlaveProxyInfo": 51,
                    "./SlaveProxyInfo.js": 51,
                    "./StreamAllocateInfo": 134,
                    "./StreamAllocateInfo.js": 134,
                    "./StreamCodecType": 50,
                    "./StreamCodecType.js": 50,
                    "./StreamGroupID": 12,
                    "./StreamGroupID.js": 12,
                    "./StreamType": 49,
                    "./StreamType.js": 49,
                    "./SubscribeResCode": 142,
                    "./SubscribeResCode.js": 142,
                    "./VoiceChatEx": 143,
                    "./VoiceChatEx.js": 143,
                    "./VpToken": 135,
                    "./VpToken.js": 135
                };
                a.keys = function() {
                    return Object.keys(n)
                }
                    ,
                    a.resolve = s,
                    e.exports = a,
                    a.id = 126
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(4))
                    , u = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.strToken = ""
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new r.default(!1);
                            return e.pushString(this.strToken),
                                e.marshall()
                        }
                    }]),
                        e
                }();
                t.default = u
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(6))
                    , n = a(i(0))
                    , r = a(i(1))
                    , u = a(i(4))
                    , o = a(i(12))
                    , l = a(i(51))
                    , d = function() {
                    function e() {
                        (0,
                            n.default)(this, e),
                            this.currentProxyInfos = new s.default
                    }
                    return (0,
                        r.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new u.default(!1);
                            return e.pushUInt32(this.currentProxyInfos.size),
                                this.currentProxyInfos.forEach(function(t, i) {
                                    e.pushUint8ArrayWithoutLen(i.marshall()),
                                        e.pushUInt32(t.length),
                                        t.forEach(function(t) {
                                            e.pushUint8ArrayWithoutLen(t.marshall())
                                        })
                                }),
                                e.marshall()
                        }
                    }, {
                        key: "unmarshall",
                        value: function(e) {
                            this.currentProxyInfos.clear();
                            for (var t = e.popUInt32(), i = 0; i < t; i++) {
                                var a = new o.default;
                                a.unmarshall(e);
                                for (var s = [], n = e.popUInt32(), r = 0; r < n; r++) {
                                    var u = new l.default;
                                    s.push(u.unmarshall(e))
                                }
                                this.currentProxyInfos.set(a, s)
                            }
                            return this
                        }
                    }]),
                        e
                }();
                t.default = d
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(4))
                    , u = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.h264Only = !1,
                            this.maxCodeRateH264 = 0,
                            this.maxCodeRateH265 = 0,
                            this.reserve = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new r.default(!1);
                            return e.pushBool(this.h264Only),
                                e.pushUInt16(this.maxCodeRateH264),
                                e.pushUInt16(this.maxCodeRateH265),
                                e.pushUInt32(this.reserve),
                                e.marshall()
                        }
                    }, {
                        key: "unmarshall",
                        value: function(e) {
                            return this.h264Only = e.popBool(),
                                this.maxCodeRateH264 = e.popUInt16(),
                                this.maxCodeRateH265 = e.popUInt16(),
                                this.reserve = e.popUInt32(),
                                this
                        }
                    }]),
                        e
                }();
                t.default = u
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.ip = 0,
                            this.tcpPorts = [],
                            this.udpPorts = []
                    }
                    return (0,
                        n.default)(e, [{
                        key: "unmarshall",
                        value: function(e) {
                            return this.ip = e.popUInt32(),
                                this.tcpPorts = e.popUInt16Vector(),
                                this.udpPorts = e.popUInt16Vector(),
                                this
                        }
                    }]),
                        e
                }();
                t.default = r
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.hopId = 0,
                            this.value = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "unmarshall",
                        value: function(e) {
                            return this.hopId = e.popUInt64(),
                                this.value = e.popUInt32(),
                                this
                        }
                    }]),
                        e
                }();
                t.default = r
            }
            , function(e, t, i) {
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var a = {
                    PUBLISHER_CUR_BIT_RATE: 7,
                    SERVER_H265_STREAM: 112,
                    SERVER_FASTACCESS_MODE: 113,
                    SERVER_FASTACCESS_FIRST_DTS: 117,
                    SERVER_FASTACCESS_LAST_DTS: 118
                };
                t.default = a
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(2))
                    , u = a(i(4))
                    , o = (a(i(66)),
                    a(i(128)))
                    , l = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.uid = 0,
                            this.version = 0,
                            this.streamNames = [],
                            this.fuzzyQueryKeys = [],
                            this.currentInfo = new o.default,
                            this.appid = 0,
                            this.clientAppid = 0,
                            this.clientType = 0,
                            this.ip = 0,
                            this.sendTime = 0,
                            this.sdkVersion = 0,
                            this.imsi = 0,
                            this.useCase = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new u.default;
                            return e.setUri(r.default.PAudienceGetProxyListReq),
                                e.pushUInt64(this.uid),
                                e.pushUInt8(this.version),
                                e.pushUInt32(this.streamNames.length),
                                this.streamNames.forEach(function(t) {
                                    e.pushString(t)
                                }),
                                e.pushUInt32(this.fuzzyQueryKeys.length),
                                this.fuzzyQueryKeys.forEach(function(t) {
                                    e.pushUint8ArrayWithoutLen(t.marshall())
                                }),
                                e.pushUint8ArrayWithoutLen(this.currentInfo.marshall()),
                                e.pushUInt8(this.appid),
                                e.pushUInt32(this.clientAppid),
                                e.pushUInt32(this.clientType),
                                e.pushUInt32(this.ip),
                                e.pushUInt32(this.sendTime),
                                e.pushUInt32(this.sdkVersion),
                                e.pushUInt64(this.imsi),
                                e.pushUInt8(this.useCase),
                                e.marshall()
                        }
                    }]),
                        e
                }();
                t.default = l
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(12))
                    , u = a(i(51))
                    , o = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.streamId = new r.default,
                            this.videoProxyInfos = [],
                            this.token = ""
                    }
                    return (0,
                        n.default)(e, [{
                        key: "unmarshall",
                        value: function(e) {
                            this.streamId.unmarshall(e),
                                this.videoProxyInfos = [];
                            for (var t = e.popUInt32(), i = 0; i < t; i++) {
                                var a = new u.default;
                                this.videoProxyInfos.push(a.unmarshall(e))
                            }
                            return this.token = e.popString(),
                                this
                        }
                    }]),
                        e
                }();
                t.default = o
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(4))
                    , u = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.strToken = ""
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new r.default(!1);
                            return e.pushString(this.strToken),
                                e.marshall()
                        }
                    }]),
                        e
                }();
                t.default = u
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = (a(i(2)),
                    a(i(12)))
                    , u = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.streamGroupIds = [],
                            this.uid = 0,
                            this.wlanIp = 0,
                            this.wlanPort = 0,
                            this.reject = 0,
                            this.clientAreaType = 0,
                            this.proxyAreaType = 0,
                            this.firstViewer = 0,
                            this.clientAppid = 0,
                            this.subscribe = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "unmarshall",
                        value: function(e) {
                            this.streamGroupIds = [];
                            for (var t = e.popUInt32(), i = 0; i < t; i++) {
                                var a = new r.default;
                                this.streamGroupIds.push(a.unmarshall(e))
                            }
                            return this.uid = e.popUInt64(),
                                this.wlanIp = e.popUInt32(),
                                this.wlanPort = e.popUInt16(),
                                this.reject = e.popUInt8(),
                                this.clientAreaType = e.popUInt16(),
                                this.proxyAreaType = e.popUInt16(),
                                this.firstViewer = e.popUInt8(),
                                this.clientAppid = e.popUInt32(),
                                this.subscribe = e.popUInt8(),
                                this
                        }
                    }]),
                        e
                }();
                t.default = u
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(2))
                    , u = a(i(4))
                    , o = a(i(12))
                    , l = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.streamGroupId = new o.default,
                            this.uid = 0,
                            this.seqNums = []
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new u.default;
                            return e.setUri(r.default.PPullStreamData),
                                e.pushUint8ArrayWithoutLen(this.streamGroupId.marshall()),
                                e.pushUInt64(this.uid),
                                e.pushUInt32Vector(this.seqNums),
                                e.marshall()
                        }
                    }]),
                        e
                }();
                t.default = l
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(2))
                    , u = a(i(4))
                    , o = a(i(12))
                    , l = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.streamGroupId = new o.default,
                            this.sender = 0,
                            this.receiver = 0,
                            this.stampc = 0,
                            this.seqNums = [],
                            this.mergeSeq = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new u.default;
                            return e.setUri(r.default.PReSendStreamData4),
                                e.pushUint8ArrayWithoutLen(this.streamGroupId.marshall()),
                                e.pushUInt64(this.sender),
                                e.pushUInt64(this.receiver),
                                e.pushUInt32(this.stampc),
                                e.pushUInt32Vector(this.seqNums),
                                e.pushUInt32(this.mergeSeq),
                                e.marshall()
                        }
                    }]),
                        e
                }();
                t.default = l
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = (a(i(2)),
                    a(i(12)))
                    , u = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.streamGroupId = new r.default,
                            this.uid = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "unmarshall",
                        value: function(e) {
                            return this.streamGroupId.unmarshall(e),
                                this.uid = e.popUInt64(),
                                this
                        }
                    }]),
                        e
                }();
                t.default = u
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(2))
                    , u = a(i(4));
                a(i(12));
                var o = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.streamGroupIds = [],
                            this.uid = 0,
                            this.subscribe = !1,
                            this.option = 0,
                            this.playStamp = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new u.default;
                            return e.setUri(r.default.PSubscribeStream3),
                                e.pushUInt32(this.streamGroupIds.length),
                                this.streamGroupIds.forEach(function(t) {
                                    e.pushUint8ArrayWithoutLen(t.marshall())
                                }),
                                e.pushUInt64(this.uid),
                                e.pushBool(this.subscribe),
                                e.pushUInt32(this.option),
                                e.pushUInt32(this.playStamp),
                                e.marshall()
                        }
                    }]),
                        e
                }();
                t.default = o
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(6))
                    , n = a(i(0))
                    , r = a(i(1))
                    , u = (a(i(2)),
                    a(i(12)))
                    , o = function() {
                    function e() {
                        (0,
                            n.default)(this, e),
                            this.streamGroupId = new u.default,
                            this.uid = 0,
                            this.localTime = 0,
                            this.osTime = 0,
                            this.minBw = 0,
                            this.streamId2SpeakerDelay = new s.default,
                            this.curCodeRate = 0,
                            this.reserve = 0,
                            this.metaDatas = new s.default
                    }
                    return (0,
                        r.default)(e, [{
                        key: "unmarshall",
                        value: function(e) {
                            this.streamGroupId.unmarshall(e),
                                this.uid = e.popUInt64(),
                                this.localTime = e.popUInt32(),
                                this.osTime = e.popUInt32(),
                                this.minBw = e.popUInt32(),
                                this.streamId2SpeakerDelay.clear();
                            for (var t = e.popUInt32(), i = 0; i < t; i++) {
                                (s = new u.default).unmarshall(e);
                                var a = e.popUInt32();
                                this.streamId2SpeakerDelay.set(s, a)
                            }
                            for (this.curCodeRate = e.popUInt16(),
                                     this.reserve = e.popUInt32(),
                                     this.metaDatas.clear(),
                                     t = e.popUInt32(),
                                     i = 0; i < t; i++) {
                                var s = e.popUInt8();
                                a = e.popUInt32(),
                                    this.metaDatas.set(s, a)
                            }
                            return this
                        }
                    }]),
                        e
                }();
                t.default = o
            }
            , function(e, t, i) {
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }),
                    t.default = {
                        ACCEPT_SUBSCRIBE: 0,
                        EMPTY_UPLINK_BW: 1,
                        DETECT_SUBSCRIBE_CYCLE: 2,
                        EMPTY_PEER_INFO: 3,
                        SUBSCRIBE_UPLINK_NOT_ENOUGH: 4,
                        PUBLISHER_KICK_OFF: 5,
                        NOT_SUBSCRIBER: 6,
                        INVALID_SUB_STREAM: 7,
                        ACCEPT_BY_SUBSCRIBER_UPLINK: 9,
                        INVALID_STREAMID: 10,
                        SERVER_EMPTY_BW: 11,
                        PUBLISHER_LEAVE: 12,
                        DIFFERENT_VIDEO_PROXY: 13,
                        OLD_VERSION_REQ: 14,
                        SUBSCRIBER_NO_PERMISSION: 15
                    }
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.ssrc = 0,
                            this.framenum = 0,
                            this.type = 0,
                            this.framebase = 0,
                            this.critical = !1,
                            this.payload = null,
                            this.transMode = 0,
                            this.packData = !1,
                            this.bHasVideoSid = !1,
                            this.byteVoiceMarks = 0,
                            this.capTimeStamp = 0,
                            this.m_isMarshalVoiceMarks = !1
                    }
                    return (0,
                        n.default)(e, [{
                        key: "unmarshall",
                        value: function(t) {
                            this.capTimeStamp = t.popUInt32(),
                                this.ssrc = t.popUInt8();
                            var i = t.popUInt8();
                            return this.type = t.popUInt16(),
                                this.framebase = t.popUInt32(),
                                this.payload = t.popUint8Array(),
                                t.bytesAvailable() ? this.byteVoiceMarks = t.popUInt8() : this.byteVoiceMarks = e.VOICE_MARK_KEY_BIT0,
                                this.framenum = i & e.FRAMENUM_MASK,
                                this.critical = !!(i & e.CRITICAL_MASK),
                                this.bHasVideoSid = !!(i & e.VIDEOSID_MASK),
                                this.transMode = 1 + ((i & e.FTMMODE_MASK) >> 4),
                                this
                        }
                    }, {
                        key: "setIsKeyVoice",
                        value: function(t) {
                            this.byteVoiceMarks |= t ? e.VOICE_MARK_KEY_BIT0 : 0
                        }
                    }, {
                        key: "isKeyVoice",
                        get: function() {
                            return this.byteVoiceMarks & e.VOICE_MARK_KEY_BIT0
                        }
                    }]),
                        e
                }();
                r.FRAMENUM_MASK = 15,
                    r.FTMMODE_MASK = 48,
                    r.VIDEOSID_MASK = 64,
                    r.CRITICAL_MASK = 128,
                    r.VOICE_MARK_KEY_BIT0 = 1,
                    t.default = r
            }
            , function(e, t, i) {
                var a = {
                    buildAbsoluteURL: function(e, t) {
                        if (t = t.trim(),
                            /^[a-z]+:/i.test(t))
                            return t;
                        var i = null
                            , s = null
                            , n = /^([^#]*)(.*)$/.exec(t);
                        n && (s = n[2],
                            t = n[1]);
                        var r = /^([^\?]*)(.*)$/.exec(t);
                        r && (i = r[2],
                            t = r[1]);
                        var u = /^([^#]*)(.*)$/.exec(e);
                        u && (e = u[1]);
                        var o = /^([^\?]*)(.*)$/.exec(e);
                        o && (e = o[1]);
                        var l = /^((([a-z]+):)?\/\/[a-z0-9\.-]+(:[0-9]+)?\/)(.*)$/i.exec(e)
                            , d = l[3]
                            , h = l[1]
                            , f = l[5]
                            , c = null;
                        return c = /^\/\//.test(t) ? d + "://" + a.buildAbsolutePath("", t.substring(2)) : /^\//.test(t) ? h + a.buildAbsolutePath("", t.substring(1)) : h + a.buildAbsolutePath(f, t),
                        i && (c += i),
                        s && (c += s),
                            c
                    },
                    buildAbsolutePath: function(e, t) {
                        for (var i, a, s = t, n = "", r = e.replace(/[^\/]*$/, s.replace(/(\/|^)(?:\.?\/+)+/g, "$1")), u = 0; (a = r.indexOf("/../", u)) > -1; u = a + i)
                            i = /^\/(?:\.\.\/)*/.exec(r.slice(a))[0].length,
                                n = (n + r.substring(u, a)).replace(new RegExp("(?:\\/+[^\\/]*){0," + (i - 1) / 3 + "}$"), "/");
                        return n + r.substr(u)
                    },
                    getTimeFromUrl: function(e, t) {
                        var i = t ? /\d+_(\d+)_\d+.ts?/ : /(\d+)_\d+_\d+.ts?/
                            , a = e.match(i);
                        return a ? t ? a[1] : Math.round(a[1] / 1e3) : -1
                    },
                    getVodUrl: function(e, t, i, a) {
                        return "http://106.38.255.95:9123/xcrs/" + e + "_" + t + "_" + i + ".m3u8?btime=" + a
                    }
                };
                e.exports = a
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = function() {
                    function e() {
                        (0,
                            s.default)(this, e)
                    }
                    return (0,
                        n.default)(e, null, [{
                        key: "getSilentFrame",
                        value: function(e, t) {
                            if (2 === e) {
                                if (1 === t)
                                    return new Uint8Array([0, 200, 0, 128, 35, 128]);
                                if (2 === t)
                                    return new Uint8Array([33, 0, 73, 144, 2, 25, 0, 35, 128]);
                                if (3 === t)
                                    return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 142]);
                                if (4 === t)
                                    return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 128, 44, 128, 8, 2, 56]);
                                if (5 === t)
                                    return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0, 33, 144, 2, 56]);
                                if (6 === t)
                                    return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0, 33, 144, 2, 0, 178, 0, 32, 8, 224])
                            } else {
                                if (1 === t)
                                    return new Uint8Array([1, 64, 34, 128, 163, 78, 230, 128, 186, 8, 0, 0, 0, 28, 6, 241, 193, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
                                if (2 === t)
                                    return new Uint8Array([1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6, 241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
                                if (3 === t)
                                    return new Uint8Array([1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6, 241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94])
                            }
                            return null
                        }
                    }]),
                        e
                }();
                r.emptyAacFrameAdts = [255, 241, 92, 64, 18, 64, 252, 0, 208, 32, 6, 238, 90, 119, 128, 0, 128, 0, 0, 0, 0, 26, 37, 65, 0, 13, 237, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28],
                    r.emptyAacFrame = [0, 208, 32, 6, 238, 90, 119, 128, 0, 128, 0, 0, 0, 0, 26, 37, 65, 0, 13, 237, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28],
                    r.emptyAacFrame_44_1 = [1, 64, 34, 128, 163, 78, 129, 64, 0, 0, 0, 0, 4, 96, 6, 246, 81, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94],
                    t.default = r
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                function s(e) {
                    for (var t = [], i = e.peerNodes.length, a = 0; a < i; a++) {
                        var s = e.peerNodes[a];
                        _.default.isIgnore(s.uid) || _.default.hasNode(s.uid) || s.uid == m.default.presenterUid || t.push(s)
                    }
                    P.default.sendMetrics([{
                        sMetricName: P.default.METRIC.SDK_P2P_GET_NODE,
                        vField: {
                            total: i,
                            valid: t.length
                        }
                    }]),
                        _.default.setCandidates(t)
                }
                function n(e) {
                    var t = u(e);
                    -1 === t && _.default.isIgnoreActive(e.fromUid) && (t = S.default.offerReject.REASON_IGNORE),
                        -1 === t ? _.default.getOrNewNode(e.fromUid, "recvRequestOffer").connect() : b.sendOfferReject(e.fromUid, t)
                }
                function r(e) {
                    var t = u(e);
                    -1 === t && _.default.isIgnorePassive(e.fromUid) && (t = S.default.offerReject.REASON_IGNORE),
                        -1 === t ? _.default.getOrNewNode(e.fromUid, "recvOffer").recvOffer(e) : b.sendOfferReject(e.fromUid, t)
                }
                function u(e) {
                    return y.default.opened ? e.version !== y.default.version ? S.default.offerReject.REASON_VERSION : v(e) ? _.default.isPunchedMaxMore() ? S.default.offerReject.REASON_PUNCHED_FULL : _.default.isNodeMax() ? S.default.offerReject.REASON_QUOTA_EXHAUST : _.default.isWaiting(e.fromUid) ? S.default.offerReject.REASON_WAITING : _.default.isCooling(e.fromUid) ? S.default.offerReject.REASON_PUNCHFAILED_CD : -1 : S.default.offerReject.REASON_DIF_LINE : S.default.offerReject.REASON_NOTSTART
                }
                function o(e) {
                    v(e) ? _.default.hasNode(e.fromUid) && _.default.getNode(e.fromUid).recvAnswer(e) : b.sendOfferReject(e.fromUid, S.default.offerReject.REASON_DIF_LINE)
                }
                function l(e) {
                    v(e) && _.default.hasNode(e.fromUid) && _.default.getNode(e.fromUid).recvCandidate(e)
                }
                function d(e) {
                    _.default.hasNode(e.fromUid) && (e.rejectReason == S.default.offerReject.REASON_IGNORE || e.rejectReason == S.default.offerReject.REASON_FAIL ? _.default.delNode(e.fromUid, S.default.DEL_REASON.PEER_TIMEOUT) : _.default.delNode(e.fromUid, S.default.DEL_REASON.NODE_REJECT),
                        T.default.add(T.default.keys.PUNCH_FAIL_NUM, 1))
                }
                function h(e) {
                    v(e) ? _.default.recvPunchBackReq(e) : b.sendPunchBackRsp(e.fromUid, S.default.punchBackRet.DIF_STREAM)
                }
                function f(e) {
                    _.default.recvPunchBackRsp(e)
                }
                function c(e, t, i) {
                    var a = new E.default;
                    a.cdnGroupId = m.default.streamId,
                        a.fromUid = m.default.getUid(),
                        a.toUid = e,
                        a.subUri = t,
                        a.payload = i,
                        m.default.send(a)
                }
                function p(e) {
                    _.default.recvForwardReject(e)
                }
                function v(e) {
                    return e.cdnGroupId.equal(m.default.streamId) && (e.lineType === m.default.lineType || m.default.isMutiCdn() || m.default.isCrossCdn())
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var m = a(i(9))
                    , y = a(i(13))
                    , _ = a(i(21))
                    , S = a(i(10))
                    , g = a(i(2))
                    , T = a(i(16))
                    , P = a(i(18))
                    , I = (a(i(3)),
                    a(i(119)))
                    , E = a(i(118))
                    , k = a(i(98))
                    , R = a(i(108))
                    , C = a(i(102))
                    , L = a(i(97))
                    , A = a(i(103))
                    , M = a(i(104))
                    , U = a(i(105))
                    , b = {
                    initHandler: function() {
                        m.default.addListener(g.default.PCdnP2pGetNodeRes, s),
                            m.default.addListener(g.default.PCdnP2PWSForwardReject, p),
                            m.default.addListener(g.default.P2PRequestOffer, n),
                            m.default.addListener(g.default.P2POffer, r),
                            m.default.addListener(g.default.P2PAnswer, o),
                            m.default.addListener(g.default.P2PCandidate, l),
                            m.default.addListener(g.default.P2POfferReject, d),
                            m.default.addListener(g.default.P2PPunchBackReq, h),
                            m.default.addListener(g.default.P2PPunchBackRsp, f)
                    },
                    sendGetNode: function() {
                        var e = new I.default;
                        e.uid = m.default.getUid(),
                            e.cdnGroupId = m.default.streamId,
                            m.default.send(e)
                    },
                    sendRequestOffer: function(e) {
                        var t = new R.default;
                        t.cdnGroupId = m.default.streamId,
                            t.lineType = m.default.lineType,
                            t.fromUid = m.default.getUid(),
                            t.toUid = e,
                            t.uplinkBw = _.default.getUplinkBw(),
                            t.availPeerNodes = _.default.getPunchedCnt(),
                            t.version = y.default.version,
                            t.lowestVersion = 1,
                            c(e, g.default.P2PRequestOffer, t.marshall())
                    },
                    sendOffer: function(e, t) {
                        var i = new C.default;
                        i.cdnGroupId = m.default.streamId,
                            i.lineType = m.default.lineType,
                            i.fromUid = m.default.getUid(),
                            i.toUid = e,
                            i.sdp = t.sdp,
                            i.sdpType = t.type,
                            i.version = y.default.version,
                            c(e, g.default.P2POffer, i.marshall())
                    },
                    sendAnswer: function(e, t) {
                        var i = new L.default;
                        i.cdnGroupId = m.default.streamId,
                            i.lineType = m.default.lineType,
                            i.fromUid = m.default.getUid(),
                            i.toUid = e,
                            i.sdp = t.sdp,
                            i.sdpType = t.type,
                            c(e, g.default.P2PAnswer, i.marshall())
                    },
                    sendCandidate: function(e, t) {
                        var i = new k.default;
                        i.cdnGroupId = m.default.streamId,
                            i.lineType = m.default.lineType,
                            i.fromUid = m.default.getUid(),
                            i.toUid = e,
                            i.sdpMLineIndex = t.sdpMLineIndex,
                            i.sdpMid = t.sdpMid,
                            i.candidate = t.candidate,
                            c(e, g.default.P2PCandidate, i.marshall())
                    },
                    sendOfferReject: function(e, t) {
                        var i = new A.default;
                        i.cdnGroupId = m.default.streamId,
                            i.lineType = m.default.lineType,
                            i.fromUid = m.default.getUid(),
                            i.toUid = e,
                            i.rejectReason = t,
                            c(e, g.default.P2POfferReject, i.marshall())
                    },
                    sendPunchBackReq: function(e) {
                        var t = new M.default;
                        t.cdnGroupId = m.default.streamId,
                            t.fromUid = m.default.getUid(),
                            t.lineType = m.default.lineType,
                            t.version = y.default.version,
                            c(e, g.default.P2PPunchBackReq, t.marshall())
                    },
                    sendPunchBackRsp: function(e, t) {
                        var i = new U.default;
                        i.fromUid = m.default.getUid(),
                            i.ret = t,
                            c(e, g.default.P2PPunchBackRsp, i.marshall())
                    }
                };
                t.default = b
            }
            , function(e, t, i) {
                function s(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                t.__esModule = !0;
                var n = s(i(212))
                    , r = s(i(223))
                    , u = "function" == typeof r.default && "symbol" == a(n.default) ? function(e) {
                        return void 0 === e ? "undefined" : a(e)
                    }
                    : function(e) {
                        return e && "function" == typeof r.default && e.constructor === r.default && e !== r.default.prototype ? "symbol" : void 0 === e ? "undefined" : a(e)
                    }
                ;
                t.default = "function" == typeof r.default && "symbol" === u(n.default) ? function(e) {
                        return void 0 === e ? "undefined" : u(e)
                    }
                    : function(e) {
                        return e && "function" == typeof r.default && e.constructor === r.default && e !== r.default.prototype ? "symbol" : void 0 === e ? "undefined" : u(e)
                    }
            }
            , function(e, t) {
                e.exports = function(e) {
                    if ("function" != typeof e)
                        throw TypeError(e + " is not a function!");
                    return e
                }
            }
            , function(e, t, i) {
                e.exports = !i(26) && !i(38)(function() {
                    return 7 != Object.defineProperty(i(150)("div"), "a", {
                        get: function() {
                            return 7
                        }
                    }).a
                })
            }
            , function(e, t, i) {
                var a = i(30)
                    , s = i(25).document
                    , n = a(s) && a(s.createElement);
                e.exports = function(e) {
                    return n ? s.createElement(e) : {}
                }
            }
            , function(e, t, i) {
                e.exports = i(29)
            }
            , function(e, t, i) {
                var a = i(32)
                    , s = i(40)
                    , n = i(217)(!1)
                    , r = i(82)("IE_PROTO");
                e.exports = function(e, t) {
                    var i, u = s(e), o = 0, l = [];
                    for (i in u)
                        i != r && a(u, i) && l.push(i);
                    for (; t.length > o; )
                        a(u, i = t[o++]) && (~n(l, i) || l.push(i));
                    return l
                }
            }
            , function(e, t) {
                e.exports = function(e, t) {
                    return {
                        value: t,
                        done: !!e
                    }
                }
            }
            , function(e, t, i) {
                var a = i(81);
                e.exports = Array.isArray || function(e) {
                    return "Array" == a(e)
                }
            }
            , function(e, t, i) {
                var a = i(152)
                    , s = i(84).concat("length", "prototype");
                t.f = Object.getOwnPropertyNames || function(e) {
                    return a(e, s)
                }
            }
            , function(e, t, i) {
                var a = i(22).f
                    , s = i(79)
                    , n = i(157)
                    , r = i(37)
                    , u = i(158)
                    , o = i(62)
                    , l = i(77)
                    , d = i(153)
                    , h = i(240)
                    , f = i(26)
                    , c = i(86).fastKey
                    , p = i(92)
                    , v = f ? "_s" : "size"
                    , m = function(e, t) {
                    var i, a = c(t);
                    if ("F" !== a)
                        return e._i[a];
                    for (i = e._f; i; i = i.n)
                        if (i.k == t)
                            return i
                };
                e.exports = {
                    getConstructor: function(e, t, i, l) {
                        var d = e(function(e, a) {
                            u(e, d, t, "_i"),
                                e._t = t,
                                e._i = s(null),
                                e._f = void 0,
                                e._l = void 0,
                                e[v] = 0,
                            void 0 != a && o(a, i, e[l], e)
                        });
                        return n(d.prototype, {
                            clear: function() {
                                for (var e = p(this, t), i = e._i, a = e._f; a; a = a.n)
                                    a.r = !0,
                                    a.p && (a.p = a.p.n = void 0),
                                        delete i[a.i];
                                e._f = e._l = void 0,
                                    e[v] = 0
                            },
                            delete: function(e) {
                                var i = p(this, t)
                                    , a = m(i, e);
                                if (a) {
                                    var s = a.n
                                        , n = a.p;
                                    delete i._i[a.i],
                                        a.r = !0,
                                    n && (n.n = s),
                                    s && (s.p = n),
                                    i._f == a && (i._f = s),
                                    i._l == a && (i._l = n),
                                        i[v]--
                                }
                                return !!a
                            },
                            forEach: function(e) {
                                p(this, t);
                                for (var i, a = r(e, arguments.length > 1 ? arguments[1] : void 0, 3); i = i ? i.n : this._f; )
                                    for (a(i.v, i.k, this); i && i.r; )
                                        i = i.p
                            },
                            has: function(e) {
                                return !!m(p(this, t), e)
                            }
                        }),
                        f && a(d.prototype, "size", {
                            get: function() {
                                return p(this, t)[v]
                            }
                        }),
                            d
                    },
                    def: function(e, t, i) {
                        var a, s, n = m(e, t);
                        return n ? n.v = i : (e._l = n = {
                            i: s = c(t, !0),
                            k: t,
                            v: i,
                            p: a = e._l,
                            n: void 0,
                            r: !1
                        },
                        e._f || (e._f = n),
                        a && (a.n = n),
                            e[v]++,
                        "F" !== s && (e._i[s] = n)),
                            e
                    },
                    getEntry: m,
                    setStrong: function(e, t, i) {
                        l(e, t, function(e, i) {
                            this._t = p(e, t),
                                this._k = i,
                                this._l = void 0
                        }, function() {
                            for (var e = this._k, t = this._l; t && t.r; )
                                t = t.p;
                            return this._t && (this._l = t = t ? t.n : this._t._f) ? d(0, "keys" == e ? t.k : "values" == e ? t.v : [t.k, t.v]) : (this._t = void 0,
                                d(1))
                        }, i ? "entries" : "values", !i, !0),
                            h(t)
                    }
                }
            }
            , function(e, t, i) {
                var a = i(29);
                e.exports = function(e, t, i) {
                    for (var s in t)
                        i && e[s] ? e[s] = t[s] : a(e, s, t[s]);
                    return e
                }
            }
            , function(e, t) {
                e.exports = function(e, t, i, a) {
                    if (!(e instanceof t) || void 0 !== a && a in e)
                        throw TypeError(i + ": incorrect invocation!");
                    return e
                }
            }
            , function(e, t, i) {
                var a = i(31);
                e.exports = function(e, t, i, s) {
                    try {
                        return s ? t(a(i)[0], i[1]) : t(i)
                    } catch (t) {
                        var n = e.return;
                        throw void 0 !== n && a(n.call(e)),
                            t
                    }
                }
            }
            , function(e, t, i) {
                var a = i(39)
                    , s = i(19)("iterator")
                    , n = Array.prototype;
                e.exports = function(e) {
                    return void 0 !== e && (a.Array === e || n[s] === e)
                }
            }
            , function(e, t, i) {
                var a = i(25)
                    , s = i(24)
                    , n = i(86)
                    , r = i(38)
                    , u = i(29)
                    , o = i(157)
                    , l = i(62)
                    , d = i(158)
                    , h = i(30)
                    , f = i(58)
                    , c = i(22).f
                    , p = i(241)(0)
                    , v = i(26);
                e.exports = function(e, t, i, m, y, _) {
                    var S = a[e]
                        , g = S
                        , T = y ? "set" : "add"
                        , P = g && g.prototype
                        , I = {};
                    return v && "function" == typeof g && (_ || P.forEach && !r(function() {
                        (new g).entries().next()
                    })) ? (g = t(function(t, i) {
                        d(t, g, e, "_c"),
                            t._c = new S,
                        void 0 != i && l(i, y, t[T], t)
                    }),
                        p("add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON".split(","), function(e) {
                            var t = "add" == e || "set" == e;
                            e in P && (!_ || "clear" != e) && u(g.prototype, e, function(i, a) {
                                if (d(this, g, e),
                                !t && _ && !h(i))
                                    return "get" == e && void 0;
                                var s = this._c[e](0 === i ? 0 : i, a);
                                return t ? this : s
                            })
                        }),
                    _ || c(g.prototype, "size", {
                        get: function() {
                            return this._c.size
                        }
                    })) : (g = m.getConstructor(t, e, y, T),
                        o(g.prototype, i),
                        n.NEED = !0),
                        f(g, e),
                        I[e] = g,
                        s(s.G + s.W + s.F, I),
                    _ || m.setStrong(g, e, y),
                        g
                }
            }
            , function(e, t, i) {
                var a = i(91)
                    , s = i(245);
                e.exports = function(e) {
                    return function() {
                        if (a(this) != e)
                            throw TypeError(e + "#toJSON isn't generic");
                        return s(this)
                    }
                }
            }
            , function(e, t, i) {
                var a = i(24);
                e.exports = function(e) {
                    a(a.S, e, {
                        of: function() {
                            for (var e = arguments.length, t = new Array(e); e--; )
                                t[e] = arguments[e];
                            return new this(t)
                        }
                    })
                }
            }
            , function(e, t, i) {
                var a = i(24)
                    , s = i(148)
                    , n = i(37)
                    , r = i(62);
                e.exports = function(e) {
                    a(a.S, e, {
                        from: function(e) {
                            var t, i, a, u, o = arguments[1];
                            return s(this),
                            (t = void 0 !== o) && s(o),
                                void 0 == e ? new this : (i = [],
                                    t ? (a = 0,
                                        u = n(o, arguments[2], 2),
                                        r(e, !1, function(e) {
                                            i.push(u(e, a++))
                                        })) : r(e, !1, i.push, i),
                                    new this(i))
                        }
                    })
                }
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(5))
                    , u = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.osTime = 0,
                            this.syncLocalTime = 0,
                            this.rttList = []
                    }
                    return (0,
                        n.default)(e, [{
                        key: "convertToSrvTime",
                        value: function(e) {
                            if (0 === this.osTime)
                                return 0;
                            var t = e - this.osTime;
                            return this.syncLocalTime + t
                        }
                    }, {
                        key: "isFinishNtp",
                        value: function() {
                            return 0 !== this.osTime
                        }
                    }, {
                        key: "ntpProcess",
                        value: function(e, t) {
                            var i = r.default.now()
                                , a = i - e
                                , s = Math.round(t + a / 2);
                            if (0 === this.osTime && 0 === this.syncLocalTime)
                                this.osTime = i,
                                    this.syncLocalTime = s,
                                    this.rttList.push(a);
                            else if (this.rttList.length < 10)
                                this.osTime = i,
                                    this.syncLocalTime = s,
                                    this.rttList.push(a);
                            else {
                                for (var n = [], u = 0; u < this.rttList.length; ++u)
                                    n.push(this.rttList[u]);
                                n.sort(function(e, t) {
                                    return e - t
                                });
                                for (var o = 0, l = 0; l < 4; ++l)
                                    o += n[l];
                                var d = o >> 2;
                                4 * a > 3 * d && 4 * a < 5 * d ? (this.osTime = i,
                                    this.syncLocalTime = s) : a > 6e4 && (this.osTime = i,
                                    this.syncLocalTime = s),
                                    this.rttList.shift(),
                                    this.rttList.push(a),
                                    n = null
                            }
                        }
                    }]),
                        e
                }();
                t.default = u
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(4))
                    , u = a(i(7))
                    , o = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.cdnGroupId = new u.default,
                            this.userCnt = 0,
                            this.virUserCnt = 0,
                            this.codeRate = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new r.default(!1);
                            return e.pushUint8ArrayWithoutLen(this.cdnGroupId.marshall()),
                                e.pushUInt32(this.userCnt),
                                e.pushUInt32(this.virUserCnt),
                                e.pushUInt32(this.codeRate),
                                e.marshall()
                        }
                    }, {
                        key: "unmarshall",
                        value: function(e) {
                            return this.cdnGroupId.unmarshall(e),
                                this.userCnt = e.popUInt32(),
                                this.virUserCnt = e.popUInt32(),
                                this.codeRate = e.popUInt32(),
                                this
                        }
                    }]),
                        e
                }();
                t.default = o
            }
            , function(e, t, i) {
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }),
                    t.default = {
                        eSliceCfgStartIndexH: 1,
                        eSliceCfgStartIndexL: 2,
                        eSliceCfgIStampc: 3,
                        eSliceCfgPreQuickIndex: 5,
                        eSliceCfgFAPatchIndexH: 8,
                        eSliceCfgFAPatchIndexL: 9,
                        eSliceCfgStreamIdH: 10,
                        eSliceCfgStreamIdL: 11
                    }
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.ip = 0,
                            this.tcpPorts = [],
                            this.udpPorts = []
                    }
                    return (0,
                        n.default)(e, [{
                        key: "unmarshall",
                        value: function(e) {
                            return this.ip = e.popUInt32(),
                                this.tcpPorts = e.popUInt16Vector(),
                                this.udpPorts = e.popUInt16Vector(),
                                this
                        }
                    }]),
                        e
                }();
                t.default = r
            }
            , function(e, t, i) {
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }),
                    t.default = {
                        ACCEPT_SUBSCRIBE: 0,
                        DETECT_SUBSCRIBE_CYCLE: 1,
                        SUBSCRIBE_UPLINK_NOT_ENOUGH: 2
                    }
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(4))
                    , u = a(i(2))
                    , o = a(i(7))
                    , l = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.cdnGroupId = new o.default,
                            this.fromUid = 0,
                            this.streamIndex = 0,
                            this.depth = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new r.default;
                            return e.setUri(u.default.P2PSyncDepth),
                                e.pushUInt64(this.fromUid),
                                e.pushUint8ArrayWithoutLen(this.cdnGroupId.marshall()),
                                e.pushUInt8(this.streamIndex),
                                e.pushUInt8(this.depth),
                                e.marshall()
                        }
                    }, {
                        key: "unmarshall",
                        value: function(e) {
                            this.fromUid = e.popUInt64(),
                                this.cdnGroupId.unmarshall(e),
                                this.streamIndex = e.popUInt8(),
                                this.depth = e.popUInt8()
                        }
                    }]),
                        e
                }();
                t.default = l
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(4))
                    , u = a(i(2))
                    , o = a(i(7))
                    , l = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.cdnGroupId = new o.default,
                            this.uid = 0,
                            this.streamIndex = 0,
                            this.subTree = []
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new r.default;
                            return e.setUri(u.default.P2PSyncSubTree),
                                e.pushUint8ArrayWithoutLen(this.cdnGroupId.marshall()),
                                e.pushUInt64(this.uid),
                                e.pushUInt8(this.streamIndex),
                                e.pushUInt32Vector(this.subTree),
                                e.marshall()
                        }
                    }, {
                        key: "unmarshall",
                        value: function(e) {
                            this.cdnGroupId.unmarshall(e),
                                this.uid = e.popUInt64(),
                                this.streamIndex = e.popUInt8(),
                                this.subTree = e.popUInt32Vector()
                        }
                    }]),
                        e
                }();
                t.default = l
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(4))
                    , u = a(i(2))
                    , o = function() {
                    function e(t, i, a, n, r) {
                        (0,
                            s.default)(this, e),
                            this.groupId = t,
                            this.fromUid = i,
                            this.toUid = a,
                            this.subUri = n,
                            this.payload = r
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new r.default;
                            return e.setUri(u.default.PP2PWSForward),
                                e.pushUint8ArrayWithoutLen(this.groupId.marshall()),
                                e.pushUInt64(this.fromUid),
                                e.pushUInt64(this.toUid),
                                e.pushUInt32(this.subUri),
                                e.pushUint8Array(this.payload),
                                e.marshall()
                        }
                    }, {
                        key: "unmarshall",
                        value: function(e) {
                            this.groupId.unmarshall(e),
                                this.fromUid = e.popUInt64(),
                                this.toUid = e.popUInt64(),
                                this.subUri = e.popUInt32(),
                                this.payload = e.popUint8Array()
                        }
                    }]),
                        e
                }();
                t.default = o
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(254))
                    , n = a(i(0))
                    , r = a(i(1))
                    , u = a(i(7))
                    , o = function() {
                    function e() {
                        (0,
                            n.default)(this, e),
                            this.cdnGroupId = new u.default,
                            this.subscriber = 0,
                            this.csMinBw = 0,
                            this.subStreamIndex = [],
                            this.ret = 0,
                            this.remainP2pStreamNum = 0,
                            this.SNBw = 0
                    }
                    return (0,
                        r.default)(e, [{
                        key: "unmarshall",
                        value: function(e) {
                            this.cdnGroupId.unmarshall(e),
                                this.subscriber = e.popUInt64(),
                                this.csMinBw = e.popUInt32(),
                                this.subStreamIndex = (0,
                                    s.default)(e.popUint8Array32()),
                                this.ret = e.popUInt8(),
                                this.remainP2pStreamNum = e.popUInt32(),
                                this.SNBw = e.popUInt32()
                        }
                    }]),
                        e
                }();
                t.default = o
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = (a(i(2)),
                    a(i(95)))
                    , u = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.uid = 0,
                            this.allocatedStreams = [],
                            this.clientAppid = 0,
                            this.clientType = 0,
                            this.sendTime = 0,
                            this.userArea = 0,
                            this.videoGroupId = 0,
                            this.retryType = 0,
                            this.retryFreq = 0,
                            this.result = 0,
                            this.proxyType = 0,
                            this.tokenVersion = 0,
                            this.sslUrl = ""
                    }
                    return (0,
                        n.default)(e, [{
                        key: "unmarshall",
                        value: function(e) {
                            this.uid = e.popUInt64(),
                                this.allocatedStreams = [];
                            for (var t = e.popUInt32(), i = 0; i < t; i++) {
                                var a = new r.default;
                                this.allocatedStreams.push(a.unmarshall(e))
                            }
                            return this.clientAppid = e.popUInt32(),
                                this.clientType = e.popUInt32(),
                                this.sendTime = e.popUInt32(),
                                this.userArea = e.popUInt32(),
                                this.videoGroupId = e.popUInt32(),
                                this.retryType = e.popUInt8(),
                                this.retryFreq = e.popUInt16(),
                                this.result = e.popUInt32(),
                                this.proxyType = e.popUInt32(),
                                this.tokenVersion = e.popUInt32(),
                                this.sslUrl = e.popString(),
                                this
                        }
                    }]),
                        e
                }();
                t.default = u
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = (a(i(2)),
                    a(i(7)))
                    , u = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.cdnGroupId = new r.default,
                            this.streamSeqSN = 0,
                            this.quickAccessBeginIndex = 0,
                            this.quickAccessEndIndex = 0,
                            this.ip = 0,
                            this.urlTokenTime = 0,
                            this.urlToken = "",
                            this.sendTime = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "unmarshall",
                        value: function(e) {
                            return this.cdnGroupId.unmarshall(e),
                                this.streamSeqSN = e.popUInt64(),
                                this.quickAccessBeginIndex = e.popUInt64(),
                                this.quickAccessEndIndex = e.popUInt64(),
                                this.ip = e.popUInt32(),
                                this.urlTokenTime = e.popUInt32(),
                                this.urlToken = e.popString(),
                                this.sendTime = e.popUInt32(),
                                this
                        }
                    }]),
                        e
                }();
                t.default = u
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(7))
                    , u = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.cdnGroupId = new r.default,
                            this.publisher = 0,
                            this.subscriber = 0,
                            this.streamIndex = 0,
                            this.streamNum = 0,
                            this.ret = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "unmarshall",
                        value: function(e) {
                            this.cdnGroupId.unmarshall(e),
                                this.publisher = e.popUInt64(),
                                this.subscriber = e.popUInt64(),
                                this.streamIndex = e.popUInt8(),
                                this.streamNum = e.popUInt8(),
                                this.ret = e.popUInt8()
                        }
                    }]),
                        e
                }();
                t.default = u
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(48))
                    , u = a(i(7))
                    , o = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.cdnGroupId = new u.default,
                            this.reconnectTime = 0,
                            this.reconnectStatu = 0,
                            this.videoProxyIpInfo = [],
                            this.reason = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "unmarshall",
                        value: function(e) {
                            this.cdnGroupId.unmarshall(e),
                                this.reconnectTime = e.popUInt32(),
                                this.reconnectStatu = e.popUInt8(),
                                this.videoProxyIpInfo = e.popObjVector(r.default)
                        }
                    }]),
                        e
                }();
                t.default = o
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(6))
                    , n = a(i(0))
                    , r = a(i(1))
                    , u = (a(i(2)),
                    a(i(7)))
                    , o = function() {
                    function e() {
                        (0,
                            n.default)(this, e),
                            this.cdnGroupId = new u.default,
                            this.uid = 0,
                            this.ret = 0,
                            this.wanIp = 0,
                            this.wanPort = 0,
                            this.mapDebugStatus = new s.default,
                            this.fixedCdnStream = [],
                            this.maxCdnStreamCount = 0,
                            this.enableFeatures = 0,
                            this.stunProts = []
                    }
                    return (0,
                        r.default)(e, [{
                        key: "unmarshall",
                        value: function(e) {
                            return this.cdnGroupId.unmarshall(e),
                                this.uid = e.popUInt64(),
                                this.ret = e.popUInt8(),
                                this.wanIp = e.popUInt32(),
                                this.wanPort = e.popUInt16(),
                                this.mapDebugStatus = e.popMapKey8Val32(),
                                this.fixedCdnStream = e.popUint8Array32(),
                                this.maxCdnStreamCount = e.popUInt8(),
                                this.enableFeatures = e.popUInt32(),
                                this.stunProts = e.popUInt16Vector(),
                                this
                        }
                    }]),
                        e
                }();
                t.default = o
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(7))
                    , u = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.cdnGroupId = new r.default,
                            this.fromUid = 0,
                            this.toUid = 0,
                            this.subUri = 0,
                            this.resCode = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "unmarshall",
                        value: function(e) {
                            this.cdnGroupId.unmarshall(e),
                                this.fromUid = e.popUInt64(),
                                this.toUid = e.popUInt64(),
                                this.subUri = e.popUInt32(),
                                this.resCode = e.popUInt32()
                        }
                    }]),
                        e
                }();
                t.default = u
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = (a(i(2)),
                    a(i(7)))
                    , u = a(i(120))
                    , o = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.cdnGroupId = new r.default,
                            this.peerNodes = []
                    }
                    return (0,
                        n.default)(e, [{
                        key: "unmarshall",
                        value: function(e) {
                            this.cdnGroupId.unmarshall(e),
                                this.peerNodes = [];
                            for (var t = e.popUInt32(), i = 0; i < t; i++) {
                                var a = new u.default;
                                a.unmarshall(e),
                                    this.peerNodes.push(a)
                            }
                            return this
                        }
                    }]),
                        e
                }();
                t.default = o
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(4))
                    , u = a(i(2))
                    , o = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.uid = 0,
                            this.strLog = ""
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new r.default;
                            return e.setUri(u.default.PCdnP2pReportLog),
                                e.pushUInt64(this.uid),
                                e.pushString(this.strLog),
                                e.marshall()
                        }
                    }]),
                        e
                }();
                t.default = o
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1));
                a(i(2));
                var r = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.appid = 0,
                            this.stampc = 0,
                            this.stamps = 0,
                            this.proxyRtt = 0,
                            this.wanIp = 0,
                            this.wanPort = 0,
                            this.peerType = 0,
                            this.stampcSvr = 0,
                            this.mapDebugStatus = null,
                            this.csMinBw = 0,
                            this.remainP2pStreamNum = 0,
                            this.SNBw = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "unmarshall",
                        value: function(e) {
                            return this.appid = e.popUInt32(),
                                this.stampc = e.popUInt32(),
                                this.stamps = e.popUInt32(),
                                this.proxyRtt = e.popUInt32(),
                                this.wanIp = e.popUInt32(),
                                this.wanPort = e.popUInt16(),
                                this.peerType = e.popUInt8(),
                                this.stampcSvr = e.popUInt32(),
                                this.mapDebugStatus = e.popMapKey8Val32(),
                                this.csMinBw = e.popUInt32(),
                                this.remainP2pStreamNum = e.popUInt32(),
                                this.SNBw = e.popUInt32(),
                                this
                        }
                    }]),
                        e
                }();
                t.default = r
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(6))
                    , n = a(i(0))
                    , r = a(i(1))
                    , u = a(i(2))
                    , o = a(i(4))
                    , l = a(i(7))
                    , d = function() {
                    function e() {
                        (0,
                            n.default)(this, e),
                            this.cdnGroupID = new l.default,
                            this.uid = 0,
                            this.p2pStaticsMap = new s.default,
                            this.reserve = "",
                            this.p2pNonZeroMap = new s.default
                    }
                    return (0,
                        r.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new o.default;
                            return e.setUri(u.default.PCdnP2PStatics),
                                e.pushUint8ArrayWithoutLen(this.cdnGroupID.marshall()),
                                e.pushUInt64(this.uid),
                                e.pushUInt32(this.p2pStaticsMap.size),
                                this.p2pStaticsMap.forEach(function(t, i) {
                                    e.pushUInt32(i),
                                        e.pushUInt32(t)
                                }),
                                e.pushString32(this.reserve),
                                e.pushUInt32(this.p2pNonZeroMap.size),
                                this.p2pNonZeroMap.forEach(function(t, i) {
                                    e.pushUInt32(i),
                                        e.pushUInt32(t)
                                }),
                                e.marshall()
                        }
                    }]),
                        e
                }();
                t.default = d
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(6))
                    , n = a(i(0))
                    , r = a(i(1))
                    , u = (a(i(2)),
                    a(i(134)))
                    , o = function() {
                    function e() {
                        (0,
                            n.default)(this, e),
                            this.uid = 0,
                            this.allocatedStreams = new s.default,
                            this.clientAppid = 0,
                            this.clientType = 0,
                            this.sendTime = 0,
                            this.userArea = 0,
                            this.videoGroupId = 0,
                            this.retryType = 0,
                            this.retryFreq = 0,
                            this.result = 0,
                            this.proxyType = 0,
                            this.tokenVersion = 0,
                            this.sslUrl = ""
                    }
                    return (0,
                        r.default)(e, [{
                        key: "unmarshall",
                        value: function(e) {
                            this.uid = e.popUInt64(),
                                this.allocatedStreams.clear();
                            for (var t = e.popUInt32(), i = 0; i < t; i++) {
                                for (var a = e.popString(), s = [], n = e.popUInt32(), r = 0; r < n; r++) {
                                    var o = new u.default;
                                    s.push(o.unmarshall(e))
                                }
                                this.allocatedStreams.set(a, s)
                            }
                            return this.clientAppid = e.popUInt32(),
                                this.clientType = e.popUInt32(),
                                this.sendTime = e.popUInt32(),
                                this.userArea = e.popUInt32(),
                                this.videoGroupId = e.popUInt32(),
                                this.retryType = e.popUInt8(),
                                this.retryFreq = e.popUInt16(),
                                this.result = e.popUInt32(),
                                this.proxyType = e.popUInt32(),
                                this.tokenVersion = e.popUInt32(),
                                this.sslUrl = e.popString(),
                                this
                        }
                    }]),
                        e
                }();
                t.default = o
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = (a(i(2)),
                    a(i(12)))
                    , u = a(i(130))
                    , o = a(i(51))
                    , l = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.streamGroupId = new r.default,
                            this.reconnectTime = 0,
                            this.videoProxyInfo = [],
                            this.reconnectStatu = 0,
                            this.videoProxyIpInfo = [],
                            this.reason = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "unmarshall",
                        value: function(e) {
                            this.streamGroupId.unmarshall(e),
                                this.reconnectTime = e.popUInt32(),
                                this.videoProxyInfo = [];
                            for (var t = e.popUInt32(), i = 0; i < t; i++) {
                                var a = new u.default;
                                this.videoProxyInfo.push(a.unmarshall(e))
                            }
                            for (this.reconnectStatu = e.popUInt8(),
                                     this.videoProxyIpInfo = [],
                                     t = e.popUInt32(),
                                     i = 0; i < t; i++)
                                a = new o.default,
                                    this.videoProxyIpInfo.push(a.unmarshall(e));
                            return this.reason = e.popUInt8(),
                                this
                        }
                    }]),
                        e
                }();
                t.default = l
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(6))
                    , n = a(i(0))
                    , r = a(i(1))
                    , u = (a(i(2)),
                    a(i(12)))
                    , o = function() {
                    function e() {
                        (0,
                            n.default)(this, e),
                            this.streamGroupId = new u.default,
                            this.uid = 0,
                            this.metaDatasMap = new s.default,
                            this.streamName = ""
                    }
                    return (0,
                        r.default)(e, [{
                        key: "unmarshall",
                        value: function(e) {
                            this.streamGroupId.unmarshall(e),
                                this.uid = e.popUInt64(),
                                this.metaDatasMap.clear();
                            for (var t = e.popUInt32(), i = 0; i < t; i++) {
                                var a = e.popUInt8()
                                    , s = e.popUInt32();
                                this.metaDatasMap.set(a, s)
                            }
                            return e.bytesAvailable() > 0 ? this.streamName = e.popString() : this.streamName = this.streamGroupId.text(),
                                this
                        }
                    }]),
                        e
                }();
                t.default = o
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(2))
                    , u = a(i(4));
                a(i(12));
                var o = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.streamGroupIds = [],
                            this.switchReason = ""
                    }
                    return (0,
                        n.default)(e, [{
                        key: "marshall",
                        value: function() {
                            var e = new u.default;
                            return e.setUri(r.default.PNotifyStreamSwitch),
                                e.pushUInt32(this.streamGroupIds.length),
                                this.streamGroupIds.forEach(function(t) {
                                    e.pushUint8ArrayWithoutLen(t.marshall())
                                }),
                                e.pushString(this.switchReason),
                                e.marshall()
                        }
                    }]),
                        e
                }();
                t.default = o
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = (a(i(2)),
                    a(i(12)))
                    , u = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.streamGroupIds = [],
                            this.uid = 0,
                            this.sendCount = 0,
                            this.recvCount = 0,
                            this.reserve = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "unmarshall",
                        value: function(e) {
                            this.streamGroupIds = [];
                            for (var t = e.popUInt32(), i = 0; i < t; i++) {
                                var a = new r.default;
                                this.streamGroupIds.push(a.unmarshall(e))
                            }
                            return this.uid = e.popUInt64(),
                                this.sendCount = e.popUInt32(),
                                this.recvCount = e.popUInt32(),
                                this.reserve = e.popUInt32(),
                                this
                        }
                    }]),
                        e
                }();
                t.default = u
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = (a(i(2)),
                    a(i(12)))
                    , u = a(i(131))
                    , o = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.streamGroupId = new r.default,
                            this.uid = 0,
                            this.serial = 0,
                            this.measureType = 0,
                            this.measureValues = []
                    }
                    return (0,
                        n.default)(e, [{
                        key: "unmarshall",
                        value: function(e) {
                            this.streamGroupId.unmarshall(e),
                                this.uid = e.popUInt64(),
                                this.serial = e.popUInt32(),
                                this.measureType = e.popUInt8(),
                                this.measureValues = [];
                            for (var t = e.popUInt32(), i = 0; i < t; i++) {
                                var a = new u.default;
                                this.measureValues.push(a.unmarshall(e))
                            }
                            return this
                        }
                    }]),
                        e
                }();
                t.default = o
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = (a(i(2)),
                    a(i(12)))
                    , u = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.streamGroupId = new r.default,
                            this.failReason = 0,
                            this.seqNums = []
                    }
                    return (0,
                        n.default)(e, [{
                        key: "unmarshall",
                        value: function(e) {
                            return this.streamGroupId.unmarshall(e),
                                this.failReason = e.popUInt8(),
                                this.seqNums = e.popUInt32Vector(),
                                this
                        }
                    }]),
                        e
                }();
                t.default = u
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = (a(i(2)),
                    a(i(12)))
                    , u = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.streamGroupId = new r.default,
                            this.uid = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "unmarshall",
                        value: function(e) {
                            return this.streamGroupId.unmarshall(e),
                                this.uid = e.popUInt64(),
                                this
                        }
                    }]),
                        e
                }();
                t.default = u
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = (a(i(2)),
                    a(i(12)))
                    , u = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.streamGroupIds = [],
                            this.uid = 0,
                            this.subscribe = !1,
                            this.resCode = 0,
                            this.firstSeq = 0,
                            this.lastSeq = 0,
                            this.firstDts = 0,
                            this.lastDts = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "unmarshall",
                        value: function(e) {
                            this.streamGroupIds = [];
                            for (var t = e.popUInt32(), i = 0; i < t; i++) {
                                var a = new r.default;
                                this.streamGroupIds.push(a.unmarshall(e))
                            }
                            return this.uid = e.popUInt64(),
                                this.subscribe = e.popBool(),
                                this.resCode = e.popUInt16(),
                                this.firstSeq = e.popUInt32(),
                                this.lastSeq = e.popUInt32(),
                                this.firstDts = e.popUInt32(),
                                this.lastDts = e.popUInt32(),
                                this
                        }
                    }]),
                        e
                }();
                t.default = u
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(6))
                    , n = a(i(0))
                    , r = a(i(1));
                a(i(2));
                var u = function() {
                    function e() {
                        (0,
                            n.default)(this, e),
                            this.appid = 0,
                            this.configInfo = new s.default,
                            this.streamCodecType = 0
                    }
                    return (0,
                        r.default)(e, [{
                        key: "unmarshall",
                        value: function(e) {
                            this.appid = e.popUInt32(),
                                this.configInfo.clear();
                            for (var t = e.popUInt32(), i = 0; i < t; i++) {
                                var a = e.popUInt16()
                                    , s = e.popUInt32();
                                this.configInfo.set(a, s)
                            }
                            return this.streamCodecType = e.popUInt32(),
                                this
                        }
                    }]),
                        e
                }();
                t.default = u
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(6))
                    , n = a(i(0))
                    , r = a(i(1))
                    , u = (a(i(2)),
                    a(i(12)))
                    , o = function() {
                    function e() {
                        (0,
                            n.default)(this, e),
                            this.streamGroupId = new u.default,
                            this.uid = 0,
                            this.metaDatas = new s.default,
                            this.stringDatas = new s.default
                    }
                    return (0,
                        r.default)(e, [{
                        key: "unmarshall",
                        value: function(e) {
                            this.streamGroupId.unmarshall(e),
                                this.uid = e.popUInt64(),
                                this.metaDatas.clear();
                            for (var t = e.popUInt32(), i = 0; i < t; i++) {
                                var a = e.popUInt32()
                                    , s = e.popUInt32();
                                this.metaDatas.set(a, s)
                            }
                            for (this.stringDatas.clear(),
                                     t = e.popUInt32(),
                                     i = 0; i < t; i++)
                                a = e.popUInt32(),
                                    s = e.popString(),
                                    this.stringDatas.set(a, s);
                            return this
                        }
                    }]),
                        e
                }();
                t.default = o
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1));
                a(i(2));
                var r = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.stampc = 0,
                            this.stamps = 0,
                            this.proxyRtt = 0,
                            this.wanIp = 0,
                            this.wanPort = 0,
                            this.reserved = 0,
                            this.peerType = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "unmarshall",
                        value: function(e) {
                            return this.stampc = e.popUInt32(),
                                this.stamps = e.popUInt32(),
                                this.proxyRtt = e.popUInt32(),
                                this.wanIp = e.popUInt32(),
                                this.wanPort = e.popUInt16(),
                                this.reserved = e.popUInt32(),
                                this.peerType = e.popUInt8(),
                                this
                        }
                    }]),
                        e
                }();
                t.default = r
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(3))
                    , u = function() {
                    function e(t) {
                        (0,
                            s.default)(this, e),
                        t && t.xhrSetup && (this.xhrSetup = t.xhrSetup)
                    }
                    return (0,
                        n.default)(e, [{
                        key: "destroy",
                        value: function() {
                            this.abort(),
                                this.loader = null
                        }
                    }, {
                        key: "abort",
                        value: function() {
                            this.loader && (this.stats.aborted = !0,
                                this.loader.abort()),
                            this.timeoutHandle && window.clearTimeout(this.timeoutHandle)
                        }
                    }, {
                        key: "load",
                        value: function(e, t, i, a, s, n, r, u) {
                            var o = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : null;
                            this.url = e,
                                this.responseType = t,
                                this.onSuccess = i,
                                this.onError = a,
                                this.onTimeout = s,
                                this.onProgress = o,
                                this.stats = {
                                    trequest: performance.now(),
                                    retry: 0
                                },
                                this.timeout = n,
                                this.maxRetry = r,
                                this.retryDelay = u,
                                this.timeoutHandle = window.setTimeout(this.loadtimeout.bind(this), n),
                                this.loadInternal()
                        }
                    }, {
                        key: "loadInternal",
                        value: function() {
                            var e = this.loader = new XMLHttpRequest;
                            e.onload = this.loadsuccess.bind(this),
                                e.onerror = this.loaderror.bind(this),
                                e.onprogress = this.loadprogress.bind(this),
                                e.onloadend = this.loadend.bind(this),
                                e.open("GET", this.url, !0),
                            this.byteRange && e.setRequestHeader("Range", "bytes=" + this.byteRange),
                                e.responseType = this.responseType,
                                this.stats.tstart = null,
                                this.stats.loaded = 0,
                            this.xhrSetup && this.xhrSetup(e),
                                this.stats.tstart = performance.now(),
                                e.send()
                        }
                    }, {
                        key: "loadsuccess",
                        value: function(e) {
                            window.clearTimeout(this.timeoutHandle),
                                this.stats.tload = performance.now(),
                                e.requestURL = this.url,
                                this.onSuccess(e, this.stats)
                        }
                    }, {
                        key: "loaderror",
                        value: function(e) {
                            404 !== e.currentTarget.status && 0 !== e.currentTarget.status ? this.stats.retry < this.maxRetry ? (r.default.warn("XhrLoader.loaderror url=" + this.url + " retryDelay=" + this.retryDelay),
                                this.destroy(),
                                window.setTimeout(this.loadInternal.bind(this), this.retryDelay),
                                this.retryDelay = Math.min(2 * this.retryDelay, 64e3),
                                this.stats.retry++) : (window.clearTimeout(this.timeoutHandle),
                                r.default.warn("XhrLoader.loaderror reach max retry url=" + this.url),
                                this.onError(e)) : this.onError(e)
                        }
                    }, {
                        key: "loadtimeout",
                        value: function() {
                            this.stats.retry < this.maxRetry ? (r.default.warn("XhrLoader.loadtimeout url=" + this.url + " retryDelay=" + this.retryDelay),
                                this.destroy(),
                                window.setTimeout(this.loadInternal.bind(this), this.retryDelay),
                                this.retryDelay = Math.min(2 * this.retryDelay, 64e3),
                                this.stats.retry++) : (window.clearTimeout(this.timeoutHandle),
                                r.default.warn("XhrLoader.loadtimeout max retry url=" + this.url),
                                this.onTimeout())
                        }
                    }, {
                        key: "loadprogress",
                        value: function(e) {
                            var t = this.stats;
                            null === t.tfirst && (t.tfirst = performance.now()),
                                t.loaded = e.loaded,
                            this.onProgress && this.onProgress(e, t)
                        }
                    }, {
                        key: "loadend",
                        value: function(e) {
                            404 === e.currentTarget.status && this.loaderror(e)
                        }
                    }]),
                        e
                }();
                t.default = u
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(3))
                    , u = a(i(266))
                    , o = a(i(27))
                    , l = function() {
                    function e(t) {
                        (0,
                            s.default)(this, e),
                            this.mse = t,
                            this.ISGenerated = !1,
                            this.audioISGenerated = !1,
                            this.videoISGenerated = !1,
                            this.PES2MP4SCALEFACTOR = 1,
                            this.PES_TIMESCALE = 9e4,
                            this.MP4_TIMESCALE = this.PES_TIMESCALE / this.PES2MP4SCALEFACTOR,
                            this._forceFirstIDR = !(!o.default.chrome || !(o.default.version.major < 50 || 50 === o.default.version.major && o.default.version.build < 2661))
                    }
                    return (0,
                        n.default)(e, [{
                        key: "destroy",
                        value: function() {
                            this.reset()
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            this.insertDiscontinuity(),
                                this.switchLevel()
                        }
                    }, {
                        key: "insertDiscontinuity",
                        value: function() {
                            this._initPTS = this._initDTS = this.nextAacPts = this.nextAvcDts = void 0
                        }
                    }, {
                        key: "getInitDts",
                        value: function() {
                            return void 0 !== this._initDTS ? this._initDTS / 90 : -1
                        }
                    }, {
                        key: "switchLevel",
                        value: function() {
                            this.ISGenerated = !1,
                                this.audioISGenerated = !1,
                                this.videoISGenerated = !1
                        }
                    }, {
                        key: "remux",
                        value: function(e, t, i, a) {
                            Number(localStorage._printMp4Remux) && r.default.debug("\n### Audio", e, "\n### Video", t),
                            this.audioISGenerated || this.generateAudioIS(e, i),
                            this.videoISGenerated || this.generateVideoIS(t, i),
                                this.initTs(e, t, i),
                            t.samples.length && this.remuxVideo(t, a),
                            e.samples.length && this.remuxAudio(e, a),
                                this.mse.onFragParsed()
                        }
                    }, {
                        key: "initTs",
                        value: function(e, t, i) {
                            if (void 0 == this._initPTS) {
                                var a = e.samples
                                    , s = t.samples
                                    , n = a.length
                                    , u = s.length
                                    , o = this.PES_TIMESCALE;
                                0 === n && 0 === u ? r.default.warn("mp4-remuxer.initTs have no nbAudio&nbVideo") : 0 === u ? (this._initPTS = a[0].pts - o * i,
                                    this._initDTS = a[0].dts - o * i) : 0 === n ? (this._initPTS = s[0].pts - o * i,
                                    this._initDTS = s[0].dts - o * i) : (this._initPTS = Math.min(s[0].pts, a[0].pts) - o * i,
                                    this._initDTS = Math.min(s[0].dts, a[0].dts) - o * i)
                            }
                        }
                    }, {
                        key: "generateAudioIS",
                        value: function(e, t) {
                            if (e.config) {
                                var i = {
                                    audioMoov: u.default.initSegment([e]),
                                    audioCodec: e.codec,
                                    audioChannelCount: e.channelCount
                                };
                                this.mse.onInitSegment(i),
                                    this.audioISGenerated = !0
                            }
                        }
                    }, {
                        key: "generateVideoIS",
                        value: function(e, t) {
                            if (e.sps && e.pps) {
                                var i = {
                                    videoMoov: u.default.initSegment([e]),
                                    videoCodec: e.codec,
                                    videoWidth: e.width,
                                    videoHeight: e.height
                                };
                                this.mse.onInitSegment(i),
                                    this.videoISGenerated = !0
                            }
                        }
                    }, {
                        key: "remuxVideo",
                        value: function(e, t) {
                            var i, a = void 0, s = 8, n = void 0, o = this.PES2MP4SCALEFACTOR, l = void 0, d = void 0, h = void 0, f = void 0, c = void 0, p = void 0, v = void 0, m = void 0, y = void 0, _ = void 0, S = void 0, g = [];
                            for (c = new Uint8Array(e.len + 4 * e.naluCnt + 8),
                                     (a = new DataView(c.buffer)).setUint32(0, c.byteLength),
                                     c.set(u.default.types.mdat, 4); e.samples.length; ) {
                                for (l = e.samples.shift(),
                                         h = 0; l.units.length; )
                                    n = (f = l.units.shift()).data.byteLength,
                                        a.setUint32(s, n),
                                        s += 4,
                                        c.set(f.data, s),
                                        s += n,
                                        h += 4 + n;
                                if (m = l.pts - this._initDTS,
                                    y = l.dts - this._initDTS,
                                void 0 !== v)
                                    _ = this._PTSNormalize(m, v),
                                        S = this._PTSNormalize(y, v),
                                        d.duration = (S - v) / o,
                                    d.duration < 0 && (Number(localStorage._printMp4RemuxVideo) && r.default.warn("mp4-remuxer.remuxVideo invalid sample duration at pts=" + l.pts / 90 + " dts=" + l.dts / 90 + " duration=" + d.duration / 90),
                                        d.duration = 0,
                                        S = v);
                                else {
                                    var T, P = this.nextAvcDts || y;
                                    _ = this._PTSNormalize(m, P),
                                        S = this._PTSNormalize(y, P),
                                        T = Math.round((S - P) / 90),
                                    (t || Math.abs(T) < 600) && T && (T > 1 ? r.default.warn("mp4-remuxer.remuxVideo hole=" + T + " filling it") : T < -1 && r.default.warn("mp4-remuxer.remuxVideo overlapping=" + -T + " detected"),
                                        S = P,
                                        _ = Math.max(_ - T, S)),
                                        Math.max(0, _),
                                        p = Math.max(0, S)
                                }
                                var I = l.key;
                                d = {
                                    size: h,
                                    duration: 0,
                                    cts: (_ - S) / o,
                                    flags: {
                                        isLeading: 0,
                                        degradPrio: 0,
                                        hasRedundancy: 0,
                                        dependsOn: I ? 2 : 1,
                                        isDependedOn: I ? 1 : 0,
                                        isNonSync: I ? 0 : 1
                                    }
                                },
                                    g.push(d),
                                    v = S
                            }
                            this._forceFirstIDR && (g[0].flags.dependsOn = 2,
                                g[0].flags.isNonSync = 0),
                                void 0 !== e.endDts ? (d.duration = (90 * e.endDts - this._initDTS - S) / o,
                                    d.duration < 0 ? (d.duration = 0,
                                        this.nextAvcDts = S) : this.nextAvcDts = 90 * e.endDts - this._initDTS) : (g.length >= 2 && (d.duration = g[g.length - 2].duration),
                                    this.nextAvcDts = S + d.duration * o),
                                e.len = 0,
                                e.naluCnt = 0,
                                e.samples = g,
                                i = u.default.moof(e.sn, p / o, e),
                                e.samples = [];
                            var E = {
                                type: "video",
                                data: this._mergeBoxes(i, c)
                            };
                            this.mse.onFragParsing(E)
                        }
                    }, {
                        key: "remuxAudio",
                        value: function(e, t) {
                            var i, a = 8, s = this.PES_TIMESCALE, n = this.PES2MP4SCALEFACTOR, o = void 0, l = void 0, d = void 0, h = void 0, f = void 0, c = void 0, p = void 0, v = void 0, m = void 0, y = void 0, _ = [];
                            for (h = new Uint8Array(e.len + 8),
                                     new DataView(h.buffer).setUint32(0, h.byteLength),
                                     h.set(u.default.types.mdat, 4); e.samples.length; ) {
                                if (d = (o = e.samples.shift()).unit,
                                    h.set(d, a),
                                    a += d.byteLength,
                                    p = o.pts - this._initDTS,
                                    v = o.dts - this._initDTS,
                                void 0 !== c)
                                    m = this._PTSNormalize(p, c),
                                        y = this._PTSNormalize(v, c),
                                        l.duration = (y - c) / n,
                                    l.duration < 0 && (Number(localStorage._printMp4RemuxAudio) && r.default.warn("mp4-remuxer.remuxAudio invalid AAC sample duration at PTS=" + o.pts + " duration=" + l.duration),
                                        l.duration = 0,
                                        m = y = c);
                                else {
                                    var S, g = this.nextAacPts || p;
                                    m = this._PTSNormalize(p, g),
                                        y = this._PTSNormalize(v, g),
                                        S = Math.round(1e3 * (m - g) / s),
                                    (t || Math.abs(S) < 600) && S && (m = y = g),
                                        Math.max(0, m),
                                        f = Math.max(0, y)
                                }
                                l = {
                                    size: d.byteLength,
                                    cts: 0,
                                    duration: 0,
                                    flags: {
                                        isLeading: 0,
                                        isDependedOn: 0,
                                        hasRedundancy: 0,
                                        degradPrio: 0,
                                        dependsOn: 1
                                    }
                                },
                                    _.push(l),
                                    c = y
                            }
                            _.length >= 2 && (l.duration = _[_.length - 2].duration),
                                this.nextAacPts = m + l.duration * n,
                                e.len = 0,
                                e.samples = _,
                                i = u.default.moof(e.sn, f / n, e),
                                e.samples = [];
                            var T = {
                                type: "audio",
                                data: this._mergeBoxes(i, h)
                            };
                            this.mse.onFragParsing(T)
                        }
                    }, {
                        key: "_mergeBoxes",
                        value: function(e, t) {
                            var i = new Uint8Array(e.byteLength + t.byteLength);
                            return i.set(e, 0),
                                i.set(t, e.byteLength),
                                i
                        }
                    }, {
                        key: "_PTSNormalize",
                        value: function(e, t) {
                            var i = void 0;
                            if (void 0 === t)
                                return e;
                            for (i = t < e ? -8589934592 : 8589934592; Math.abs(e - t) > 4294967296; )
                                e += i;
                            return e
                        }
                    }, {
                        key: "timescale",
                        get: function() {
                            return this.MP4_TIMESCALE
                        }
                    }]),
                        e
                }();
                t.default = l
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(3))
                    , u = function() {
                    function e(t) {
                        (0,
                            s.default)(this, e),
                            this.data = t,
                            this.bytesAvailable = this.data.byteLength,
                            this.word = 0,
                            this.bitsAvailable = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "loadWord",
                        value: function() {
                            var e = this.data.byteLength - this.bytesAvailable
                                , t = new Uint8Array(4)
                                , i = Math.min(4, this.bytesAvailable);
                            if (0 === i)
                                throw new Error("no bytes available");
                            t.set(this.data.subarray(e, e + i)),
                                this.word = new DataView(t.buffer).getUint32(0),
                                this.bitsAvailable = 8 * i,
                                this.bytesAvailable -= i
                        }
                    }, {
                        key: "skipBits",
                        value: function(e) {
                            var t = void 0;
                            this.bitsAvailable > e ? (this.word <<= e,
                                this.bitsAvailable -= e) : (e -= this.bitsAvailable,
                                e -= (t = e >> 3) >> 3,
                                this.bytesAvailable -= t,
                                this.loadWord(),
                                this.word <<= e,
                                this.bitsAvailable -= e)
                        }
                    }, {
                        key: "readBits",
                        value: function(e) {
                            var t = Math.min(this.bitsAvailable, e)
                                , i = this.word >>> 32 - t;
                            return e > 32 && r.default.error("Cannot read more than 32 bits at a time"),
                                this.bitsAvailable -= t,
                                this.bitsAvailable > 0 ? this.word <<= t : this.bytesAvailable > 0 && this.loadWord(),
                                (t = e - t) > 0 ? i << t | this.readBits(t) : i
                        }
                    }, {
                        key: "skipLZ",
                        value: function() {
                            var e = void 0;
                            for (e = 0; e < this.bitsAvailable; ++e)
                                if (0 != (this.word & 2147483648 >>> e))
                                    return this.word <<= e,
                                        this.bitsAvailable -= e,
                                        e;
                            return this.loadWord(),
                            e + this.skipLZ()
                        }
                    }, {
                        key: "skipUEG",
                        value: function() {
                            this.skipBits(1 + this.skipLZ())
                        }
                    }, {
                        key: "skipEG",
                        value: function() {
                            this.skipBits(1 + this.skipLZ())
                        }
                    }, {
                        key: "readUEG",
                        value: function() {
                            var e = this.skipLZ();
                            return this.readBits(e + 1) - 1
                        }
                    }, {
                        key: "readEG",
                        value: function() {
                            var e = this.readUEG();
                            return 1 & e ? 1 + e >>> 1 : -1 * (e >>> 1)
                        }
                    }, {
                        key: "readBoolean",
                        value: function() {
                            return 1 === this.readBits(1)
                        }
                    }, {
                        key: "readUByte",
                        value: function() {
                            return this.readBits(8)
                        }
                    }, {
                        key: "skipScalingList",
                        value: function(e) {
                            var t = 8
                                , i = 8
                                , a = void 0;
                            for (a = 0; a < e; a++)
                                0 !== i && (i = (t + this.readEG() + 256) % 256),
                                    t = 0 === i ? t : i
                        }
                    }, {
                        key: "readSPS",
                        value: function() {
                            var e, t, i, a, s = 0, n = 0, r = 0, u = 0, o = void 0, l = void 0, d = void 0;
                            if (this.readUByte(),
                                e = this.readUByte(),
                                this.readBits(5),
                                this.skipBits(3),
                                this.readUByte(),
                                this.skipUEG(),
                            100 === e || 110 === e || 122 === e || 144 === e) {
                                var h = this.readUEG();
                                if (3 === h && this.skipBits(1),
                                    this.skipUEG(),
                                    this.skipUEG(),
                                    this.skipBits(1),
                                    this.readBoolean())
                                    for (l = 3 !== h ? 8 : 12,
                                             d = 0; d < l; d++)
                                        this.readBoolean() && (d < 6 ? this.skipScalingList(16) : this.skipScalingList(64))
                            }
                            this.skipUEG();
                            var f = this.readUEG();
                            if (0 === f)
                                this.readUEG();
                            else if (1 === f)
                                for (this.skipBits(1),
                                         this.skipEG(),
                                         this.skipEG(),
                                         o = this.readUEG(),
                                         d = 0; d < o; d++)
                                    this.skipEG();
                            return this.skipUEG(),
                                this.skipBits(1),
                                t = this.readUEG(),
                                i = this.readUEG(),
                            0 === (a = this.readBits(1)) && this.skipBits(1),
                                this.skipBits(1),
                            this.readBoolean() && (s = this.readUEG(),
                                n = this.readUEG(),
                                r = this.readUEG(),
                                u = this.readUEG()),
                                {
                                    width: 16 * (t + 1) - 2 * s - 2 * n,
                                    height: (2 - a) * (i + 1) * 16 - (r + u) * (a ? 2 : 4)
                                }
                        }
                    }, {
                        key: "readSliceType",
                        value: function() {
                            return this.readUByte(),
                                this.readUEG(),
                                this.readUEG()
                        }
                    }]),
                        e
                }();
                t.default = u
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(6))
                    , n = a(i(0))
                    , r = a(i(1))
                    , u = a(i(18))
                    , o = a(i(3))
                    , l = a(i(145))
                    , d = a(i(198))
                    , h = a(i(267))
                    , f = !!Number(localStorage._dropAudio)
                    , c = !!Number(localStorage._dropVideo)
                    , p = function() {
                    function e() {
                        (0,
                            n.default)(this, e),
                            this.lastDts = 0,
                            this.lastPts = 0,
                            this.lastCts = 0,
                            this.dtsStat = [0, 0, 0, 0, 0, 0],
                            this.ptsStat = [0, 0, 0, 0, 0, 0],
                            this.ctsStat = [0, 0, 0, 0, 0, 0]
                    }
                    return (0,
                        r.default)(e, [{
                        key: "reset",
                        value: function() {
                            this.lastDts = this.lastPts = this.lastCts = 0,
                                this.dtsStat = [0, 0, 0, 0, 0, 0],
                                this.ptsStat = [0, 0, 0, 0, 0, 0],
                                this.ctsStat = [0, 0, 0, 0, 0, 0]
                        }
                    }, {
                        key: "setTimeStamp",
                        value: function(e, t, i) {
                            this.addStat(this.dtsStat, this.lastDts, e),
                                this.addStat(this.ptsStat, this.lastPts, t),
                                this.addStat(this.ctsStat, this.lastCts, i),
                                this.lastDts = e,
                                this.lastPts = t,
                                this.lastCts = i
                        }
                    }, {
                        key: "addStat",
                        value: function(e, t, i) {
                            if (t > 0 && i > t) {
                                var a = i - t;
                                a >= 1e3 ? e[4]++ : a >= 800 ? e[3]++ : a >= 600 ? e[2]++ : a >= 400 ? e[1]++ : a >= 200 && e[0]++
                            }
                        }
                    }]),
                        e
                }()
                    , v = function() {
                    function e(t, i) {
                        (0,
                            n.default)(this, e),
                            this.mse = t,
                            this.remuxer = i,
                            this.flvCacher = new h.default,
                            this.timeStampStat = new p,
                            this.DEFAULT_GOP = 200,
                            this.bufLen = 200,
                            this.pushGop = !1,
                            this.parseFlvHead = !1,
                            this.lengthSizeMinusOne = 0,
                            this.audioConfig = [43, 138, 8, 0],
                            this.audioSampleRate = 22050,
                            this.aacTimeLen = 1024e3 / this.audioSampleRate,
                            this.audioChannelCount = 1,
                            this.audioObjectType = 5,
                            this.audioIncreaseTSMap = new s.default,
                            this.firstDemuxAudioTS = -1,
                            this.spsUnit = null,
                            this.ppsUnit = null,
                            this.vpsUnit = null,
                            this.hasCtsZero = !1,
                            this.paused = !1,
                            this.hasEmptyFrames = !1,
                            this.nextAacDts = -1,
                            this.playVideoFrameCnt = 0,
                            this.playVideoLength = 0,
                            this.playAudioFrameCnt = 0,
                            this.playAudioLength = 0,
                            this.playEmptyAudioFrameCnt = 0,
                            this.avcTrackList = [],
                            this.beginParseTs = 0,
                            this.hasAudioTag = !1,
                            this.lastAacTs = 0,
                            this.hasKeyFrame = !1,
                            this.lastAudioTs = 0,
                            this.lastVideoTs = 0,
                            this.lastAudioUtil = null,
                            this.showH265Tip = !1,
                            this.appendHighQualityEmptyAudio = !0,
                            this.reset()
                    }
                    return (0,
                        r.default)(e, [{
                        key: "setDecoctorTimeAbnormal",
                        value: function() {
                            var e = localStorage.decodeabnormal;
                            if (e && e.split("_").length > 1) {
                                var t = parseInt(e.split("_")[1])
                                    , i = (new Date).getTime() - t;
                                i && i > 864e5 ? (this.appendHighQualityEmptyAudio = !0,
                                    localStorage.decodeabnormal = "") : this.appendHighQualityEmptyAudio = !1
                            }
                        }
                    }, {
                        key: "destroy",
                        value: function() {
                            this.reset()
                        }
                    }, {
                        key: "reset",
                        value: function(e) {
                            o.default.log("FlvParser.reset"),
                                this.timeStampStat.reset(),
                                this.remuxer.reset(),
                                this.avcTrack = {
                                    type: "video",
                                    id: 1,
                                    sn: 0,
                                    samples: [],
                                    len: 0,
                                    duration: 0,
                                    startDts: -1,
                                    endDts: 0,
                                    naluCnt: 0
                                },
                                this.aacTrack = {
                                    type: "audio",
                                    id: 2,
                                    sn: 0,
                                    samples: [],
                                    len: 0,
                                    duration: 0,
                                    startDts: -1,
                                    endDts: 0
                                },
                                this.aacTrack.config = this.audioConfig,
                                this.aacTrack.audiosamplerate = this.audioSampleRate,
                                this.aacTrack.channelCount = this.audioChannelCount,
                                this.aacTrack.codec = "mp4a.40.5",
                                this.aacTrack.timescale = this.remuxer.timescale,
                                this.avcTrack.isHevc = !1,
                                this.avcTrack.timescale = this.remuxer.timescale,
                                this.avcTrackList = [],
                                this.hasAudioTag = !1,
                                this.lastAacTs = 0,
                                this.hasKeyFrame = !1,
                                this.lastAudioTs = 0,
                                this.lastVideoTs = 0,
                                this.showH265Tip = !1,
                                this.bufLen = 200,
                                this.nextAacDts = -1,
                                this.hasCtsZero = !1,
                                this.audioIncreaseTSMap.clear(),
                                this.firstDemuxAudioTS = -1
                        }
                    }, {
                        key: "getPlayStat",
                        value: function() {
                            var e = {
                                videoFrameCnt: this.playVideoFrameCnt,
                                videoLength: this.playVideoLength,
                                audioFrameCnt: this.playAudioFrameCnt,
                                audioLength: this.playAudioLength,
                                emptyAudioFrameCnt: this.playEmptyAudioFrameCnt
                            };
                            return this.playVideoFrameCnt = 0,
                                this.playVideoLength = 0,
                                this.playAudioFrameCnt = 0,
                                this.playAudioLength = 0,
                                this.playEmptyAudioFrameCnt = 0,
                                e
                        }
                    }, {
                        key: "setPaused",
                        value: function(e) {
                            this.paused = e
                        }
                    }, {
                        key: "setPushGop",
                        value: function(e) {
                            this.pushGop = e,
                                o.default.log("FlvParser.setPushGop " + e)
                        }
                    }, {
                        key: "getParserBufLen",
                        value: function() {
                            return 0 !== this.avcTrack.samples.length ? this.avcTrack.endDts - this.avcTrack.startDts : 0 !== this.aacTrack.samples.length ? this.aacTrack.endDts - this.aacTrack.startDts : 0
                        }
                    }, {
                        key: "parseFlv",
                        value: function(t) {
                            var i = 0
                                , a = t.length;
                            if (!1 === this.parseFlvHead) {
                                var s = e.FLV_HEADER_LEN + e.PREV_TAG_SIZE_LEN;
                                if (a < s)
                                    return void o.default.warn("FlvParser.parseFlv flv has no header len=" + a);
                                i += s,
                                    a -= s,
                                    this.parseFlvHead = !0,
                                    this.beginParseTs = Date.now()
                            }
                            0 === i ? this.flvCacher.append(t) : this.flvCacher.append(t.slice(i));
                            for (var n = void 0; null !== (n = this.flvCacher.popFrame()); )
                                this.parseTag(n)
                        }
                    }, {
                        key: "parseTag",
                        value: function(t) {
                            var i = t.length;
                            if (i < e.TAG_HEADER_LEN + e.PREV_TAG_SIZE_LEN)
                                o.default.warn("FlvParser.parseTag flv has no whole tag len=" + i + " data=" + t);
                            else {
                                var a = 0
                                    , s = t[a++]
                                    , n = (t[a++] << 16) + (t[a++] << 8) + t[a++];
                                if (i - (e.TAG_HEADER_LEN + e.PREV_TAG_SIZE_LEN) < n)
                                    o.default.warn("FlvParser.parseTag flv has no enough data dataLen=" + n + " len=" + i);
                                else if (0 !== n) {
                                    var r = (t[a++] << 16) + (t[a++] << 8) + t[a++] + parseInt(t[a++].toString(16) + "000000", 16);
                                    a += 3,
                                        s === e.VIDEO_TYPE ? c || this.parseVideo(t, a, n, r) : s === e.AUDIO_TYPE ? f || this.parseAudio(t, a, n, r) : s === e.SCRIPT_TYPE ? o.default.log("FlvParser.parseTag script tag len=" + n) : o.default.warn("%cFlvParser.parseTag discard type=" + s + " len=" + n, "color:white;background:black")
                                } else
                                    o.default.warn("FlvParser.parseTag flvtag empty type=" + s)
                            }
                        }
                    }, {
                        key: "parseVideo",
                        value: function(t, i, a, s) {
                            if (a < 5)
                                o.default.warn("FlvParser.parseVideo avc videotag not enough dataLen=" + a);
                            else {
                                var n = t[i] >> 4
                                    , r = (t[i++],
                                    t[i++]);
                                if (5 !== a)
                                    if (0 === r)
                                        this.parseVideoConfig(t, i, a, s);
                                    else if (1 === r) {
                                        if (n == e.IFRAME)
                                            this.hasKeyFrame || this.remuxer.reset(),
                                                this.hasKeyFrame = !0;
                                        else if (!this.hasKeyFrame)
                                            return void o.default.log("-------- drop video tag", s);
                                        Number(localStorage._printVideoTs) && (o.default.debug("%cFlvParser video ts", "color:green", s, s - this.lastVideoTs),
                                            this.lastVideoTs = s),
                                            this.parseVideoNalu(t, i, a, s, n)
                                    } else
                                        2 === r ? o.default.info("%cFlvParser.parseVideo avc_end dataLen=" + a, "color:white;background:black") : o.default.warn("%cFlvParser.parseVideo error avc packet type=" + r, "color:white;background:black");
                                else
                                    o.default.log("FlvParser.parseVideo avc_empty frameType=" + n + " avcPacketType=" + r)
                            }
                        }
                    }, {
                        key: "parseVideoConfig",
                        value: function(t, i, a, s) {
                            var n = void 0
                                , r = void 0
                                , l = []
                                , h = []
                                , f = []
                                , c = !1
                                , p = (i += 3) + a - 5;
                            if (this.isHevcNal(t, i)) {
                                this.showH265Tip || (this.showH265Tip = !0,
                                    o.default.warn("This is a H265 video.")),
                                u.default.isSendH265 || (u.default.isSendH265 = !0,
                                    u.default.sendMetrics([{
                                        sMetricName: u.default.METRIC.WEB_H265
                                    }]));
                                for (var v = t[i += 4] >> 1 & 63, m = i; i < p; ) {
                                    if (this.isHevcNal(t, i) || i + 1 === p) {
                                        switch (v) {
                                            case e.NAL_VPS:
                                                var y = {
                                                    data: t.subarray(m, i),
                                                    type: v
                                                };
                                                this.vpsUnit && this.vpsUnit.data.toString(16) !== y.data.toString(16) && (o.default.log("FlvParser.parseVideoConfig vps changed"),
                                                    c = !0),
                                                    this.vpsUnit = y,
                                                    f.push(y.data);
                                                break;
                                            case e.NAL_SPS:
                                                var _ = {
                                                    data: t.subarray(m, i),
                                                    type: v
                                                };
                                                this.spsUnit && this.spsUnit.data.toString(16) !== _.data.toString(16) && (o.default.log("FlvParser.parseVideoConfig sps changed"),
                                                    c = !0),
                                                    this.spsUnit = _,
                                                    l.push(_.data);
                                                break;
                                            case e.NAL_PPS:
                                                var S = {
                                                    data: t.subarray(m, i),
                                                    type: v
                                                };
                                                this.ppsUnit && this.ppsUnit.data.toString(16) !== S.data.toString(16) && (o.default.log("FlvParser.parseVideoConfig pps changed"),
                                                    c = !0),
                                                    this.ppsUnit = S,
                                                    h.push(S.data)
                                        }
                                        if (i + 4 < p) {
                                            v = t[i += 4] >> 1 & 63,
                                                m = i;
                                            continue
                                        }
                                    }
                                    i++
                                }
                                c && (this.reset(),
                                    this.paused = this.mse.onAvcCfgChange()),
                                    this.avcTrack.isHevc = !0,
                                    this.avcTrack.vps = f,
                                    this.avcTrack.sps = l,
                                    this.avcTrack.pps = h,
                                    this.avcTrack.codec = "avc1.4d401f",
                                    this.avcTrack.width = this.mse.width,
                                    this.avcTrack.height = this.mse.height,
                                    this.hasCtsZero = !0
                            } else {
                                i += 4,
                                    this.lengthSizeMinusOne = 3 & t[i++];
                                for (var g = 0, T = 0, P = "", I = 31 & t[i++], E = 0; E < I; ++E) {
                                    n = (t[i++] << 8) + t[i++];
                                    var k = {
                                        data: t.subarray(i, i + n),
                                        type: 7
                                    };
                                    this.spsUnit && this.spsUnit.data.toString(16) !== k.data.toString(16) && (o.default.log("FlvParser.parseVideoConfig sps changed"),
                                        c = !0),
                                        this.spsUnit = k,
                                        i += n,
                                        l.push(k.data);
                                    var R = new d.default(k.data).readSPS();
                                    g = R.width,
                                        T = R.height;
                                    for (var C = k.data.subarray(1, 4), L = "avc1.", A = 0; A < 3; A++) {
                                        var M = C[A].toString(16);
                                        M.length < 2 && (M = "0" + M),
                                            L += M
                                    }
                                    P = L
                                }
                                for (var U = t[i++], b = 0; b < U; ++b) {
                                    r = (t[i++] << 8) + t[i++];
                                    var N = {
                                        data: t.subarray(i, i + r),
                                        type: 8
                                    };
                                    this.ppsUnit && this.ppsUnit.data.toString(16) !== N.data.toString(16) && (o.default.log("FlvParser.parseVideoConfig pps changed"),
                                        c = !0),
                                        this.ppsUnit = N,
                                        i += r,
                                        h.push(N.data)
                                }
                                c && (this.reset(),
                                    this.paused = this.mse.onAvcCfgChange()),
                                    this.avcTrack.isHevc = !1,
                                    this.avcTrack.sps = l,
                                    this.avcTrack.pps = h,
                                    this.avcTrack.width = g,
                                    this.avcTrack.height = T,
                                    this.avcTrack.codec = P,
                                    this.mse.setResolution(g, T)
                            }
                            o.default.log("FlvParser.parseVideoConfig avccfg dataLen=" + a + " spsLen=" + n + " ppsLen=" + r + " w/h=" + this.avcTrack.width + "/" + this.avcTrack.height + " codec=" + this.avcTrack.codec)
                        }
                    }, {
                        key: "parseVideoNalu",
                        value: function(t, i, a, s, n) {
                            var r = void 0
                                , u = void 0
                                , l = []
                                , d = 0
                                , h = (t[i++] << 16) + (t[i++] << 8) + t[i++];
                            if (0 === h ? this.hasCtsZero || (this.hasCtsZero = !0) : h >= 8388608 ? (o.default.warn("FlvParser.parseVideoNalu negative cts=" + h + " dts=" + s),
                                h -= 16777216) : h > 2500 && h < 3500 ? h = 0 : h > 600 && o.default.warn("FlvParser.parseVideoNalu large cts=" + h + " dts=" + s),
                            -1 !== this.avcTrack.startDts && !this.paused) {
                                var f = !1;
                                this.pushGop ? n === e.IFRAME && (f = !0) : s >= this.avcTrack.startDts + this.bufLen && (f = !0),
                                f && (this.avcTrack.endDts = s,
                                    this.remux(e.REMUX_TYPE_VIDEO))
                            }
                            n === e.IFRAME && (this.spsUnit && (l.push(this.spsUnit),
                                d += this.spsUnit.data.length),
                            this.ppsUnit && (l.push(this.ppsUnit),
                                d += this.ppsUnit.data.length));
                            var c = i + a - 5;
                            if (this.isHevcNal(t, i)) {
                                t[i += 4];
                                for (var p = i; i < c; )
                                    (this.isHevcNal(t, i) || i + 1 === c) && (u = {
                                        data: t.subarray(p, i),
                                        type: 1 === n ? 5 : 1
                                    },
                                        l.push(u),
                                        d += u.data.length,
                                    i + 4 < c) ? (t[i += 4],
                                        p = i) : i++
                            } else
                                for (var v = a - 5; v; ) {
                                    r = 0;
                                    for (var m = 0; m <= this.lengthSizeMinusOne; ++m)
                                        r += t[i++] << 8 * (this.lengthSizeMinusOne - m);
                                    if (v -= this.lengthSizeMinusOne + 1,
                                    0 !== r) {
                                        if (r > v) {
                                            i += v;
                                            break
                                        }
                                        if (v -= r,
                                            u = {
                                                data: t.subarray(i, i + r),
                                                type: 1 === n ? 5 : 1
                                            },
                                            this.isH264Sei(u.data)) {
                                            for (var y = e.H265_SEI_HEAD.length, _ = 0, S = 3; S < y + 3 && u.data[S] == e.H265_SEI_HEAD[S - 3]; S++)
                                                _++;
                                            if (49 == u.data[11 + _ - 1 + 5] && 72 == u.data[3 + _ - 1 + 1] && 85 == u.data[3 + _ - 1 + 2] && 89 == u.data[3 + _ - 1 + 3] && 65 == u.data[3 + _ - 1 + 4] && 58 == u.data[3 + _ - 1 + 5]) {
                                                var g = u.data.subarray(3 + _ + 5, u.data.length - 1);
                                                this.mse.saveH264SeiData(s, g)
                                            }
                                        } else
                                            this.isH264Aud(u.data) || (l.push(u),
                                                d += u.data.length);
                                        i += r
                                    }
                                }
                            if (d > 0) {
                                var T = {
                                    units: l,
                                    dts: 90 * s,
                                    pts: 90 * (s + h),
                                    key: n === e.IFRAME
                                };
                                this.timeStampStat.setTimeStamp(s, s + h, h),
                                    this.avcTrack.samples.push(T),
                                    this.avcTrack.naluCnt += l.length,
                                    this.avcTrack.len += d,
                                    this.playVideoFrameCnt++,
                                    this.playVideoLength += a,
                                -1 === this.avcTrack.startDts && (this.avcTrack.startDts = s),
                                    this.avcTrack.endDts = s
                            } else
                                o.default.warn("FlvParser.parseVideoNalu discard empty nalu dts=" + s + " pts=" + (s + h) + " dataLen=" + a + " naluLen=" + r)
                        }
                    }, {
                        key: "parseAudio",
                        value: function(t, i, a, s) {
                            var n = t[i++] >>> 4
                                , r = !0
                                , u = s;
                            10 != n && o.default.error("FlvParser.parseAudio Unsupported audio codec, soundFormat=" + n),
                            null != this.audioIncreaseTSMap.get(s) && (s = this.audioIncreaseTSMap.get(s)),
                            s < this.lastAudioTs && 0 != this.lastAudioTs && (r = !1);
                            var l = t[i++];
                            if (0 === l)
                                if (a >= 4) {
                                    var d = t[i] >> 3;
                                    this.audioObjectType = d;
                                    var h = ((7 & t[i]) << 1) + ((128 & t[i + 1]) >> 7);
                                    if (h >= e.AdtsSampleingRates.length)
                                        return void o.default.error("FlvParser.parseAudio SampleingRate out of bounds. samplingIndex=" + h);
                                    this.audioChannelCount = (120 & t[i + 1]) >> 3;
                                    var f = this.getAdtsConfig(d, h, this.audioChannelCount);
                                    f.toString(16) !== this.audioConfig.toString(16) && o.default.warn("FlvParser.parseAudio adts changed old=" + this.audioConfig + " new=" + f),
                                        this.audioConfig = f
                                } else
                                    o.default.warn("FlvParser.parseAudio adts error dataLen=" + a + " ts=" + s);
                            else if (1 === l) {
                                if (-1 == this.firstDemuxAudioTS)
                                    this.firstDemuxAudioTS = s;
                                else if (s == this.firstDemuxAudioTS)
                                    return void o.default.warn("parseaudio audio too much audio in firstTs ts=" + s);
                                if (!r)
                                    return void o.default.warn("parseaudio audio ts too small");
                                if (this.lastAudioTs > 0 && this.lastAudioTs == s) {
                                    var c = s + (0 | this.aacTimeLen);
                                    this.audioIncreaseTSMap.set(u, c),
                                        s = c
                                }
                                Number(localStorage._printAudioTs) && o.default.debug("%cFlvParser audio ts", "color:red", s, s - this.lastAudioTs),
                                    this.lastAudioTs = s,
                                    this.hasAudioTag = !0,
                                -1 !== this.aacTrack.startDts && 0 === this.avcTrackList.length && 0 === this.avcTrack.samples.length && s >= this.aacTrack.startDts + this.bufLen && (this.aacTrack.endDts = s,
                                    this.remux(e.REMUX_TYPE_AUDIO)),
                                -1 === this.aacTrack.startDts && (this.aacTrack.startDts = s);
                                var p = a - 2
                                    , v = {
                                    unit: t.subarray(i, i + p),
                                    dts: 90 * s,
                                    pts: 90 * s,
                                    ts: s
                                };
                                this.lastAudioUtil = v.unit,
                                    this.aacTrack.samples.push(v),
                                    this.aacTrack.endDts = s,
                                    this.aacTrack.len += v.unit.length,
                                this.avcTrackList.length > 0 && this.remux(e.REMUX_TYPE_AUDIO)
                            } else
                                o.default.warn("FlvParser.parseAudio error aac packet type=" + l)
                        }
                    }, {
                        key: "getAdtsConfig",
                        value: function(t, i, a) {
                            var s = 0
                                , n = null
                                , r = navigator.userAgent.toLowerCase();
                            return -1 !== r.indexOf("firefox") ? i >= 6 ? (t = 5,
                                n = new Array(4),
                                s = i - 3) : (t = 2,
                                n = new Array(2),
                                s = i) : -1 !== r.indexOf("android") ? -1 !== r.indexOf("mqqbrowser") ? (t = 2,
                                n = new Array(2),
                                s = i) : (t = 5,
                                n = new Array(4),
                                s = i) : (t = 5,
                                n = new Array(4),
                                s = i,
                                i >= 6 ? s = i - 3 : 1 === a && (t = 2,
                                    n = new Array(2),
                                    s = i)),
                                this.audioSampleRate = e.AdtsSampleingRates[i],
                                this.aacTimeLen = 1024e3 / this.audioSampleRate,
                                o.default.log("FlvParser.getAdtsConfig audioSampleRate=" + this.audioSampleRate + " aacTimeLen=" + this.aacTimeLen),
                                n[0] = t << 3,
                                n[0] |= (14 & i) >> 1,
                                n[1] = (1 & i) << 7,
                                n[1] |= a << 3,
                            5 === t && (n[1] |= (14 & s) >> 1,
                                n[2] = (1 & s) << 7,
                                n[2] |= 8,
                                n[3] = 0),
                                o.default.log("FlvParser.getAdtsConfig type=" + t + " index=" + i + " channel=" + a + " exIndex=" + s + " config=" + n),
                                n
                        }
                    }, {
                        key: "isHevcNal",
                        value: function(e, t) {
                            return 0 === e[t] && 0 === e[t + 1] && 0 === e[t + 2] && 1 === e[t + 3]
                        }
                    }, {
                        key: "isH264Sei",
                        value: function(e) {
                            return 6 === e[0]
                        }
                    }, {
                        key: "isH264Aud",
                        value: function(e) {
                            return 9 === e[0]
                        }
                    }, {
                        key: "remux",
                        value: function(t) {
                            t == e.REMUX_TYPE_VIDEO && (this.avcTrackList.push(this.avcTrack),
                                this.avcTrack = {
                                    type: "video",
                                    id: 1,
                                    sn: 0,
                                    samples: [],
                                    len: 0,
                                    duration: 0,
                                    startDts: -1,
                                    endDts: 0,
                                    naluCnt: 0
                                },
                                this.avcTrack.sn = this.avcTrackList[this.avcTrackList.length - 1].sn + 1);
                            var i = this.aacTrack
                                , a = i.samples
                                , s = this.avcTrackList[0];
                            if (s) {
                                if (s.endDts > i.endDts + this.aacTimeLen && (this.hasAudioTag || Date.now() - this.beginParseTs < 200))
                                    return;
                                this.avcTrackList.shift()
                            } else
                                s = this.avcTrack;
                            var n = Number(localStorage._printRemux);
                            n && (o.default.debug("=========== aStartDts:" + i.startDts + " aEndDts:" + i.endDts + " samples:" + i.samples.length),
                                o.default.debug("=========== vStartDts:" + s.startDts + " vEndDts:" + s.endDts + " samples:" + s.samples.length + " avcTrackList:" + this.avcTrackList.length));
                            var r = {
                                type: "audio",
                                id: 2,
                                sn: 0,
                                samples: [],
                                len: 0,
                                duration: 0,
                                startDts: -1,
                                endDts: 0
                            };
                            r.sn = i.sn++,
                                r.config = this.audioConfig,
                                r.audiosamplerate = this.audioSampleRate,
                                r.channelCount = this.audioChannelCount,
                                r.codec = "mp4a.40.5",
                                r.timescale = this.remuxer.timescale;
                            var u = s.startDts
                                , l = s.endDts;
                            -1 === u && (u = i.startDts,
                                l = i.endDts),
                                this.remuxAudio(a, r, u, l),
                                a.length > 0 ? (this.aacTrack.startDts = a[0].ts,
                                    this.aacTrack.endDts = a[a.length - 1].ts) : (this.aacTrack.startDts = -1,
                                    this.aacTrack.endDts = 0),
                                s.duration = Math.round((s.endDts - s.startDts) * (this.remuxer.timescale / 1e3)),
                                r.duration = Math.round((r.endDts - r.startDts) * (this.remuxer.timescale / 1e3)),
                            Number(localStorage._printRemux2) && (o.default.debug("REMUX aac ts=" + r.startDts + "-" + r.endDts + " len=" + r.len + " samples=" + r.samples.length + " duration=" + r.duration),
                                o.default.debug("REMUX avc ts=" + s.startDts + "-" + s.endDts + " len=" + s.len + " samples=" + s.samples.length + " nalus=" + s.naluCnt + " duration=" + s.duration)),
                                this.mse.onGop(l - u),
                                this.remuxer.remux(r, s, 0, !1),
                                this.bufLen = this.DEFAULT_GOP,
                            n && o.default.debug("=========== aStartDts:" + i.startDts + " aEndDts:" + i.endDts + " samples:" + i.samples.length, "\n\n")
                        }
                    }, {
                        key: "remuxAudio",
                        value: function(e, t, i, a) {
                            var s = null;
                            e.length > 0 && (s = e[0]),
                            -1 === this.nextAacDts && (this.nextAacDts = i,
                            0 === this.nextAacDts && (this.nextAacDts += this.aacTimeLen));
                            var n = 0
                                , r = 0
                                , u = 0;
                            for (n = this.nextAacDts; n < a; n += this.aacTimeLen)
                                if (r = Math.round(n),
                                s && s.ts <= r)
                                    (s = e.shift()).ts <= this.lastAacTs && 0 != this.lastAacTs && (n -= this.aacTimeLen,
                                        r = Math.round(n)),
                                    Number(localStorage._printRemux) && o.default.log("^^^^^^^^^^^^^ aac.ts", s.ts, "to", r, "diff", r - s.ts),
                                        this.lastAacTs = s.ts,
                                        s.pts = s.dts = 90 * r,
                                        s.ts = r,
                                        t.samples.push(s),
                                        t.len += s.unit.length,
                                        this.playAudioFrameCnt++,
                                        this.playAudioLength += s.unit.length,
                                    -1 === t.startDts && (t.startDts = s.ts),
                                        t.endDts = s.ts,
                                        s = e.length > 0 ? e[0] : null;
                                else if (!this.mse.isPureAudio) {
                                    u++;
                                    var d = null;
                                    d = 22050 === this.audioSampleRate ? {
                                        unit: new Uint8Array(l.default.emptyAacFrame),
                                        pts: 0,
                                        dts: 0,
                                        ts: 0
                                    } : {
                                        unit: l.default.getSilentFrame(this.audioObjectType, this.audioChannelCount),
                                        pts: 0,
                                        dts: 0,
                                        ts: 0
                                    },
                                    d && (d.pts = d.dts = 90 * r,
                                        d.ts = r,
                                        t.samples.push(d),
                                        t.len += d.unit.length,
                                    r > this.lastAudioTs && (this.lastAudioTs = r),
                                        this.playAudioFrameCnt++,
                                        this.playEmptyAudioFrameCnt++,
                                        this.playAudioLength += d.unit.length,
                                    -1 === t.startDts && (t.startDts = d.ts),
                                        t.endDts = d.ts)
                                }
                            this.nextAacDts = n,
                            u > 0 && this.hasAudioTag && (this.hasEmptyFrames = !0,
                                o.default.log("FlvParser.remux aac add " + u + " empty frames."))
                        }
                    }]),
                        e
                }();
                v.REMUX_TYPE_AUDIO = 0,
                    v.REMUX_TYPE_VIDEO = 1,
                    v.FLV_HEADER_LEN = 9,
                    v.TAG_HEADER_LEN = 11,
                    v.PREV_TAG_SIZE_LEN = 4,
                    v.AUDIO_TYPE = 8,
                    v.VIDEO_TYPE = 9,
                    v.SCRIPT_TYPE = 18,
                    v.IFRAME = 1,
                    v.NAL_VPS = 32,
                    v.NAL_SPS = 33,
                    v.NAL_PPS = 34,
                    v.H265_SEI_HEAD = [44, 162, 222, 9, 181, 23, 71, 219, 187, 85, 164, 254, 127, 194, 252, 78],
                    v.AdtsSampleingRates = [96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3, 12e3, 11025, 8e3, 7350],
                    t.default = v
            }
            , function(e, t, i) {
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }),
                    t.default = {
                        PUSH_GOP: 0,
                        JIT_BUFLEN: 2,
                        VIDEO_JIT_MIN_BUFLEN: 3,
                        VIDEO_JIT_MAX_BUFLEN: 4
                    }
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(46))
                    , u = a(i(3))
                    , o = a(i(8))
                    , l = a(i(5))
                    , d = a(i(52))
                    , h = a(i(202))
                    , f = a(i(203))
                    , c = a(i(27))
                    , p = a(i(34))
                    , v = function() {
                    function e(t) {
                        (0,
                            s.default)(this, e),
                            this.flvMgr = t,
                            c.default.firefox ? this.link = new h.default(this) : this.link = new f.default(this),
                            this.status = 0,
                            this.url = null,
                            this.started = !1,
                            this.errored = !1,
                            this.lastGetProxyTime = 0,
                            this.getProxyPeriod = e.DEFAULT_GET_PROXY_PERIOD
                    }
                    return (0,
                        n.default)(e, [{
                        key: "destroy",
                        value: function() {
                            this.reset()
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            this.started && (u.default.log("FlvLink.reset"),
                                this.link.destroy(),
                                c.default.firefox ? this.link = new h.default(this) : this.link = new f.default(this),
                                this.status = 0,
                                this.url = null)
                        }
                    }, {
                        key: "connect",
                        value: function(e) {
                            e ? (this.link instanceof d.default && (e = e.replace("http", "ws")),
                                e += "&u=" + r.default.convertUid + "&t=100&sv=1810311321",
                                u.default.log("FlvLink.connect url=" + e),
                                this.reset(),
                            this.flvMgr.stat && this.flvMgr.stat.setHttpHead(e),
                                this.lastGetProxyTime = l.default.now() - 2e3,
                                this.url = e,
                                this.link.connect(this.url),
                                this.started = !0) : u.default.warn("FlvLink.connect url is null")
                        }
                    }, {
                        key: "close",
                        value: function() {
                            u.default.log("FlvLink.close"),
                                this.reset(),
                                this.started = !1
                        }
                    }, {
                        key: "onstatus",
                        value: function(e) {
                            this.status = e
                        }
                    }, {
                        key: "onopen",
                        value: function() {
                            u.default.log("FlvLink.onopen"),
                                this.getProxyPeriod = e.DEFAULT_GET_PROXY_PERIOD,
                                this.flvMgr.onConnected()
                        }
                    }, {
                        key: "onclose",
                        value: function() {
                            u.default.log("FlvLink.onclose"),
                                this.flvMgr.onClosed(),
                                this.getProxy()
                        }
                    }, {
                        key: "onerror",
                        value: function(e) {
                            u.default.log("FlvLink.onerror"),
                                this.getProxy(),
                            this.flvMgr.onLoadError && this.flvMgr.onLoadError(e)
                        }
                    }, {
                        key: "onData",
                        value: function(e) {
                            this.flvMgr.onData(e)
                        }
                    }, {
                        key: "onCheckTimer",
                        value: function(e, t) {
                            if (this.started && (this.onCheckConnect(e),
                            t % 10 == 0)) {
                                var i = this.link.speed;
                                i != o.default.UintMax && (i = o.default.formatByteSize(i),
                                void 0 !== p.default && p.default.addSpeed(i),
                                    u.default.log("FlvLink speed " + i + "/s"))
                            }
                        }
                    }, {
                        key: "onCheckConnect",
                        value: function(e) {
                            this.connected || this.errored || this.getProxy()
                        }
                    }, {
                        key: "getProxy",
                        value: function() {
                            var e = l.default.now();
                            e - this.lastGetProxyTime < this.getProxyPeriod || (u.default.log("FlvLink.getProxy lastGetProxyTime=" + this.lastGetProxyTime + " now=" + e + " period=" + this.getProxyPeriod),
                                this.reset(),
                                this.lastGetProxyTime = e,
                                this.getProxyPeriod = Math.min(2 * this.getProxyPeriod, 128e3),
                                this.errored = !0,
                                this.flvMgr.requestUrl())
                        }
                    }, {
                        key: "speed",
                        get: function() {
                            var e = this.link.speed;
                            return e == o.default.UintMax && (e = 0),
                                e
                        }
                    }, {
                        key: "connected",
                        get: function() {
                            return this.link && this.link.connected
                        }
                    }]),
                        e
                }();
                v.DEFAULT_GET_PROXY_PERIOD = 4e3,
                    t.default = v
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(11))
                    , u = a(i(3))
                    , o = a(i(15))
                    , l = function() {
                    function e(t) {
                        var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 10;
                        (0,
                            s.default)(this, e),
                            this.linkHandler = t,
                            this.connected = !1,
                            this.url = null,
                            this.xhr = null,
                            this.avgSpeed = new o.default(i)
                    }
                    return (0,
                        n.default)(e, [{
                        key: "destroy",
                        value: function() {
                            this.reset(),
                                this.linkHandler = null,
                                r.default.remove(this.onCheckTimer, this)
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            this.abort(),
                                this.url = null,
                                this.xhr = null,
                                this.connected = !1,
                                this.avgSpeed.reset()
                        }
                    }, {
                        key: "abort",
                        value: function() {
                            this.xhr && (u.default.log("ProtoLinkXhrFF abort"),
                                this.xhr.abort())
                        }
                    }, {
                        key: "connect",
                        value: function(e) {
                            this.reset(),
                                this.url = e;
                            var t = this.xhr = new XMLHttpRequest;
                            t.responseType = "moz-chunked-arraybuffer",
                                t.open("GET", this.url, !0),
                                t.onerror = this.onerror.bind(this),
                                t.onprogress = this.onprogress.bind(this),
                                t.onloadend = this.loadend.bind(this),
                                t.onload = this.onclose.bind(this),
                                t.send(),
                                r.default.add(this.onCheckTimer, this, 1e3)
                        }
                    }, {
                        key: "onprogress",
                        value: function(e) {
                            this.connected || this.onopen();
                            var t = e.target.response;
                            this.linkHandler.onData(t),
                                this.avgSpeed.addCur(t.byteLength)
                        }
                    }, {
                        key: "onreadystatechange",
                        value: function(e) {}
                    }, {
                        key: "onopen",
                        value: function() {
                            this.connected = !0,
                            this.linkHandler && this.linkHandler.onopen()
                        }
                    }, {
                        key: "onerror",
                        value: function(e) {
                            u.default.log("ProtoLinkXhrFF.onerror " + e);
                            var t = event.currentTarget.status;
                            this.connected = !1,
                            this.linkHandler && (this.linkHandler.onerror(e, t),
                                this.linkHandler = null)
                        }
                    }, {
                        key: "loadend",
                        value: function(e) {
                            404 === e.currentTarget.status && this.onerror(e)
                        }
                    }, {
                        key: "onclose",
                        value: function() {
                            u.default.log("ProtoLinkXhrFF.onclose"),
                                this.connected = !1,
                            this.linkHandler && (this.linkHandler.onclose(),
                                this.linkHandler = null)
                        }
                    }, {
                        key: "onCheckTimer",
                        value: function(e, t) {
                            this.connected && this.avgSpeed.calculate()
                        }
                    }, {
                        key: "speed",
                        get: function() {
                            return this.avgSpeed.average()
                        }
                    }]),
                        e
                }();
                t.default = l
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(11))
                    , u = a(i(3))
                    , o = a(i(15))
                    , l = function() {
                    function e(t) {
                        var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 10;
                        (0,
                            s.default)(this, e),
                            this.linkHandler = t,
                            this.connected = !1,
                            this.url = null,
                            this.requestAbort = !1,
                            this.avgSpeed = new o.default(i)
                    }
                    return (0,
                        n.default)(e, [{
                        key: "destroy",
                        value: function() {
                            this.abort(),
                                this.linkHandler = null,
                                this.reset(),
                                r.default.remove(this.onCheckTimer, this)
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            this.url = null,
                                this.connected = !1,
                                this.avgSpeed.reset()
                        }
                    }, {
                        key: "pump",
                        value: function(e) {
                            var t = this;
                            e.read().then(function(i) {
                                if (i.done)
                                    t.onclose();
                                else {
                                    if (!0 === t.requestAbort)
                                        return t.requestAbort = !1,
                                            e.cancel();
                                    var a = i.value.buffer;
                                    t.avgSpeed.addCur(a.byteLength),
                                    t.linkHandler && t.linkHandler.onData(a),
                                        t.pump(e)
                                }
                            }
                                .bind(this)).catch(function(e) {
                                u.default.log("ProtoLinkFetch pump exception"),
                                    t.onerror(e.message, 1e4)
                            })
                        }
                    }, {
                        key: "connect",
                        value: function(e) {
                            var t = this;
                            r.default.add(this.onCheckTimer, this, 1e3),
                                this.url = e,
                                fetch(e).then(function(e) {
                                    Number(localStorage._printFetchUrl) && u.default.log("FetchUrl", e.url),
                                    t.linkHandler && t.linkHandler.onstatus && t.linkHandler.onstatus(e.status),
                                        e.ok && e.status >= 200 && e.status < 300 ? (t.onopen(),
                                            t.pump.call(t, e.body.getReader())) : (u.default.log("ProtoLinkFetch http code invalid status:" + e.status),
                                            t.onerror(e.statusText, e.status))
                                }).catch(function(e) {
                                    u.default.log("ProtoLinkFetch exception"),
                                        t.onerror(e.message)
                                })
                        }
                    }, {
                        key: "abort",
                        value: function() {
                            this.requestAbort = !0
                        }
                    }, {
                        key: "onopen",
                        value: function() {
                            this.connected = !0,
                            this.linkHandler && this.linkHandler.onopen()
                        }
                    }, {
                        key: "onerror",
                        value: function(e, t) {
                            u.default.log("ProtoLinkFetch.onerror " + e),
                                this.connected = !1,
                            this.linkHandler && (this.linkHandler.onerror(e, t),
                                this.linkHandler = null)
                        }
                    }, {
                        key: "onclose",
                        value: function() {
                            this.connected = !1,
                            this.linkHandler && (this.linkHandler.onclose(),
                                this.linkHandler = null)
                        }
                    }, {
                        key: "onCheckTimer",
                        value: function(e, t) {
                            this.connected && this.avgSpeed.calculate()
                        }
                    }, {
                        key: "speed",
                        get: function() {
                            return this.avgSpeed.average()
                        }
                    }]),
                        e
                }();
                t.default = l
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = function() {
                    function e() {
                        (0,
                            s.default)(this, e)
                    }
                    return (0,
                        n.default)(e, null, [{
                        key: "K_BONUS_TIME",
                        value: function() {
                            return 1e4
                        }
                    }, {
                        key: "calcLineScore",
                        value: function(e, t, i) {
                            var a = -1;
                            return (a = i < e[0] ? i * t[0] : i < e[1] ? (i - e[0]) * t[1] + e[0] * t[0] : i < e[2] ? (i - e[1]) * t[2] + (e[1] - e[0]) * t[1] + e[0] * t[0] : i < e[3] ? (i - e[2]) * t[3] + (e[2] - e[1]) * t[2] + (e[1] - e[0]) * t[1] + e[0] * t[0] : (i - e[3]) * t[4] + (e[3] - e[2]) * t[3] + (e[2] - e[1]) * t[2] + (e[1] - e[0]) * t[1] + e[0] * t[0]) > 1e6 && (a = 1e6),
                                a
                        }
                    }, {
                        key: "calcDelayScore",
                        value: function(t) {
                            var i = t
                                , a = new Array(100,400,1400,5400)
                                , s = new Array(1,3,9,27,81);
                            return e.calcLineScore(a, s, i)
                        }
                    }, {
                        key: "calcLossScore",
                        value: function(t) {
                            var i = new Array(20,50,100,200)
                                , a = new Array(5,30,180,1080,6480);
                            return e.calcLineScore(i, a, t)
                        }
                    }, {
                        key: "calcRateScore",
                        value: function(t, i) {
                            i > t && (i = t);
                            var a = Math.round(1e3 * (t - i + 1) / (t + 2));
                            return e.calcLossScore(a)
                        }
                    }, {
                        key: "calcScore",
                        value: function(t, i, a) {
                            var s = e.calcDelayScore(t);
                            a > i && (a = i);
                            var n = s + e.calcRateScore(i, a);
                            return (n /= 5) > 65535 && (n = 65535),
                                n
                        }
                    }, {
                        key: "cmpScore",
                        value: function(e, t) {
                            return e < t ? -1 : e > t ? 1 : 0
                        }
                    }]),
                        e
                }();
                t.default = r
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(61))
                    , n = a(i(9))
                    , r = a(i(3))
                    , u = a(i(2))
                    , o = a(i(65))
                    , l = a(i(294))
                    , d = null
                    , h = function(e) {
                    var t = e.data
                        , i = t.cmd
                        , a = t.data;
                    switch (i) {
                        case 2:
                            if (a.uri == u.default.PP2pSliceVideoData) {
                                var s = a.rsp.config;
                                !s.has && s._c && (a.rsp.config = s._c)
                            }
                            n.default._onYYData(a.uri, a.rsp);
                            break;
                        case 3:
                            p.sliceRecvSeq = a.seq;
                            var r = new o.default;
                            r.seq = a.seq,
                                r.uri = a.uri,
                                r.from = a.from,
                                r.payload = a.payload,
                                r.loaderId = a.loaderId,
                                n.default._onYYData(u.default.PP2pSliceData, r)
                    }
                }
                    , f = function(e) {
                    r.default.error("VideoLoader Worker error:", e.lineno + "," + e.colno, e.message),
                        d.terminate(),
                        d = null,
                        r.default.warn("[ VideoLoader Worker terminate ]"),
                        p.cdnMgr ? p.cdnMgr.restart(7) : r.default.error("VideoLoader.bridge restart failed!")
                }
                    , c = !!Number(localStorage._closeWorker)
                    , p = {
                    cdnMgr: null,
                    sliceRecvSeq: 0,
                    isRunning: function() {
                        return !c && d
                    },
                    parsePkgData: function(e) {
                        d && e && d.postMessage((0,
                            s.default)({
                            cmd: 1
                        }, e))
                    },
                    parseSlice: function(e) {
                        d && e && d.postMessage((0,
                            s.default)({
                            cmd: 4
                        }, e))
                    },
                    resetRangeBuffer: function(e) {
                        d && d.postMessage({
                            cmd: 5,
                            loaderId: e
                        })
                    },
                    dispose: function() {
                        d && (d.removeEventListener("message", h),
                            d.removeEventListener("error", f),
                            d.terminate(),
                            d = null)
                    },
                    creatNewWorker: function() {
                        (d = (0,
                            l.default)(295)).addEventListener("message", h),
                            d.addEventListener("error", f)
                    }
                };
                t.default = p
            }
            , function(e, t, i) {
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }),
                    t.default = {
                        RECONNECT_CONNECTION_ERROR: 1,
                        RECONNECT_CONNECTION_SLOW: 2,
                        RECONNECT_NO_SLICE: 3,
                        RECONNECT_NO_DATA: 4,
                        RECONNECT_CONNECTION_FAILED: 5,
                        1: "连接失败",
                        2: "连接超时",
                        3: "播放过程中无切片",
                        4: "连上三秒无数据",
                        5: "连接失败",
                        REACTIVE_TS: 6e4
                    }
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                function s() {
                    return void 0 === localStorage._testMultiLoader ? U && y.default.isMutiCdn() : U && b
                }
                function n(e, t) {
                    var i = !1
                        , a = !0
                        , s = !1
                        , n = void 0;
                    try {
                        for (var r, u = (0,
                            p.default)(A.values()); !(a = (r = u.next()).done); a = !0) {
                            var o = r.value;
                            o.activeTs > 0 && e > o.activeTs && (o.activeTs = 0,
                                o.active = !0,
                                i = !0,
                                _.default.log("MultiLoader.onCheckTimer reActive line=" + o.lineType))
                        }
                    } catch (e) {
                        s = !0,
                            n = e
                    } finally {
                        try {
                            !a && u.return && u.return()
                        } finally {
                            if (s)
                                throw n
                        }
                    }
                    i && l()
                }
                function r() {
                    if (U) {
                        _.default.log("MultiLoader.close"),
                            S.default.remove(n, null);
                        var e = !0
                            , t = !1
                            , i = void 0;
                        try {
                            for (var a, s = (0,
                                p.default)(A.values()); !(e = (a = s.next()).done); e = !0)
                                a.value.subLoader.close()
                        } catch (e) {
                            t = !0,
                                i = e
                        } finally {
                            try {
                                !e && s.return && s.return()
                            } finally {
                                if (t)
                                    throw i
                            }
                        }
                        A.clear(),
                            M = 1,
                            U = !1
                    }
                }
                function u(e) {
                    var t = e.line
                        , i = e.reason
                        , a = I.default[i];
                    _.default.warn("MultiLoaderMgr.onLoaderCallback line=" + t + " reason=" + i + " " + a);
                    var s = A.get(Number(t));
                    s && (s.active = !1,
                        s.activeTs = g.default.now() + I.default.REACTIVE_TS);
                    var n = !1
                        , r = !0
                        , u = !1
                        , d = void 0;
                    try {
                        for (var h, f = (0,
                            p.default)(A.values()); !(r = (h = f.next()).done); r = !0)
                            if (h.value.active) {
                                n = !0;
                                break
                            }
                    } catch (e) {
                        u = !0,
                            d = e
                    } finally {
                        try {
                            !r && f.return && f.return()
                        } finally {
                            if (u)
                                throw d
                        }
                    }
                    n ? l() : o()
                }
                function o() {
                    R.restart(P.default.restartReason.MULTI_CDN),
                        r()
                }
                function l() {
                    _.default.log("MultiLoaderMgr.reload"),
                        d(y.default.extendConfig.multiCdnRate),
                        h(0, C)
                }
                function d(e) {
                    var t = !0
                        , i = !1
                        , a = void 0;
                    try {
                        for (var s, n = (0,
                            p.default)(A.values()); !(t = (s = n.next()).done); t = !0)
                            s.value.ratio = 0
                    } catch (e) {
                        i = !0,
                            a = e
                    } finally {
                        try {
                            !t && n.return && n.return()
                        } finally {
                            if (i)
                                throw a
                        }
                    }
                    var r = 0;
                    for (var u in e)
                        if (A.has(Number(u))) {
                            var o = A.get(Number(u));
                            if (o.active) {
                                var l = Number(e[u]);
                                o.ratio = l,
                                    r += l
                            }
                        }
                    0 == r && (_.default.error("MultiLoader.updateRatio total ratio is 0."),
                        A.get(y.default.lineType).ratio = r = 100);
                    var d = []
                        , h = 0
                        , f = !0
                        , v = !1
                        , m = void 0;
                    try {
                        for (var S, g = (0,
                            p.default)(A.values()); !(f = (S = g.next()).done); f = !0) {
                            var T = S.value;
                            T.ratio /= r,
                            T.ratio > 0 && (h++,
                                d.push(T.lineType + ":" + T.ratio.toFixed(2)))
                        }
                    } catch (e) {
                        v = !0,
                            m = e
                    } finally {
                        try {
                            !f && g.return && g.return()
                        } finally {
                            if (v)
                                throw m
                        }
                    }
                    M = h,
                        _.default.log("%cMultiLoader.updateRatio activeLineCnt=" + M + " " + (0,
                            c.default)(e) + " [" + d.join(", ") + "]", "background:#FFBFFF")
                }
                function h(e, t) {
                    C = t.slice(),
                        _.default.log("MultiLoader.loadSubStream baseIndex=" + e + " subs=" + t.join(",")),
                        function(e) {
                            var t = e.length
                                , i = 0
                                , a = y.default.lineType
                                , s = 0
                                , n = !0
                                , r = !1
                                , u = void 0;
                            try {
                                for (var o, l = (0,
                                    p.default)(A.values()); !(n = (o = l.next()).done); n = !0) {
                                    var d = o.value;
                                    d.subs = null,
                                        d.active && d.ratio > 0 ? (d.subNum = Math.round(d.ratio * t),
                                        d.subNum > i && (i = d.subNum,
                                            a = d.lineType),
                                            s += d.subNum) : d.subNum = 0
                                }
                            } catch (e) {
                                r = !0,
                                    u = e
                            } finally {
                                try {
                                    !n && l.return && l.return()
                                } finally {
                                    if (r)
                                        throw u
                                }
                            }
                            s > t ? A.get(a).subNum -= s - t : s < t && (A.get(a).subNum += t - s)
                        }(t);
                    var i = E.default.getStreamMaxSeqs()
                        , a = 0
                        , s = !0
                        , n = !1
                        , r = void 0;
                    try {
                        for (var u, l = (0,
                            p.default)(A.values()); !(s = (u = l.next()).done); s = !0) {
                            var d = u.value;
                            d.subNum > 0 ? function() {
                                d.subs = t.slice(a, a + d.subNum),
                                    a += d.subNum;
                                var s = 0
                                    , n = 0;
                                d.subs.forEach(function(e) {
                                    var t = i[e];
                                    (0 == s || t < s) && (s = t),
                                    (0 == n || t > n) && (n = t)
                                }),
                                    _.default.log("-".repeat(88), "\nMultiLoaderMgr.loadSubStream line=" + d.lineType + " baseIndex=" + e + " minSeq=" + s + " maxSeq=" + n + " delta=" + (n - s)),
                                    f(d, s + 1 || e)
                            }() : d.subLoader.started && d.subLoader.close()
                        }
                    } catch (e) {
                        n = !0,
                            r = e
                    } finally {
                        try {
                            !s && l.return && l.return()
                        } finally {
                            if (n)
                                throw r
                        }
                    }
                    a != t.length && (_.default.error("MultiLoader.loadSubStream something wrong", a, t.length, t),
                        o())
                }
                function f(e, t) {
                    if (e.subLoader.started && e.subLoader.close(),
                        e.subs) {
                        var i = function(e, t) {
                            if (!A.has(e))
                                throw new Error("TokenMgr.getUrl No loader of line " + e);
                            if (!y.default.streamId)
                                throw new Error("TokenMgr.getUrl G.streamId undefined.");
                            var i = A.get(e)
                                , a = t == T.default.TYPE_RANGE ? "http" : "ws";
                            L && (a += "s");
                            var s = "";
                            3 == e && t != T.default.TYPE_RANGE && (s = "/websocket");
                            var n = y.default.streamId.text();
                            return a + ":" + i.p2pUrl + s + "/" + n + "." + i.suffix + "?" + y.default.sFlvToken + "&ex1=" + y.default.exip + "&baseIndex="
                        }(e.lineType, T.default.TYPE_SUB) + t;
                        i += "&baseSubs=" + y.default.BASE_SUBS + "&sub=" + e.subs.join(","),
                            e.subLoader.connect(i, e.lineType)
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var c = a(i(43))
                    , p = a(i(14))
                    , v = a(i(6))
                    , m = a(i(0))
                    , y = a(i(9))
                    , _ = a(i(3))
                    , S = a(i(11))
                    , g = a(i(5))
                    , T = (a(i(47)),
                    a(i(63)),
                    a(i(53)))
                    , P = a(i(10))
                    , I = a(i(206))
                    , E = a(i(28))
                    , k = function e(t) {
                    (0,
                        m.default)(this, e),
                        this.active = !0,
                        this.activeTs = 0,
                        this.lineType = null,
                        this.p2pUrl = null,
                        this.suffix = null,
                        this.subNum = 0,
                        this.ratio = 1,
                        this.subs = null,
                        this.subLoader = new T.default(t,T.default.TYPE_SUB),
                        this.subLoader.isMultiCdnSubLoader = !0,
                        this.subLoader.onMultiCdnSubLoaderCallback = u
                }
                    , R = null
                    , C = null
                    , L = function() {
                    var e = !1;
                    if (-1 == self.location.protocol.indexOf("https")) {
                        var t = y.default.extendConfig.p2pWssLines;
                        "string" == typeof t && (e = "all" == (t = t.toLowerCase()) || -1 != t.split(",").indexOf(y.default.lineType.toString()))
                    } else
                        e = !0;
                    return void 0 === localStorage._testSSL ? e : Number(localStorage._testSSL) > 0
                }()
                    , A = new v.default
                    , M = 1
                    , U = !1
                    , b = !!Number(localStorage._testMultiLoader);
                t.default = {
                    init: function(e, t) {
                        if (R = t,
                            e) {
                            A.clear(),
                                M = 1;
                            var i = e.length
                                , a = !0
                                , r = !1
                                , u = void 0;
                            try {
                                for (var o, l = (0,
                                    p.default)(e); !(a = (o = l.next()).done); a = !0) {
                                    var h = o.value
                                        , f = h.sP2pUrl;
                                    if (f) {
                                        "/" == f.substr(-1) && (f = f.substr(0, f.length - 1)),
                                            f = f.replace(/^(http|ws)s?\:/i, "");
                                        var c = new k(t);
                                        c.lineType = Number(h.iLineIndex),
                                            c.p2pUrl = f,
                                            c.suffix = h.sP2pUrlSuffix,
                                            c.ratio = 1 / i,
                                            A.set(c.lineType, c)
                                    }
                                }
                            } catch (e) {
                                r = !0,
                                    u = e
                            } finally {
                                try {
                                    !a && l.return && l.return()
                                } finally {
                                    if (r)
                                        throw u
                                }
                            }
                            A.size < 2 ? _.default.warn("MultiLoader.init faild, lineCnt=" + i) : (d(y.default.extendConfig.multiCdnRate),
                                S.default.add(n, null, 1e4),
                                U = !0,
                                _.default.log("%cMultiLoader " + (s() ? "on" : "off"), "background:#FFBFFF"))
                        }
                    },
                    close: r,
                    isTurnOn: s,
                    loadSubStream: h,
                    stopSubStream: function(e) {
                        _.default.log("MultiLoaderMgr.stopSubStream"),
                            A.forEach(function(e, t) {
                                e.subLoader.close()
                            })
                    }
                }
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.size = 0,
                            this.head = null,
                            this.freeChainSize = 0,
                            this.freeChain = null,
                            this.travelNode = null
                    }
                    return (0,
                        n.default)(e, [{
                        key: "resetTravel",
                        value: function() {
                            this.travelNode = this.head
                        }
                    }, {
                        key: "travel",
                        value: function() {
                            if (null === this.travelNode && (this.travelNode = this.head,
                            null === this.travelNode))
                                return null;
                            var e = this.travelNode.data;
                            return this.travelNode = this.travelNode.next,
                                this.travelNode === this.head || null === this.travelNode ? null : e
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            this.resetTravel();
                            var e = null
                                , t = null;
                            for (e = this.head; null != e; )
                                t = e,
                                    e = e.next,
                                    t.data = null,
                                    t.prev = null,
                                    t.next = null,
                                e === this.head && (e = null);
                            for (this.head = null,
                                     e = this.freeChain; null != e; )
                                t = e,
                                    e = e.next,
                                    t.data = null,
                                    t.prev = null,
                                    t.next = null;
                            this.freeChain = null,
                                this.size = 0,
                                this.freeChainSize = 0
                        }
                    }, {
                        key: "put",
                        value: function(e) {
                            var t = this.getFree(e);
                            if (this.size++,
                            null === this.head)
                                t.prev = t,
                                    t.next = t,
                                    this.head = t;
                            else if (t.data.key < this.head.data.key)
                                t.prev = this.head.prev,
                                    t.next = this.head,
                                    t.prev.next = t,
                                    t.next.prev = t,
                                    this.head = t;
                            else {
                                for (var i = this.head.prev; t.data.key < i.data.key; )
                                    i = i.prev;
                                if (t.data.key === i.data.key)
                                    return this.size--,
                                        this.putFree(t),
                                        !1;
                                t.prev = i,
                                    t.next = i.next,
                                    t.prev.next = t,
                                    t.next.prev = t
                            }
                            return !0
                        }
                    }, {
                        key: "put2",
                        value: function(e) {
                            var t = this.getFree(e);
                            if (this.size++,
                            null === this.head)
                                t.prev = t,
                                    t.next = t,
                                    this.head = t;
                            else if (t.data.key < this.head.data.key)
                                t.prev = this.head.prev,
                                    t.next = this.head,
                                    t.prev.next = t,
                                    t.next.prev = t,
                                    this.head = t;
                            else {
                                for (var i = this.head; t.data.key > i.data.key && (i = i.next) !== this.head; )
                                    ;
                                if (t.data.key === i.data.key)
                                    return this.size--,
                                        this.putFree(t),
                                        !1;
                                t.prev = i.prev,
                                    t.next = i,
                                    i.prev.next = t,
                                    i.prev = t
                            }
                            return !0
                        }
                    }, {
                        key: "get",
                        value: function() {
                            if (null === this.head)
                                return null;
                            var e = this.head
                                , t = e.data;
                            return this.size--,
                                0 === this.size ? this.head = null : (e.prev.next = e.next,
                                    e.next.prev = e.prev,
                                    this.head = this.head.next),
                                this.putFree(e),
                                t
                        }
                    }, {
                        key: "peek",
                        value: function() {
                            return null === this.head ? null : this.head.data
                        }
                    }, {
                        key: "peekLast",
                        value: function() {
                            return null === this.head ? null : this.head.prev.data
                        }
                    }, {
                        key: "getOrNewNode",
                        value: function(e) {
                            var t = null;
                            if (null === this.head)
                                this.size++,
                                    (t = this.getFree(null)).prev = t,
                                    t.next = t,
                                    this.head = t;
                            else if (e < this.head.data.key)
                                this.size++,
                                    (t = this.getFree(null)).prev = this.head.prev,
                                    t.next = this.head,
                                    t.prev.next = t,
                                    t.next.prev = t,
                                    this.head = t;
                            else {
                                for (var i = this.head.prev; e < i.data.key; )
                                    i = i.prev;
                                i.data.key === e ? t = i : (this.size++,
                                    (t = this.getFree(null)).prev = i,
                                    t.next = i.next,
                                    t.prev.next = t,
                                    t.next.prev = t)
                            }
                            return t
                        }
                    }, {
                        key: "putFree",
                        value: function(e) {
                            e.data = null,
                                e.next = this.freeChain,
                                e.prev = null,
                                this.freeChain = e,
                                this.freeChainSize++
                        }
                    }, {
                        key: "getFree",
                        value: function(e) {
                            if (null === this.freeChain)
                                return new u(e);
                            var t = this.freeChain;
                            return t.data = e,
                                this.freeChain = t.next,
                                this.freeChainSize--,
                                t
                        }
                    }, {
                        key: "getLast",
                        value: function() {
                            if (null == this.head)
                                return null;
                            var e = this.head.prev
                                , t = e.data;
                            return this.size--,
                                0 === this.size ? this.head = null : (e.prev.next = e.next,
                                    e.next.prev = e.prev),
                                this.putFree(e),
                                t
                        }
                    }]),
                        e
                }()
                    , u = function e(t) {
                    (0,
                        s.default)(this, e),
                        this.next = null,
                        this.prev = null,
                        this.data = t
                };
                t.default = r
            }
            , function(e, t, i) {
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }),
                    t.default = {
                        FRAMETYPE_VIDEO_I: 0,
                        FRAMETYPE_VIDEO_P: 1,
                        FRAMETYPE_VIDEO_B: 2,
                        FRAMETYPE_VIDEO_SP: 3
                    }
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(43))
                    , n = a(i(147))
                    , r = a(i(61))
                    , u = a(i(0))
                    , o = a(i(1))
                    , l = a(i(9))
                    , d = a(i(23))
                    , h = a(i(46))
                    , f = a(i(47))
                    , c = a(i(63))
                    , p = a(i(20))
                    , v = a(i(259))
                    , m = a(i(3))
                    , y = a(i(34))
                    , _ = a(i(5))
                    , S = a(i(18))
                    , g = a(i(8))
                    , T = a(i(27))
                    , P = a(i(260))
                    , I = a(i(261))
                    , E = a(i(270))
                    , k = a(i(274))
                    , R = a(i(317))
                    , C = a(i(334))
                    , L = a(i(10))
                    , A = function() {
                    function e() {
                        (0,
                            u.default)(this, e),
                            _.default.now(),
                            S.default.h5Player = this;
                        var t = Number(localStorage.sdkLogLevel);
                        isNaN(t) || this.setLogLevel(t);
                        var i = this.observer = new v.default;
                        i.trigger = function(e) {
                            for (var t = arguments.length, a = Array(t > 1 ? t - 1 : 0), s = 1; s < t; s++)
                                a[s - 1] = arguments[s];
                            setTimeout(function() {
                                var t = a;
                                "Array" == a.constructor.name && (t = a[0]),
                                    e == p.default.PLAY_STATUS ? m.default.log("%c" + e + " %c" + t.status, "color:#F9F900;background:gray", "color:#53FF53;background:gray") : e != p.default.H264_SEI_PLAY && m.default.log("%c" + e, "color:#F9F900;background:gray", t),
                                    i.emit.apply(i, [e, e].concat(a))
                            }, 0)
                        }
                            ,
                            i.off = function(e) {
                                for (var t = arguments.length, a = Array(t > 1 ? t - 1 : 0), s = 1; s < t; s++)
                                    a[s - 1] = arguments[s];
                                i.removeListener.apply(i, [e].concat(a))
                            }
                            ,
                            this.on = i.on.bind(i),
                            this.off = i.off.bind(i),
                            this.trigger = i.trigger.bind(i),
                            this.webUser = new P.default(this),
                            this.playingMgr = null,
                            this.hlsMgr = null,
                            this.flvMgr = null,
                            this.cdnMgr = null,
                            this.huyaMgr = null,
                            this.flacMgr = null,
                            this.volume = 1,
                            this.muted = !1,
                            this.config = {},
                            this.waitStreamInfo = !1,
                            this.p2pCooling = !1,
                            this.flacLibURL = "flaclib.js",
                            this.videoPlaybackrateAccess = !T.default.firefox,
                            this._livingStreamInfoNoticeBind = this._livingStreamInfoNotice.bind(this),
                            this._livingStreamEndNoticeBind = this._livingStreamEndNotice.bind(this),
                            this._onGetLivingStreamInfoBind = this._onGetLivingStreamInfo.bind(this);
                        var a = T.default.platform + " " + T.default.name + " " + T.default.version.string;
                        m.default.warn("SDK 1810311321 | SVN 4339 | 2018-10-31 13:21:48 | RELEASE | " + a),
                        this.isSupportP2P || m.default.warn("xxxxxxx", T.default.name, T.default.version.major, "unsupport p2p !")
                    }
                    return (0,
                        o.default)(e, null, [{
                        key: "isSupported",
                        value: function() {
                            return window.MediaSource && window.MediaSource.isTypeSupported('video/mp4; codecs="avc1.42E01E,mp4a.40.2"')
                        }
                    }, {
                        key: "Events",
                        get: function() {
                            return p.default
                        }
                    }]),
                        (0,
                            o.default)(e, [{
                            key: "isBrowserSupport",
                            value: function() {
                                return T.default.firefox || T.default.opera || T.default.chrome && 53 != T.default.version.major
                            }
                        }, {
                            key: "isP2PCooling",
                            value: function() {
                                return 1 === Number(l.default.extendConfig.needCooling) && 1 == localStorage.getItem("p2p_cooling_play")
                            }
                        }, {
                            key: "_updateConfig",
                            value: function(e) {
                                if (e && e.setConfig)
                                    for (var t in this.config) {
                                        var i = this.config[t];
                                        e.setConfig(Number(t), i)
                                    }
                            }
                        }, {
                            key: "setVolume",
                            value: function(e) {
                                var t = Number(e);
                                t > 1 || t < 0 ? m.default.warn("H5Player.setVolume error volume=" + t) : (this.volume = t,
                                this.huyaMgr && this.huyaMgr.setVolume(t),
                                    this.flacMgr && this.flacMgr.isPlaying() ? (t = 0,
                                        this.flacMgr.setVolume(this.volume),
                                        this.setVideoPlaybackrateAccess(!1)) : this.setVideoPlaybackrateAccess(!0),
                                this.hlsMgr && this.hlsMgr.setVolume(t),
                                this.flvMgr && this.flvMgr.setVolume(t),
                                this.cdnMgr && this.cdnMgr.setVolume(t))
                            }
                        }, {
                            key: "flacPlayStatusChange",
                            value: function() {
                                this.setVolume(this.volume)
                            }
                        }, {
                            key: "setVideoPlaybackrateAccess",
                            value: function(e) {
                                this.flvMgr && this.flvMgr.setPlaybackrateAccess(!!this.videoPlaybackrateAccess && e),
                                this.cdnMgr && this.cdnMgr.setPlaybackrateAccess(!!this.videoPlaybackrateAccess && e)
                            }
                        }, {
                            key: "getVolume",
                            value: function() {
                                return this.volume
                            }
                        }, {
                            key: "setMuted",
                            value: function(e) {
                                this.hlsMgr && this.hlsMgr.setMuted(nVal),
                                this.flvMgr && this.flvMgr.setMuted(nVal),
                                this.cdnMgr && this.cdnMgr.setMuted(nVal),
                                this.huyaMgr && this.huyaMgr.setMuted(nVal)
                            }
                        }, {
                            key: "getMuted",
                            value: function() {
                                return this.cdnMgr && this.cdnMgr.started ? this.cdnMgr.getMuted() : this.huyaMgr && this.huyaMgr.started ? this.huyaMgr.getMuted() : this.flvMgr && this.flvMgr.started ? this.flvMgr.getMuted() : this.hlsMgr && this.hlsMgr.started ? this.hlsMgr.getMuted() : -1
                            }
                        }, {
                            key: "setLogLevel",
                            value: function(e) {
                                m.default.setLevel(e)
                            }
                        }, {
                            key: "getLog",
                            value: function() {
                                return m.default.getLog()
                            }
                        }, {
                            key: "getMetrics",
                            value: function() {
                                return y.default.getResult()
                            }
                        }, {
                            key: "setConfig",
                            value: function(e, t) {
                                this.flvMgr && this.flvMgr.setConfig(e, t),
                                this.cdnMgr && this.cdnMgr.setConfig(e, t),
                                this.huyaMgr && this.huyaMgr.setConfig(e, t),
                                this.flvMgr && this.cdnMgr && this.huyaMgr || (this.config[e] = t)
                            }
                        }, {
                            key: "setFlvConfig",
                            value: function(e, t) {
                                this.setConfig(e, t)
                            }
                        }, {
                            key: "setIDs",
                            value: function(e, t, i, a) {
                                l.default.sid = d.default.sid = h.default.sid = Number(t),
                                    l.default.subSid = d.default.subSid = h.default.subSid = Number(i),
                                    l.default.uid = d.default.uid = h.default.uid = Number(a),
                                    this._convertUid(e),
                                    m.default.log("H5Player.setIDs presenterUid=" + l.default.presenterUid + " sid=" + l.default.sid + " subSid=" + l.default.subSid + " uid=" + l.default.uid)
                            }
                        }, {
                            key: "setTafHandler",
                            value: function(e) {
                                c.default.setTafHandler(e),
                                    c.default.connected ? this._onTafConnected() : c.default.addListener(c.default.WEBSOCKET_CONNECTED, this._onTafConnected.bind(this))
                            }
                        }, {
                            key: "startHls",
                            value: function(e, t) {
                                y.default.setP2p(0),
                                    this.stop(),
                                this.hlsMgr || (this.hlsMgr = new I.default(this)),
                                    this.hlsMgr.startHls(e, t)
                            }
                        }, {
                            key: "stopHls",
                            value: function() {
                                this.hlsMgr && this.hlsMgr.stopHls()
                            }
                        }, {
                            key: "seek",
                            value: function(e) {
                                this.hlsMgr && this.hlsMgr.seek(e)
                            }
                        }, {
                            key: "startFlac",
                            value: function(e, t) {
                                var i = t + this.flacLibURL;
                                this.flacMgr ? this.flacMgr.changeVideoMgr(this.cdnMgr) : this.flacMgr = new C.default(this,this.playingMgr,i),
                                this.flacMgr && this.flacMgr.play(e)
                            }
                        }, {
                            key: "stopFlac",
                            value: function() {
                                this.flacMgr && this.flacMgr.stop()
                            }
                        }, {
                            key: "startFlv",
                            value: function(e) {
                                y.default.setP2p(0),
                                    this.stop(),
                                this.flvMgr || (this.flvMgr = new E.default(this),
                                    this._updateConfig(this.flvMgr)),
                                    this.flvMgr.setPlaybackrateAccess(this.videoPlaybackrateAccess),
                                    this.checkCooling(),
                                    this.flvMgr.startFlv(e),
                                    this._getLivingStreamInfo(l.default.sid, l.default.subSid),
                                    this.webUser.start()
                            }
                        }, {
                            key: "stopFlv",
                            value: function() {
                                this.flvMgr && this.flvMgr.stopFlv(),
                                    this.stopFlac()
                            }
                        }, {
                            key: "checkCooling",
                            value: function() {
                                if (this.p2pCooling = !1,
                                    localStorage.hasOwnProperty("p2p_cooling_time")) {
                                    var e = new Date
                                        , t = new Date(Number(localStorage.getItem("p2p_cooling_time")));
                                    this.p2pCooling = !(e.getFullYear() != t.getFullYear() || e.getMonth() != t.getMonth() || e.getDate() != t.getDate())
                                }
                            }
                        }, {
                            key: "startP2PFlv",
                            value: function(e, t) {
                                if (!this.isSupportP2P)
                                    throw new Error("xxxxxxx " + T.default.name + " " + T.default.version.major + " unsupport p2p !");
                                S.default.hasP2P = 100,
                                    y.default.setP2p(1),
                                    this.stop(),
                                this.cdnMgr || (this.cdnMgr = new k.default(this),
                                    this._updateConfig(this.cdnMgr)),
                                    this.cdnMgr.setPlaybackrateAccess(this.videoPlaybackrateAccess),
                                e && (this.checkCooling(),
                                    this.cdnMgr.startFlv(e, t),
                                    this._getLivingStreamInfo(l.default.sid, l.default.subSid)),
                                    this.webUser.start()
                            }
                        }, {
                            key: "switchBitrate",
                            value: function(e) {
                                if (!this.isSupportP2P)
                                    throw new Error("xxxxxxx " + T.default.name + " " + T.default.version.major + " unsupport p2p !");
                                return !!this.cdnMgr && this.cdnMgr.switchBitrate(e)
                            }
                        }, {
                            key: "startP2PUrl",
                            value: function(e) {
                                y.default.setP2p(1),
                                    this.stop(),
                                this.cdnMgr || (this.cdnMgr = new k.default(this),
                                    this._updateConfig(this.cdnMgr)),
                                    this.cdnMgr.startP2PUrl(e)
                            }
                        }, {
                            key: "stopP2PFlv",
                            value: function() {
                                this.cdnMgr && this.cdnMgr.stopFlv(),
                                    this.stopFlac()
                            }
                        }, {
                            key: "startHuya",
                            value: function() {
                                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 2e3;
                                this.stop(),
                                this.huyaMgr || (this.huyaMgr = new R.default(this),
                                    this._updateConfig(this.huyaMgr)),
                                    this.huyaMgr.startHuya(e),
                                    this._getLivingStreamInfo(l.default.sid, l.default.subSid)
                            }
                        }, {
                            key: "stopHuya",
                            value: function() {
                                this.huyaMgr && this.huyaMgr.stopHuya()
                            }
                        }, {
                            key: "stop",
                            value: function() {
                                this.stopHls(),
                                    this.stopFlv(),
                                    this.stopP2PFlv(),
                                    this.stopHuya()
                            }
                        }, {
                            key: "setExtendConfig",
                            value: function(e) {
                                e.p2pConfig && ((0,
                                    r.default)(l.default.extendConfig.p2pConfig, e.p2pConfig),
                                    delete e.p2pConfig),
                                e.sdk && e.sdk.p2pConfig && ((0,
                                    r.default)(l.default.extendConfig.p2pConfig, e.sdk.p2pConfig),
                                    delete e.sdk.p2pConfig),
                                    (0,
                                        r.default)(l.default.extendConfig, e, e.sdk),
                                    (0,
                                        r.default)(d.default.extendConfig, e, e.sdk),
                                    (0,
                                        r.default)(h.default.extendConfig, e, e.sdk),
                                    delete l.default.extendConfig.sdk,
                                    delete d.default.extendConfig.sdk,
                                    delete h.default.extendConfig.sdk,
                                    m.default.group("extendConfig");
                                var t = ["extendConfig:"];
                                for (var i in l.default.extendConfig) {
                                    var a = l.default.extendConfig[i];
                                    "object" == (void 0 === a ? "undefined" : (0,
                                        n.default)(a)) && (a = (0,
                                        s.default)(a)),
                                        i = g.default.padStrLen(i, 18, !1),
                                        t.push("\t" + i + " => " + a)
                                }
                                m.default.log(t.join("\n")),
                                    m.default.groupEnd()
                            }
                        }, {
                            key: "hasCDNMgr",
                            value: function() {
                                return !!this.cdnMgr
                            }
                        }, {
                            key: "flvTurnToP2p",
                            value: function() {
                                this.cdnMgr && (this.trigger(p.default.FLV_TO_P2P),
                                    this.cdnMgr.restart(L.default.restartReason.FLV_TO_P2P)),
                                this.flacMgr && this.cdnMgr && (this.stopFlac(),
                                    this.trigger(p.default.FLAC_AUDIO_NEED_RETRY))
                            }
                        }, {
                            key: "_getLivingStreamInfo",
                            value: function(e, t) {
                                if (Number(e) && Number(t))
                                    if (c.default.connected) {
                                        var i = new f.default.GetLivingStreamInfoReq;
                                        i.tId = c.default.getUserId(),
                                            i.lTopSid = Number(e),
                                            i.lSubSid = Number(t),
                                            c.default.sendWup("liveui", "getLivingStreamInfo", i)
                                    } else
                                        this.waitStreamInfo = !0
                            }
                        }, {
                            key: "_onTafConnected",
                            value: function() {
                                c.default.addListener("8102", this._livingStreamInfoNoticeBind),
                                    c.default.addListener("8103", this._livingStreamEndNoticeBind),
                                    c.default.addListener("getLivingStreamInfo", this._onGetLivingStreamInfoBind),
                                this.waitStreamInfo && (this.waitStreamInfo = !1,
                                    this._getLivingStreamInfo(l.default.sid, l.default.subSid))
                            }
                        }, {
                            key: "_convertUid",
                            value: function(e) {
                                l.default.presenterUid = d.default.presenterUid = h.default.presenterUid = Number(e),
                                    l.default.convertUid = d.default.convertUid = h.default.convertUid = g.default.rotUid(l.default.uid, e);
                                var t = 0;
                                t = 0 == l.default.uid ? Number((Date.now() % 1e10 * 1e3 + (1e3 * Math.random() | 0)) % 4294967295) : l.default.uid + Number(e),
                                    l.default.uuid = d.default.uuid = h.default.uuid = t,
                                    sessionStorage.cdn_uuid = t,
                                    sessionStorage.flv_uuid = t,
                                    sessionStorage.huya_uuid = t,
                                    m.default.log("hysdk uuid = " + t)
                            }
                        }, {
                            key: "_onGetLivingStreamInfo",
                            value: function(e) {
                                e && e.bIsLiving ? this._livingStreamInfoNotice(e.tNotice) : m.default.log("GetLivingStreamInfoReq xxxxxxx no living")
                            }
                        }, {
                            key: "_livingStreamInfoNotice",
                            value: function(e) {
                                (this.flvMgr && this.flvMgr.started || this.cdnMgr && this.cdnMgr.started || this.huyaMgr && this.huyaMgr.started) && (this._convertUid(e.lPresenterUid),
                                this.huyaMgr || (this.huyaMgr = new R.default(this),
                                    this._updateConfig(this.huyaMgr)),
                                    this.huyaMgr.startVoice(e))
                            }
                        }, {
                            key: "_livingStreamEndNotice",
                            value: function(e) {
                                this.huyaMgr && this.huyaMgr.stopVoice(e)
                            }
                        }, {
                            key: "isSupportP2P",
                            get: function() {
                                return this.isBrowserSupport() && !this.isP2PCooling()
                            }
                        }]),
                        e
                }();
                A.VERSION = 1810311321,
                    t.default = A,
                    window.H5Player = A
            }
            , function(e, t, i) {
                var a = i(17)
                    , s = a.JSON || (a.JSON = {
                    stringify: JSON.stringify
                });
                e.exports = function(e) {
                    return s.stringify.apply(s, arguments)
                }
            }
            , function(e, t, i) {
                e.exports = {
                    default: i(213),
                    __esModule: !0
                }
            }
            , function(e, t, i) {
                i(36),
                    i(45),
                    e.exports = i(85).f("iterator")
            }
            , function(e, t, i) {
                var a = i(75)
                    , s = i(76);
                e.exports = function(e) {
                    return function(t, i) {
                        var n, r, u = String(s(t)), o = a(i), l = u.length;
                        return o < 0 || o >= l ? e ? "" : void 0 : (n = u.charCodeAt(o)) < 55296 || n > 56319 || o + 1 === l || (r = u.charCodeAt(o + 1)) < 56320 || r > 57343 ? e ? u.charAt(o) : n : e ? u.slice(o, o + 2) : r - 56320 + (n - 55296 << 10) + 65536
                    }
                }
            }
            , function(e, t, i) {
                var a = i(79)
                    , s = i(44)
                    , n = i(58)
                    , r = {};
                i(29)(r, i(19)("iterator"), function() {
                    return this
                }),
                    e.exports = function(e, t, i) {
                        e.prototype = a(r, {
                            next: s(1, i)
                        }),
                            n(e, t + " Iterator")
                    }
            }
            , function(e, t, i) {
                var a = i(22)
                    , s = i(31)
                    , n = i(55);
                e.exports = i(26) ? Object.defineProperties : function(e, t) {
                    s(e);
                    for (var i, r = n(t), u = r.length, o = 0; u > o; )
                        a.f(e, i = r[o++], t[i]);
                    return e
                }
            }
            , function(e, t, i) {
                var a = i(40)
                    , s = i(56)
                    , n = i(218);
                e.exports = function(e) {
                    return function(t, i, r) {
                        var u, o = a(t), l = s(o.length), d = n(r, l);
                        if (e && i != i) {
                            for (; l > d; )
                                if ((u = o[d++]) != u)
                                    return !0
                        } else
                            for (; l > d; d++)
                                if ((e || d in o) && o[d] === i)
                                    return e || d || 0;
                        return !e && -1
                    }
                }
            }
            , function(e, t, i) {
                var a = i(75)
                    , s = Math.max
                    , n = Math.min;
                e.exports = function(e, t) {
                    return (e = a(e)) < 0 ? s(e + t, 0) : n(e, t)
                }
            }
            , function(e, t, i) {
                var a = i(25).document;
                e.exports = a && a.documentElement
            }
            , function(e, t, i) {
                var a = i(32)
                    , s = i(59)
                    , n = i(82)("IE_PROTO")
                    , r = Object.prototype;
                e.exports = Object.getPrototypeOf || function(e) {
                    return e = s(e),
                        a(e, n) ? e[n] : "function" == typeof e.constructor && e instanceof e.constructor ? e.constructor.prototype : e instanceof Object ? r : null
                }
            }
            , function(e, t, i) {
                var a = i(222)
                    , s = i(153)
                    , n = i(39)
                    , r = i(40);
                e.exports = i(77)(Array, "Array", function(e, t) {
                    this._t = r(e),
                        this._i = 0,
                        this._k = t
                }, function() {
                    var e = this._t
                        , t = this._k
                        , i = this._i++;
                    return !e || i >= e.length ? (this._t = void 0,
                        s(1)) : s(0, "keys" == t ? i : "values" == t ? e[i] : [i, e[i]])
                }, "values"),
                    n.Arguments = n.Array,
                    a("keys"),
                    a("values"),
                    a("entries")
            }
            , function(e, t) {
                e.exports = function() {}
            }
            , function(e, t, i) {
                e.exports = {
                    default: i(224),
                    __esModule: !0
                }
            }
            , function(e, t, i) {
                i(225),
                    i(89),
                    i(229),
                    i(230),
                    e.exports = i(17).Symbol
            }
            , function(e, t, i) {
                var s = i(25)
                    , n = i(32)
                    , r = i(26)
                    , u = i(24)
                    , o = i(151)
                    , l = i(86).KEY
                    , d = i(38)
                    , h = i(83)
                    , f = i(58)
                    , c = i(57)
                    , p = i(19)
                    , v = i(85)
                    , m = i(87)
                    , y = i(226)
                    , _ = i(154)
                    , S = i(31)
                    , g = i(30)
                    , T = i(40)
                    , P = i(78)
                    , I = i(44)
                    , E = i(79)
                    , k = i(227)
                    , R = i(228)
                    , C = i(22)
                    , L = i(55)
                    , A = R.f
                    , M = C.f
                    , U = k.f
                    , b = s.Symbol
                    , N = s.JSON
                    , w = N && N.stringify
                    , D = p("_hidden")
                    , O = p("toPrimitive")
                    , F = {}.propertyIsEnumerable
                    , x = h("symbol-registry")
                    , V = h("symbols")
                    , B = h("op-symbols")
                    , q = Object.prototype
                    , G = "function" == typeof b
                    , H = s.QObject
                    , j = !H || !H.prototype || !H.prototype.findChild
                    , W = r && d(function() {
                    return 7 != E(M({}, "a", {
                        get: function() {
                            return M(this, "a", {
                                value: 7
                            }).a
                        }
                    })).a
                }) ? function(e, t, i) {
                        var a = A(q, t);
                        a && delete q[t],
                            M(e, t, i),
                        a && e !== q && M(q, t, a)
                    }
                    : M
                    , K = function(e) {
                    var t = V[e] = E(b.prototype);
                    return t._k = e,
                        t
                }
                    , Y = G && "symbol" == a(b.iterator) ? function(e) {
                        return "symbol" == (void 0 === e ? "undefined" : a(e))
                    }
                    : function(e) {
                        return e instanceof b
                    }
                    , z = function e(t, i, a) {
                    return t === q && e(B, i, a),
                        S(t),
                        i = P(i, !0),
                        S(a),
                        n(V, i) ? (a.enumerable ? (n(t, D) && t[D][i] && (t[D][i] = !1),
                            a = E(a, {
                                enumerable: I(0, !1)
                            })) : (n(t, D) || M(t, D, I(1, {})),
                            t[D][i] = !0),
                            W(t, i, a)) : M(t, i, a)
                }
                    , J = function(e, t) {
                    S(e);
                    for (var i, a = y(t = T(t)), s = 0, n = a.length; n > s; )
                        z(e, i = a[s++], t[i]);
                    return e
                }
                    , X = function(e) {
                    var t = F.call(this, e = P(e, !0));
                    return !(this === q && n(V, e) && !n(B, e)) && (!(t || !n(this, e) || !n(V, e) || n(this, D) && this[D][e]) || t)
                }
                    , Q = function(e, t) {
                    if (e = T(e),
                        t = P(t, !0),
                    e !== q || !n(V, t) || n(B, t)) {
                        var i = A(e, t);
                        return !i || !n(V, t) || n(e, D) && e[D][t] || (i.enumerable = !0),
                            i
                    }
                }
                    , Z = function(e) {
                    for (var t, i = U(T(e)), a = [], s = 0; i.length > s; )
                        n(V, t = i[s++]) || t == D || t == l || a.push(t);
                    return a
                }
                    , $ = function(e) {
                    for (var t, i = e === q, a = U(i ? B : T(e)), s = [], r = 0; a.length > r; )
                        !n(V, t = a[r++]) || i && !n(q, t) || s.push(V[t]);
                    return s
                };
                G || (o((b = function() {
                            if (this instanceof b)
                                throw TypeError("Symbol is not a constructor!");
                            var e = c(arguments.length > 0 ? arguments[0] : void 0)
                                , t = function t(i) {
                                this === q && t.call(B, i),
                                n(this, D) && n(this[D], e) && (this[D][e] = !1),
                                    W(this, e, I(1, i))
                            };
                            return r && j && W(q, e, {
                                configurable: !0,
                                set: t
                            }),
                                K(e)
                        }
                    ).prototype, "toString", function() {
                        return this._k
                    }),
                        R.f = Q,
                        C.f = z,
                        i(155).f = k.f = Z,
                        i(60).f = X,
                        i(88).f = $,
                    r && !i(54) && o(q, "propertyIsEnumerable", X, !0),
                        v.f = function(e) {
                            return K(p(e))
                        }
                ),
                    u(u.G + u.W + u.F * !G, {
                        Symbol: b
                    });
                for (var ee = "hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","), te = 0; ee.length > te; )
                    p(ee[te++]);
                for (var ie = L(p.store), ae = 0; ie.length > ae; )
                    m(ie[ae++]);
                u(u.S + u.F * !G, "Symbol", {
                    for: function(e) {
                        return n(x, e += "") ? x[e] : x[e] = b(e)
                    },
                    keyFor: function(e) {
                        if (!Y(e))
                            throw TypeError(e + " is not a symbol!");
                        for (var t in x)
                            if (x[t] === e)
                                return t
                    },
                    useSetter: function() {
                        j = !0
                    },
                    useSimple: function() {
                        j = !1
                    }
                }),
                    u(u.S + u.F * !G, "Object", {
                        create: function(e, t) {
                            return void 0 === t ? E(e) : J(E(e), t)
                        },
                        defineProperty: z,
                        defineProperties: J,
                        getOwnPropertyDescriptor: Q,
                        getOwnPropertyNames: Z,
                        getOwnPropertySymbols: $
                    }),
                N && u(u.S + u.F * (!G || d(function() {
                    var e = b();
                    return "[null]" != w([e]) || "{}" != w({
                        a: e
                    }) || "{}" != w(Object(e))
                })), "JSON", {
                    stringify: function(e) {
                        for (var t, i, a = [e], s = 1; arguments.length > s; )
                            a.push(arguments[s++]);
                        if (i = t = a[1],
                        (g(t) || void 0 !== e) && !Y(e))
                            return _(t) || (t = function(e, t) {
                                    if ("function" == typeof i && (t = i.call(this, e, t)),
                                        !Y(t))
                                        return t
                                }
                            ),
                                a[1] = t,
                                w.apply(N, a)
                    }
                }),
                b.prototype[O] || i(29)(b.prototype, O, b.prototype.valueOf),
                    f(b, "Symbol"),
                    f(Math, "Math", !0),
                    f(s.JSON, "JSON", !0)
            }
            , function(e, t, i) {
                var a = i(55)
                    , s = i(88)
                    , n = i(60);
                e.exports = function(e) {
                    var t = a(e)
                        , i = s.f;
                    if (i)
                        for (var r, u = i(e), o = n.f, l = 0; u.length > l; )
                            o.call(e, r = u[l++]) && t.push(r);
                    return t
                }
            }
            , function(e, t, i) {
                var s = i(40)
                    , n = i(155).f
                    , r = {}.toString
                    , u = "object" == ("undefined" == typeof window ? "undefined" : a(window)) && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
                e.exports.f = function(e) {
                    return u && "[object Window]" == r.call(e) ? function(e) {
                        try {
                            return n(e)
                        } catch (e) {
                            return u.slice()
                        }
                    }(e) : n(s(e))
                }
            }
            , function(e, t, i) {
                var a = i(60)
                    , s = i(44)
                    , n = i(40)
                    , r = i(78)
                    , u = i(32)
                    , o = i(149)
                    , l = Object.getOwnPropertyDescriptor;
                t.f = i(26) ? l : function(e, t) {
                    if (e = n(e),
                        t = r(t, !0),
                        o)
                        try {
                            return l(e, t)
                        } catch (e) {}
                    if (u(e, t))
                        return s(!a.f.call(e, t), e[t])
                }
            }
            , function(e, t, i) {
                i(87)("asyncIterator")
            }
            , function(e, t, i) {
                i(87)("observable")
            }
            , function(e, t, i) {
                i(232),
                    e.exports = i(17).Object.assign
            }
            , function(e, t, i) {
                var a = i(24);
                a(a.S + a.F, "Object", {
                    assign: i(233)
                })
            }
            , function(e, t, i) {
                var a = i(55)
                    , s = i(88)
                    , n = i(60)
                    , r = i(59)
                    , u = i(80)
                    , o = Object.assign;
                e.exports = !o || i(38)(function() {
                    var e = {}
                        , t = {}
                        , i = Symbol()
                        , a = "abcdefghijklmnopqrst";
                    return e[i] = 7,
                        a.split("").forEach(function(e) {
                            t[e] = e
                        }),
                    7 != o({}, e)[i] || Object.keys(o({}, t)).join("") != a
                }) ? function(e, t) {
                        for (var i = r(e), o = arguments.length, l = 1, d = s.f, h = n.f; o > l; )
                            for (var f, c = u(arguments[l++]), p = d ? a(c).concat(d(c)) : a(c), v = p.length, m = 0; v > m; )
                                h.call(c, f = p[m++]) && (i[f] = c[f]);
                        return i
                    }
                    : o
            }
            , function(e, t, i) {
                e.exports = {
                    default: i(235),
                    __esModule: !0
                }
            }
            , function(e, t, i) {
                i(236);
                var a = i(17).Object;
                e.exports = function(e, t, i) {
                    return a.defineProperty(e, t, i)
                }
            }
            , function(e, t, i) {
                var a = i(24);
                a(a.S + a.F * !i(26), "Object", {
                    defineProperty: i(22).f
                })
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(6))
                    , n = a(i(0))
                    , r = a(i(1))
                    , u = a(i(93))
                    , o = function() {
                    function e() {
                        (0,
                            n.default)(this, e),
                            this.configs = new s.default,
                            this.initDefaultConfig()
                    }
                    return (0,
                        r.default)(e, [{
                        key: "initDefaultConfig",
                        value: function() {
                            var e = this.configs;
                            e.set(u.default.VIDEO_JIT_BUFLEN, 4e3),
                                e.set(u.default.VIDEO_JIT_MAX_BUFLEN, 8e3),
                                e.set(u.default.VIDEO_JIT_MIN_BUFLEN, 1e3),
                                e.set(u.default.PUSH_GOP, !1)
                        }
                    }, {
                        key: "setConfig",
                        value: function(e, t) {
                            this.configs.set(e, t)
                        }
                    }, {
                        key: "getConfig",
                        value: function(e) {
                            return this.configs.get(e)
                        }
                    }]),
                        e
                }();
                t.default = o
            }
            , function(e, t, i) {
                i(89),
                    i(36),
                    i(45),
                    i(239),
                    i(244),
                    i(246),
                    i(247),
                    e.exports = i(17).Map
            }
            , function(e, t, i) {
                var a = i(156)
                    , s = i(92);
                e.exports = i(161)("Map", function(e) {
                    return function() {
                        return e(this, arguments.length > 0 ? arguments[0] : void 0)
                    }
                }, {
                    get: function(e) {
                        var t = a.getEntry(s(this, "Map"), e);
                        return t && t.v
                    },
                    set: function(e, t) {
                        return a.def(s(this, "Map"), 0 === e ? 0 : e, t)
                    }
                }, a, !0)
            }
            , function(e, t, i) {
                var a = i(25)
                    , s = i(17)
                    , n = i(22)
                    , r = i(26)
                    , u = i(19)("species");
                e.exports = function(e) {
                    var t = "function" == typeof s[e] ? s[e] : a[e];
                    r && t && !t[u] && n.f(t, u, {
                        configurable: !0,
                        get: function() {
                            return this
                        }
                    })
                }
            }
            , function(e, t, i) {
                var a = i(37)
                    , s = i(80)
                    , n = i(59)
                    , r = i(56)
                    , u = i(242);
                e.exports = function(e, t) {
                    var i = 1 == e
                        , o = 2 == e
                        , l = 3 == e
                        , d = 4 == e
                        , h = 6 == e
                        , f = 5 == e || h
                        , c = t || u;
                    return function(t, u, p) {
                        for (var v, m, y = n(t), _ = s(y), S = a(u, p, 3), g = r(_.length), T = 0, P = i ? c(t, g) : o ? c(t, 0) : void 0; g > T; T++)
                            if ((f || T in _) && (m = S(v = _[T], T, y),
                                e))
                                if (i)
                                    P[T] = m;
                                else if (m)
                                    switch (e) {
                                        case 3:
                                            return !0;
                                        case 5:
                                            return v;
                                        case 6:
                                            return T;
                                        case 2:
                                            P.push(v)
                                    }
                                else if (d)
                                    return !1;
                        return h ? -1 : l || d ? d : P
                    }
                }
            }
            , function(e, t, i) {
                var a = i(243);
                e.exports = function(e, t) {
                    return new (a(e))(t)
                }
            }
            , function(e, t, i) {
                var a = i(30)
                    , s = i(154)
                    , n = i(19)("species");
                e.exports = function(e) {
                    var t;
                    return s(e) && ("function" != typeof (t = e.constructor) || t !== Array && !s(t.prototype) || (t = void 0),
                    a(t) && null === (t = t[n]) && (t = void 0)),
                        void 0 === t ? Array : t
                }
            }
            , function(e, t, i) {
                var a = i(24);
                a(a.P + a.R, "Map", {
                    toJSON: i(162)("Map")
                })
            }
            , function(e, t, i) {
                var a = i(62);
                e.exports = function(e, t) {
                    var i = [];
                    return a(e, !1, i.push, i, t),
                        i
                }
            }
            , function(e, t, i) {
                i(163)("Map")
            }
            , function(e, t, i) {
                i(164)("Map")
            }
            , function(e, t, i) {
                i(45),
                    i(36),
                    e.exports = i(249)
            }
            , function(e, t, i) {
                var a = i(31)
                    , s = i(90);
                e.exports = i(17).getIterator = function(e) {
                    var t = s(e);
                    if ("function" != typeof t)
                        throw TypeError(e + " is not iterable!");
                    return a(t.call(e))
                }
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(6))
                    , n = a(i(0))
                    , r = a(i(1))
                    , u = a(i(41))
                    , o = a(i(251))
                    , l = function() {
                    function e() {
                        (0,
                            n.default)(this, e),
                            this.configs = new s.default,
                            this.initDefaultConfig()
                    }
                    return (0,
                        r.default)(e, [{
                        key: "initDefaultConfig",
                        value: function() {
                            var e = this.configs;
                            e.set(u.default.VIDEO_ACCESS_MODE, o.default.VIDEO_ACCESS_PULL),
                                e.set(u.default.VIDEO_JIT_BUFLEN, 2e3),
                                e.set(u.default.VIDEO_JIT_MAX_BUFLEN, 4e3),
                                e.set(u.default.VIDEO_P2P_MODE, o.default.VIDEO_P2P_ENABLE),
                                e.set(u.default.AUDIO_ACCESS_MODE, o.default.AUDIO_ACCESS_PUSH),
                                e.set(u.default.AUDIO_JIT_BUFLEN, 1e3),
                                e.set(u.default.AUDIO_PUSH_LEN, 4e3),
                                e.set(u.default.JIT_DOWN_MODE, o.default.JIT_DOWN_ENABLE),
                                e.set(u.default.JIT_UP_MODE, o.default.JIT_UP_ENABLE),
                                e.set(u.default.JIT_ADJUST_MODE, o.default.JIT_ADJUST_LOW_DELAY_MODE),
                                e.set(u.default.PUSH_GOP, !1),
                                e.set(u.default.P2P_MAX_SUB_NUM, 15)
                        }
                    }, {
                        key: "setConfig",
                        value: function(e, t) {
                            this.configs.set(e, t)
                        }
                    }, {
                        key: "getConfig",
                        value: function(e) {
                            return this.configs.get(e)
                        }
                    }]),
                        e
                }();
                t.default = l
            }
            , function(e, t, i) {
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }),
                    t.default = {
                        VIDEO_ACCESS_NORMAL: 0,
                        VIDEO_ACCESS_PULL: 2,
                        AUDIO_ACCESS_NORMAL: 0,
                        AUDIO_ACCESS_PUSH: 1,
                        VIDEO_P2P_DISABLE: !1,
                        VIDEO_P2P_ENABLE: !0,
                        JIT_DOWN_DISABLE: !1,
                        JIT_DOWN_ENABLE: !0,
                        JIT_UP_DISABLE: !1,
                        JIT_UP_ENABLE: !0,
                        JIT_ADJUST_NORMAL_MODE: 0,
                        JIT_ADJUST_LOW_DELAY_MODE: 1
                    }
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(253))
                    , u = a(i(15))
                    , o = a(i(3))
                    , l = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.burstChangeChecker = new r.default,
                            this.averageCalculator = new u.default(60),
                            this.smoothRtt = 0,
                            this.smoothRttVar = 0,
                            this.devRttVar = 60,
                            this.downlinkRTO = 150
                    }
                    return (0,
                        n.default)(e, [{
                        key: "OnRecvRtt",
                        value: function(e) {
                            this.averageCalculator.add(e),
                                this.calculateSmoothRtt(e),
                                this.calculateRttVariance(),
                                this.calculateDownlinkRTO()
                        }
                    }, {
                        key: "GetSmoothRtt",
                        value: function() {
                            return this.smoothRtt
                        }
                    }, {
                        key: "GetDownlinkRTO",
                        value: function() {
                            return Math.round(this.downlinkRTO)
                        }
                    }, {
                        key: "CheckInvalidDownlinkRtt",
                        value: function(e, t) {
                            var i = this.averageCalculator.max();
                            if (0 === i || !this.isTooBiggerUint32(i, e))
                                return this.OnRecvRtt(e),
                                    !0;
                            if (this.burstChangeChecker.AddInvalid(e, t),
                                !this.burstChangeChecker.CheckInvalid()) {
                                var a = this.burstChangeChecker.GetInvalidSize();
                                return o.default.warn("DownlinkRTOCalculator.CheckInvalidDownlinkRtt invalid down link rtt max=" + i + " rtt=" + e + " invalidSize=" + a),
                                    !1
                            }
                            var s = this.burstChangeChecker.GetInvalidValues();
                            if (null != s)
                                for (var n = 0; n < s.length; n++)
                                    this.OnRecvRtt(s[n]);
                            return this.burstChangeChecker.Reset(),
                                !0
                        }
                    }, {
                        key: "calculateSmoothRtt",
                        value: function(e) {
                            if (0 === this.smoothRtt)
                                this.smoothRtt = e,
                                    this.smoothRttVar = e >> 1;
                            else {
                                var t = e > this.smoothRtt ? e - this.smoothRtt : this.smoothRtt - e;
                                this.smoothRtt = this.getSmoothValue(this.smoothRtt, e),
                                    this.smoothRttVar = this.getSmoothValue(this.smoothRttVar, t)
                            }
                        }
                    }, {
                        key: "calculateRttVariance",
                        value: function() {
                            this.devRttVar = 1 * this.smoothRttVar,
                                this.devRttVar < this.smoothRttVar + 60 ? this.devRttVar = this.smoothRttVar + 60 : this.devRttVar > this.smoothRttVar + 600 && (this.devRttVar = this.smoothRttVar + 600)
                        }
                    }, {
                        key: "calculateDownlinkRTO",
                        value: function() {
                            0 === this.smoothRtt ? this.downlinkRTO = 150 : this.downlinkRTO = this.smoothRtt + this.devRttVar
                        }
                    }, {
                        key: "isTooBiggerUint32",
                        value: function(e, t) {
                            return 0 !== e && (e > 50 && 5 * e < t || e + 500 < t)
                        }
                    }, {
                        key: "getSmoothValue",
                        value: function(e, t) {
                            return t > e ? 3 * e + t >> 2 : 7 * e + t >> 3
                        }
                    }]),
                        e
                }();
                t.default = l
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.stampc = 0,
                            this.invalidRtts = []
                    }
                    return (0,
                        n.default)(e, [{
                        key: "Reset",
                        value: function() {
                            this.stampc = 0,
                                this.invalidRtts = []
                        }
                    }, {
                        key: "AddInvalid",
                        value: function(e, t) {
                            0 === t && (t = 1),
                            0 === this.stampc && (this.stampc = t),
                                t - this.stampc > 5e3 ? this.Reset() : (this.invalidRtts.push(e),
                                this.invalidRtts.length > 100 && this.invalidRtts.pop())
                        }
                    }, {
                        key: "CheckInvalid",
                        value: function() {
                            return 0 !== this.stampc && this.invalidRtts.length > 10
                        }
                    }, {
                        key: "GetInvalidValues",
                        value: function() {
                            var e = this.invalidRtts;
                            return this.invalidRtts = [],
                                e
                        }
                    }, {
                        key: "GetInvalidSize",
                        value: function() {
                            return this.invalidRtts.length
                        }
                    }]),
                        e
                }();
                t.default = r
            }
            , function(e, t, i) {
                e.exports = {
                    default: i(255),
                    __esModule: !0
                }
            }
            , function(e, t, i) {
                i(36),
                    i(256),
                    e.exports = i(17).Array.from
            }
            , function(e, t, i) {
                var a = i(37)
                    , s = i(24)
                    , n = i(59)
                    , r = i(159)
                    , u = i(160)
                    , o = i(56)
                    , l = i(257)
                    , d = i(90);
                s(s.S + s.F * !i(258)(function(e) {
                    Array.from(e)
                }), "Array", {
                    from: function(e) {
                        var t, i, s, h, f = n(e), c = "function" == typeof this ? this : Array, p = arguments.length, v = p > 1 ? arguments[1] : void 0, m = void 0 !== v, y = 0, _ = d(f);
                        if (m && (v = a(v, p > 2 ? arguments[2] : void 0, 2)),
                        void 0 == _ || c == Array && u(_))
                            for (i = new c(t = o(f.length)); t > y; y++)
                                l(i, y, m ? v(f[y], y) : f[y]);
                        else
                            for (h = _.call(f),
                                     i = new c; !(s = h.next()).done; y++)
                                l(i, y, m ? r(h, v, [s.value, y], !0) : s.value);
                        return i.length = y,
                            i
                    }
                })
            }
            , function(e, t, i) {
                var a = i(22)
                    , s = i(44);
                e.exports = function(e, t, i) {
                    t in e ? a.f(e, t, s(0, i)) : e[t] = i
                }
            }
            , function(e, t, i) {
                var a = i(19)("iterator")
                    , s = !1;
                try {
                    var n = [7][a]();
                    n.return = function() {
                        s = !0
                    }
                        ,
                        Array.from(n, function() {
                            throw 2
                        })
                } catch (e) {}
                e.exports = function(e, t) {
                    if (!t && !s)
                        return !1;
                    var i = !1;
                    try {
                        var n = [7]
                            , r = n[a]();
                        r.next = function() {
                            return {
                                done: i = !0
                            }
                        }
                            ,
                            n[a] = function() {
                                return r
                            }
                            ,
                            e(n)
                    } catch (e) {}
                    return i
                }
            }
            , function(e, t) {
                function i() {
                    this._events = this._events || {},
                        this._maxListeners = this._maxListeners || void 0
                }
                function s(e) {
                    return "function" == typeof e
                }
                function n(e) {
                    return "object" == (void 0 === e ? "undefined" : a(e)) && null !== e
                }
                function r(e) {
                    return void 0 === e
                }
                e.exports = i,
                    i.EventEmitter = i,
                    i.prototype._events = void 0,
                    i.prototype._maxListeners = void 0,
                    i.defaultMaxListeners = 10,
                    i.prototype.setMaxListeners = function(e) {
                        if (!function(e) {
                            return "number" == typeof e
                        }(e) || e < 0 || isNaN(e))
                            throw TypeError("n must be a positive number");
                        return this._maxListeners = e,
                            this
                    }
                    ,
                    i.prototype.emit = function(e) {
                        var t, i, a, u, o, l;
                        if (this._events || (this._events = {}),
                        "error" === e && (!this._events.error || n(this._events.error) && !this._events.error.length)) {
                            if ((t = arguments[1])instanceof Error)
                                throw t;
                            var d = new Error('Uncaught, unspecified "error" event. (' + t + ")");
                            throw d.context = t,
                                d
                        }
                        if (r(i = this._events[e]))
                            return !1;
                        if (s(i))
                            switch (arguments.length) {
                                case 1:
                                    i.call(this);
                                    break;
                                case 2:
                                    i.call(this, arguments[1]);
                                    break;
                                case 3:
                                    i.call(this, arguments[1], arguments[2]);
                                    break;
                                default:
                                    u = Array.prototype.slice.call(arguments, 1),
                                        i.apply(this, u)
                            }
                        else if (n(i))
                            for (u = Array.prototype.slice.call(arguments, 1),
                                     a = (l = i.slice()).length,
                                     o = 0; o < a; o++)
                                l[o].apply(this, u);
                        return !0
                    }
                    ,
                    i.prototype.addListener = function(e, t) {
                        var a;
                        if (!s(t))
                            throw TypeError("listener must be a function");
                        return this._events || (this._events = {}),
                        this._events.newListener && this.emit("newListener", e, s(t.listener) ? t.listener : t),
                            this._events[e] ? n(this._events[e]) ? this._events[e].push(t) : this._events[e] = [this._events[e], t] : this._events[e] = t,
                        n(this._events[e]) && !this._events[e].warned && (a = r(this._maxListeners) ? i.defaultMaxListeners : this._maxListeners) && a > 0 && this._events[e].length > a && (this._events[e].warned = !0,
                            console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.", this._events[e].length),
                        "function" == typeof console.trace && console.trace()),
                            this
                    }
                    ,
                    i.prototype.on = i.prototype.addListener,
                    i.prototype.once = function(e, t) {
                        function i() {
                            this.removeListener(e, i),
                            a || (a = !0,
                                t.apply(this, arguments))
                        }
                        if (!s(t))
                            throw TypeError("listener must be a function");
                        var a = !1;
                        return i.listener = t,
                            this.on(e, i),
                            this
                    }
                    ,
                    i.prototype.removeListener = function(e, t) {
                        var i, a, r, u;
                        if (!s(t))
                            throw TypeError("listener must be a function");
                        if (!this._events || !this._events[e])
                            return this;
                        if (r = (i = this._events[e]).length,
                            a = -1,
                        i === t || s(i.listener) && i.listener === t)
                            delete this._events[e],
                            this._events.removeListener && this.emit("removeListener", e, t);
                        else if (n(i)) {
                            for (u = r; u-- > 0; )
                                if (i[u] === t || i[u].listener && i[u].listener === t) {
                                    a = u;
                                    break
                                }
                            if (a < 0)
                                return this;
                            1 === i.length ? (i.length = 0,
                                delete this._events[e]) : i.splice(a, 1),
                            this._events.removeListener && this.emit("removeListener", e, t)
                        }
                        return this
                    }
                    ,
                    i.prototype.removeAllListeners = function(e) {
                        var t, i;
                        if (!this._events)
                            return this;
                        if (!this._events.removeListener)
                            return 0 === arguments.length ? this._events = {} : this._events[e] && delete this._events[e],
                                this;
                        if (0 === arguments.length) {
                            for (t in this._events)
                                "removeListener" !== t && this.removeAllListeners(t);
                            return this.removeAllListeners("removeListener"),
                                this._events = {},
                                this
                        }
                        if (s(i = this._events[e]))
                            this.removeListener(e, i);
                        else if (i)
                            for (; i.length; )
                                this.removeListener(e, i[i.length - 1]);
                        return delete this._events[e],
                            this
                    }
                    ,
                    i.prototype.listeners = function(e) {
                        return this._events && this._events[e] ? s(this._events[e]) ? [this._events[e]] : this._events[e].slice() : []
                    }
                    ,
                    i.prototype.listenerCount = function(e) {
                        if (this._events) {
                            var t = this._events[e];
                            if (s(t))
                                return 1;
                            if (t)
                                return t.length
                        }
                        return 0
                    }
                    ,
                    i.listenerCount = function(e, t) {
                        return e.listenerCount(t)
                    }
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(11))
                    , u = a(i(5))
                    , o = a(i(18))
                    , l = a(i(20))
                    , d = function() {
                    function e(t) {
                        (0,
                            s.default)(this, e),
                            this.h5Player = t,
                            this.hasVideo = !1,
                            this.first = !0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "start",
                        value: function() {
                            this.first && (this.first = !1,
                                this.h5Player.on(l.default.VIDEO_PLAY, this.onVideoPlay.bind(this)),
                                $(window).on("unload", this.onUnload.bind(this)),
                                r.default.once(this.onTimer, this, 1e4))
                        }
                    }, {
                        key: "onVideoPlay",
                        value: function() {
                            this.hasVideo = !0
                        }
                    }, {
                        key: "onVideoStop",
                        value: function() {}
                    }, {
                        key: "onUnload",
                        value: function() {
                            var e = u.default.now();
                            e < 1e4 && (e < 3e3 ? this.sendMetric(1) : this.sendMetric(2))
                        }
                    }, {
                        key: "onTimer",
                        value: function() {
                            this.sendMetric(0);
                            var e = new Image(1,1);
                            e.onload = e.onerror = function() {
                                e = null
                            }
                        }
                    }, {
                        key: "sendMetric",
                        value: function(e, t) {
                            o.default.sendMetrics([{
                                sMetricName: o.default.METRIC.WEB_USER,
                                vField: {
                                    value: t || 0
                                },
                                vDimension: {
                                    success: e,
                                    retcode: this.hasVideo ? 100 : 0
                                }
                            }])
                        }
                    }]),
                        e
                }();
                t.default = d
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = i(20)
                    , u = a(i(262))
                    , o = a(i(70))
                    , l = a(i(196))
                    , d = a(i(3))
                    , h = a(i(5))
                    , f = (a(i(144)),
                    a(i(11)))
                    , c = a(i(8))
                    , p = a(i(269))
                    , v = function() {
                    function e(t) {
                        (0,
                            s.default)(this, e),
                            this.config = {
                                autoStartLoad: !0,
                                maxBufferLength: 30,
                                bs2Delay: 3e3,
                                fragLoadingTimeOut: 5e3,
                                fragLoadingMaxRetry: 1,
                                fragLoadingRetryDelay: 1e3,
                                listLoadingTimeOut: 3e3,
                                listLoadingMaxRetry: 3,
                                listLoadingRetryDelay: 1e3,
                                appendErrorMaxRetry: 200,
                                minFragBufferNum: 3,
                                autoReconnect: !0
                            },
                            this.H5Player = t,
                            this.isLive = null,
                            this.url = null,
                            this.playlist = null,
                            this.player = null,
                            this.targetDuration = 0,
                            this.isProcessingFrag = !1,
                            this.startTs = 0,
                            this.pauseTs = 0,
                            this.playTs = 0,
                            this.started = !1,
                            this.isTryAgain = !1,
                            this.fragLoader = null,
                            this.tryTimer = null,
                            this.timeGap = 0,
                            this.loadStartTs = 0,
                            this.loadFragmentUrl = "",
                            this.hasVideo = !1,
                        void 0 !== p.default && (this.playStat = new p.default(this))
                    }
                    return (0,
                        n.default)(e, [{
                        key: "destroy",
                        value: function() {
                            f.default.remove(this.onCheckTimer, this),
                                f.default.remove(this.onCheckFastTimer, this),
                            this.tryTimer && (clearTimeout(this.tryTimer),
                                this.tryTimer = null),
                            this.player && (this.player.destroy(),
                                this.player = null),
                            this.playlist && (this.playlist.destroy(),
                                this.playlist = null),
                            this.fragLoader && (this.fragLoader.abort(),
                                this.fragLoader = null)
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            this.isLive = null,
                                this.url = null,
                                this.targetDuration = 0,
                                this.isProcessingFrag = !1,
                                this.startTs = 0,
                                this.pauseTs = 0,
                                this.playTs = 0,
                                this.hasVideo = !1,
                                this.started = !1,
                                this.isTryAgain = !1,
                                this.timeGap = 0,
                                this.loadStartTs = 0,
                                this.loadFragmentUrl = "",
                            this.playStat && this.playStat.stop()
                        }
                    }, {
                        key: "setConfig",
                        value: function(e, t) {}
                    }, {
                        key: "startHls",
                        value: function(e, t) {
                            this.stopHls(),
                                this.url = e,
                                this.isLive = t,
                                d.default.log("HlsMgr.startHls isLive=" + this.isLive + " url=" + e),
                                this.playlist = new u.default(this),
                                this.player = new o.default(this,"ts",t),
                                this.playlist.loadManifest(this.url),
                                this.seek(this.seekTime),
                                this.startTs = h.default.now(),
                                this.started = !0,
                            this.playStat && this.playStat.start()
                        }
                    }, {
                        key: "stopHls",
                        value: function() {
                            this.started && (this.destroy(),
                                this.reset())
                        }
                    }, {
                        key: "seek",
                        value: function(e) {
                            this.isLive || void 0 == e || (this.playlist ? (d.default.log("HlsMgr.seek " + e),
                                this.playlist.seek(e)) : this.seekTime = e)
                        }
                    }, {
                        key: "setVolume",
                        value: function(e) {
                            this.player && this.player.setVolume(e)
                        }
                    }, {
                        key: "setMuted",
                        value: function(e) {
                            this.player && this.player.setMuted(e)
                        }
                    }, {
                        key: "getMuted",
                        value: function() {
                            return this.player ? this.player.getMuted() : -1
                        }
                    }, {
                        key: "reconnectLive",
                        value: function() {
                            if (d.default.log("HlsMgr.reconnectLive"),
                                this.isLive) {
                                var e = this.url
                                    , t = this.isLive;
                                this.destroy(),
                                    this.reset(),
                                    this.startHls(e, t)
                            } else
                                this.onPlayerError()
                        }
                    }, {
                        key: "setTargetDuration",
                        value: function(e) {
                            this.targetDuration = e * this.config.minFragBufferNum
                        }
                    }, {
                        key: "loadFragment",
                        value: function() {
                            if (!this.isProcessingFrag) {
                                var e = this.targetDuration || this.config.maxBufferLength
                                    , t = this.player.getPlayVideo()
                                    , i = this.bufferedInfo(t.currentTime, t.buffered).len;
                                if (!(i >= e)) {
                                    var a = this.playlist.getNextFrag();
                                    if (a) {
                                        var s = this.config
                                            , n = s.bs2Delay + this.targetDuration / 3 * 1e3
                                            , r = a.url;
                                        this.isProcessingFrag = !0,
                                        this.fragLoader && (this.fragLoader.destroy(),
                                            this.fragLoader = null),
                                            this.loadStartTs = h.default.now(),
                                            this.loadFragmentUrl = r,
                                            this.fragLoader = new l.default(s),
                                            this.fragLoader.load(r, "arraybuffer", this.loadSuccess.bind(this), this.loadError.bind(this), this.loadTimeout.bind(this), n, s.fragLoadingMaxRetry, s.fragLoadingRetryDelay)
                                    } else if (i <= 0)
                                        if (f.default.remove(this.onCheckTimer, this),
                                            f.default.remove(this.onCheckFastTimer, this),
                                            d.default.log("HlsMgr.loadFragment ANCHOR_STOP bufferedLen=" + i),
                                            this.onAnchorStop(),
                                            this.isLive) {
                                            if (this.isTryAgain)
                                                return;
                                            this.isTryAgain = !0,
                                                this.tryTimer = setTimeout(function() {
                                                    d.default.info("HlsMgr.loadFragment ANCHOR_STOP try again"),
                                                        this.reconnectLive()
                                                }
                                                    .bind(this), 3e3)
                                        } else
                                            this.destroy(),
                                                this.reset()
                                }
                            }
                        }
                    }, {
                        key: "loadSuccess",
                        value: function(e, t) {
                            var i = e.currentTarget.response
                                , a = this.playlist.currLevel
                                , s = this.playlist.currFrag
                                , n = a.details.totalduration;
                            this.player.appendTs({
                                data: i,
                                audioCodec: a.audioCodec,
                                videoCodec: a.videoCodec,
                                timeOffset: s.start,
                                duration: n,
                                discontinuity: s.discontinuity,
                                level: s.level,
                                sn: s.sn
                            }),
                            f.default.has(this.onCheckTimer, this) || (f.default.add(this.onCheckTimer, this, 1e3),
                                f.default.add(this.onCheckFastTimer, this, 100));
                            var r = h.default.now() - this.loadStartTs
                                , u = this.loadFragmentUrl.split("/").pop()
                                , o = c.default.formatByteSize(i.byteLength);
                            d.default.log("HlsMgr fragment=" + u + " size=" + o + " loadTime=" + r)
                        }
                    }, {
                        key: "loadError",
                        value: function(e) {
                            d.default.warn("load fragment error:" + e.currentTarget.status),
                            this.config.autoReconnect && this.reconnectLive()
                        }
                    }, {
                        key: "loadTimeout",
                        value: function(e) {
                            d.default.warn("load fragment timeout", e),
                            this.config.autoReconnect && this.reconnectLive()
                        }
                    }, {
                        key: "bufferedInfo",
                        value: function(e, t) {
                            var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : .3
                                , a = []
                                , s = []
                                , n = void 0
                                , r = void 0
                                , u = void 0
                                , o = void 0
                                , l = void 0;
                            for (l = 0; l < t.length; l++)
                                a.push({
                                    start: t.start(l),
                                    end: t.end(l)
                                });
                            for (a.sort(function(e, t) {
                                return e.start - t.start || t.end - e.end
                            }),
                                     l = 0; l < a.length; l++) {
                                var d = s.length;
                                if (d) {
                                    var h = s[d - 1].end;
                                    a[l].start - h < i ? a[l].end > h && (s[d - 1].end = a[l].end) : s.push(a[l])
                                } else
                                    s.push(a[l])
                            }
                            for (l = 0,
                                     n = 0,
                                     r = u = e; l < s.length; l++) {
                                var f = s[l].start
                                    , c = s[l].end;
                                if (e + i >= f && e < c)
                                    r = f,
                                        n = (u = c) - e;
                                else if (e + i < f) {
                                    o = f;
                                    break
                                }
                            }
                            return {
                                len: n,
                                start: r,
                                end: u,
                                nextStart: o
                            }
                        }
                    }, {
                        key: "onCheckTimer",
                        value: function(e, t) {
                            if (this.started && (this.loadFragment(),
                                this.player.onCheckTimer(e, t),
                                this.playlist.onCheckTimer(t),
                            !this.isLive && this.playTs > 0)) {
                                var i = this.player.getPlayVideo()
                                    , a = this.player.getBufferLen()
                                    , s = this.player.getCurrentTime()
                                    , n = e - this.playTs - s;
                                if (Number(localStorage._printTimeGap) && d.default.debug("----------- timeGap", n),
                                0 == this.timeGap) {
                                    if (Math.abs(n) > 4e3) {
                                        this.timeGap = n;
                                        var r = n > 0 ? 1.1 : .9;
                                        i.playbackRate = r,
                                            d.default.log("HlsMgr.onCheckTimer playbackRate=" + r + " timeGap=" + n + " bufLen=" + a)
                                    }
                                } else
                                    Math.abs(n) < 1e3 && (d.default.log("HlsMgr.onCheckTimer playbackRate=1.0 timeGap=" + n + " bufLen=" + a),
                                        this.timeGap = 0,
                                        i.playbackRate = 1);
                                var u = e - this.pauseTs;
                                this.playStat && this.pauseTs > 0 && u > 200 && (this.playStat.isPaused = !0),
                                this.playStat && t % 20 == 0 && this.playStat.report(),
                                this.pauseTs > 0 && u > 8e3 && (d.default.warn("HlsMgr.onCheckTimer pauseTime=" + u),
                                    this.isLive ? this.reconnectLive() : (this.onPlayerError(),
                                        this.pauseTs = 0))
                            }
                        }
                    }, {
                        key: "onCheckFastTimer",
                        value: function(e, t) {
                            this.started && this.player.onCheckFastTimer(e, t)
                        }
                    }, {
                        key: "dataMetric",
                        value: function(e) {
                            this.H5Player.trigger(r.Event.DATA_METRIC, e)
                        }
                    }, {
                        key: "onPlayVideo",
                        value: function(e, t, i, a) {
                            var s = h.default.now();
                            this.playTs = s,
                                this.hasVideo = a,
                                e.volume = this.H5Player.getVolume(),
                            0 !== this.startTs && d.default.log("%cHLSMgr.onPlayVideo loadTime=" + (s - this.startTs) + " hasVideo=" + a, "color:#A23400;background:#FFF5C2"),
                            a && (this.H5Player.trigger(r.Event.VIDEO_PLAY, {
                                video: e,
                                width: t,
                                height: i,
                                hasVideo: a
                            }),
                                this.H5Player.trigger(r.Event.PLAY_STATUS, {
                                    status: r.Status.VIDEO_PLAYING
                                }))
                        }
                    }, {
                        key: "onVideoStop",
                        value: function(e, t) {
                            d.default.log("HLSMgr.onVideoStop hasVideo=" + t),
                                this.hasVideo = !1,
                            t && (this.H5Player.trigger(r.Event.PLAY_STATUS, {
                                status: r.Status.VIDEO_STOP
                            }),
                                this.H5Player.trigger(r.Event.VIDEO_STOP, {
                                    video: e
                                }))
                        }
                    }, {
                        key: "onAnchorStop",
                        value: function() {
                            var e = this.player ? this.player.getPlayVideo() : null;
                            this.H5Player.trigger(r.Event.ANCHOR_STOP, {
                                video: e
                            })
                        }
                    }, {
                        key: "onPlayerError",
                        value: function(e) {
                            var t = this.player ? this.player.getPlayVideo() : null;
                            this.H5Player.trigger(r.Event.H5_PLAYER_ERROR, {
                                video: t
                            })
                        }
                    }, {
                        key: "onPlayPause",
                        value: function(e, t) {
                            t && (this.pauseTs = e,
                                this.H5Player.trigger(r.Event.PLAY_STATUS, {
                                    status: r.Status.VIDEO_CACHING
                                }))
                        }
                    }, {
                        key: "onPlayResume",
                        value: function(e, t) {
                            this.pauseTs = 0,
                                this.H5Player.trigger(r.Event.PLAY_STATUS, {
                                    status: r.Status.VIDEO_PLAYING
                                })
                        }
                    }, {
                        key: "onSBUpdateEnd",
                        value: function() {
                            this.isProcessingFrag = !1
                        }
                    }]),
                        e
                }();
                t.default = v
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(196))
                    , u = a(i(3))
                    , o = (a(i(144)),
                    a(i(263)))
                    , l = function() {
                    function e(t) {
                        (0,
                            s.default)(this, e),
                            this.hls = t,
                            this.isLive = t.isLive,
                            this.config = t.config,
                            this.m3u8Parser = new o.default(t.isLive),
                            this.currLevelId = 0,
                            this.currFrag = null,
                            this.levels = [],
                            this.firstLevelLoaded = !1,
                            this.loader = null,
                            this.seekTime = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "destroy",
                        value: function() {
                            this.m3u8Parser = null,
                                this.currLevelId = 0,
                                this.currFrag = null,
                                this.levels = null,
                                this.firstLevelLoaded = !1,
                                this.loader.abort(),
                                this.loader = null,
                                this.seekTime = 0
                        }
                    }, {
                        key: "getNextFrag",
                        value: function() {
                            var e = this.currDetails.fragments
                                , t = null
                                , i = 0;
                            return e.length > 0 && (t = e.shift(),
                                this.currFrag = t,
                                e.forEach(function(e) {
                                    i += e.duration
                                }),
                                this.currDetails.totalduration = i,
                                this.currDetails.startSN = t.sn),
                                t
                        }
                    }, {
                        key: "seek",
                        value: function(e) {
                            if (!this.isLive) {
                                this.seekTime = e;
                                var t = this.currDetails
                                    , i = t ? t.fragments : null;
                                if (i) {
                                    for (this.seekTime = this.seekTime % t.totalduration | 0; i.length; ) {
                                        var a = i[0];
                                        if (!(a.start + a.duration / 2 <= this.seekTime))
                                            break;
                                        i.shift()
                                    }
                                    for (var s = 0, n = 0, r = i.length; n < r; n++) {
                                        var u = i[n];
                                        u.start = s,
                                            s += u.duration
                                    }
                                }
                            }
                        }
                    }, {
                        key: "loadManifest",
                        value: function(e) {
                            this.manifsetUrl = e,
                            this.loader && (this.loader.destroy(),
                                this.loader = null),
                                this.loader = new r.default(this.config),
                                this.loader.load(e, "", this.onManifestLoaded.bind(this), this.loadManifestError.bind(this), this.loadManifestTimeout.bind(this), this.config.listLoadingTimeOut, this.config.listLoadingMaxRetry, this.config.listLoadingRetryDelay)
                        }
                    }, {
                        key: "onManifestLoaded",
                        value: function(e, t) {
                            if (404 !== e.currentTarget.status && 0 !== e.currentTarget.status) {
                                var i, a = e.currentTarget.responseText, s = this.manifsetUrl, n = [], r = {};
                                if (-1 != a.indexOf("#EXTM3U")) {
                                    var o = -1 == a.indexOf("#EXTINF:");
                                    (o ? this.m3u8Parser.parseMasterPlaylist(a, s) : [{
                                        url: s
                                    }]).forEach(function(e) {
                                        var t = r[e.bitrate];
                                        void 0 === t ? (r[e.bitrate] = n.length,
                                            e.url = [e.url],
                                            n.push(e)) : n[t].url.push(e.url)
                                    }),
                                        i = n[0].bitrate,
                                        n.sort(function(e, t) {
                                            return e.bitrate - t.bitrate
                                        }),
                                        this.levels = n;
                                    for (var l = 0; l < n.length; l++)
                                        if (n[l].bitrate === i) {
                                            this.currLevelId = l,
                                                u.default.log("manifest loaded, " + n.length + " level(s) found, first bitrate:" + i);
                                            break
                                        }
                                    o ? this.loadLevel() : this.onLevelLoaded(e)
                                } else
                                    u.default.error("HlsPlaylist.onManifestLoaded m3u8 doesn't match #EXTM3U\n", a)
                            }
                        }
                    }, {
                        key: "loadManifestError",
                        value: function(e) {
                            u.default.warn("HlsPlaylist.loadManifestError " + e.currentTarget.status),
                            404 !== e.currentTarget.status && 0 !== e.currentTarget.status || this.hls.onAnchorStop()
                        }
                    }, {
                        key: "loadManifestTimeout",
                        value: function() {
                            this.hls.reset()
                        }
                    }, {
                        key: "loadLevel",
                        value: function() {
                            if (this.currLevel) {
                                var e = this.currLevel.url;
                                if (!this.isLive && this.currDetails) {
                                    var t = this.currDetails.fragments
                                        , i = t[t.length - 1];
                                    i || (u.default.log("HlsPlaylist.loadLevel: fragments run out"),
                                        i = this.currFrag),
                                        e = t.length <= this.config.minFragBufferNum ? this.currLevel.url.replace(/\?btime=\d*$/, "?btime=" + i.time) : null
                                }
                                e && (this.loader && (this.loader.destroy(),
                                    this.loader = null),
                                    this.loader = new r.default(this.config),
                                    this.loader.load(e, "", this.onLevelLoaded.bind(this), this.loadLevelError.bind(this), this.loadLevelTimeout.bind(this), this.config.listLoadingTimeOut, this.config.listLoadingMaxRetry, this.config.listLoadingRetryDelay))
                            }
                        }
                    }, {
                        key: "onLevelLoaded",
                        value: function(e, t) {
                            if (404 !== e.currentTarget.status && 0 !== e.currentTarget.status) {
                                var i = e.currentTarget.responseText
                                    , a = e.currentTarget.responseURL
                                    , s = this.currLevel
                                    , n = null;
                                if (a && (s.url = a),
                                0 === i.indexOf("#EXTM3U") && i.indexOf("#EXTINF:") > 0) {
                                    if (n = this.m3u8Parser.parseLevelPlaylist(i, s.url, this.currLevelId),
                                        s.details = this.mergeDetails(s.details, n),
                                    this.isLive && s.details.fragments.length > 10)
                                        return u.default.info("HlsPlaylist.onLevelLoaded fragments.length =", s.details.fragments.length),
                                            void this.hls.reconnectLive();
                                    this.hls.setTargetDuration(this.currDetails.targetduration),
                                    this.seekTime && this.seek(this.seekTime),
                                    this.firstLevelLoaded || (this.hls.loadFragment(),
                                        this.firstLevelLoaded = !0)
                                } else {
                                    var r = s.details.fragments.length;
                                    u.default.warn("HlsPlaylist.onLevelLoaded no playlist. fragments.length=" + r + "\n" + i)
                                }
                            }
                        }
                    }, {
                        key: "loadLevelError",
                        value: function(e) {
                            u.default.warn("HlsPlaylist.loadLevelError " + e.currentTarget.status),
                            404 !== e.currentTarget.status && 0 !== e.currentTarget.status || this.hls.onAnchorStop()
                        }
                    }, {
                        key: "loadLevelTimeout",
                        value: function() {
                            this.hls.reset()
                        }
                    }, {
                        key: "mergeDetails",
                        value: function(e, t) {
                            if (!e)
                                return t;
                            var i, a = 0, s = 0, n = null;
                            return n = e.fragments.length > 0 ? e.fragments[e.fragments.length - 1] : this.currFrag,
                                i = n.sn,
                                s = n.start + n.duration,
                                t.fragments.forEach(function(t) {
                                    t.sn > i && e.fragments.push(t)
                                }),
                                e.endSN = t.endSN,
                                e.fragments.forEach(function(e) {
                                    a += e.duration,
                                    e.sn > i && (e.start = s,
                                        s += e.duration)
                                }),
                                e.totalduration = a,
                                e
                        }
                    }, {
                        key: "onCheckTimer",
                        value: function(e) {
                            this.isLive && e % 5 == 0 && this.loadLevel()
                        }
                    }, {
                        key: "currLevel",
                        get: function() {
                            return this.levels ? this.levels[this.currLevelId] : null
                        }
                    }, {
                        key: "currDetails",
                        get: function() {
                            return this.currLevel ? this.currLevel.details : null
                        }
                    }, {
                        key: "currFragNum",
                        get: function() {
                            var e = this.currDetails
                                , t = e ? e.fragments : null;
                            return t ? t.length : 0
                        }
                    }]),
                        e
                }();
                t.default = l
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(43))
                    , n = a(i(0))
                    , r = a(i(1))
                    , u = a(i(3))
                    , o = a(i(144))
                    , l = a(i(264))
                    , d = function() {
                    function e(t) {
                        (0,
                            n.default)(this, e),
                            this.isLive = t,
                            this.seqGener = new l.default
                    }
                    return (0,
                        r.default)(e, [{
                        key: "resolve",
                        value: function(e, t) {
                            return o.default.buildAbsoluteURL(t, e)
                        }
                    }, {
                        key: "cloneObj",
                        value: function(e) {
                            return JSON.parse((0,
                                s.default)(e))
                        }
                    }, {
                        key: "parseMasterPlaylist",
                        value: function(e, t) {
                            for (var i, a, s, n = [], r = {}, u = /#EXT-X-STREAM-INF:([^\n\r]*(BAND)WIDTH=(\d+))?([^\n\r]*(CODECS)=\"([^\"\n\r]*)\",?)?([^\n\r]*(RES)OLUTION=(\d+)x(\d+))?([^\n\r]*(NAME)=\"(.*)\")?[^\n\r]*[\r\n]+([^\r\n]+)/gi; null != (i = u.exec(e)); ) {
                                for (i.shift(),
                                         i = i.filter(function(e) {
                                             return void 0 !== e
                                         }),
                                         (r = {}).url = this.resolve(i.pop(), t); i.length > 0; )
                                    switch (i.shift()) {
                                        case "RES":
                                            r.width = parseInt(i.shift()),
                                                r.height = parseInt(i.shift());
                                            break;
                                        case "BAND":
                                            r.bitrate = parseInt(i.shift());
                                            break;
                                        case "NAME":
                                            r.name = i.shift();
                                            break;
                                        case "CODECS":
                                            for (a = i.shift().split(","); a.length > 0; )
                                                -1 !== (s = a.shift()).indexOf("avc1") ? r.videoCodec = this.avc1toavcoti(s) : r.audioCodec = s
                                    }
                                n.push(r)
                            }
                            return n
                        }
                    }, {
                        key: "avc1toavcoti",
                        value: function(e) {
                            var t, i = e.split(".");
                            return i.length > 2 ? (t = i.shift() + ".",
                                t += parseInt(i.shift()).toString(16),
                                t += ("00" + parseInt(i.shift()).toString(16)).substr(-4)) : t = e,
                                t
                        }
                    }, {
                        key: "parseKeyParamsByRegex",
                        value: function(e, t) {
                            var i = t.exec(e);
                            return i && (i.shift(),
                            2 === (i = i.filter(function(e) {
                                return void 0 !== e
                            })).length) ? i[1] : null
                        }
                    }, {
                        key: "parseLevelPlaylist",
                        value: function(e, t, i) {
                            var a, s, n, r, l, d = 0, h = 0, f = {
                                url: t,
                                fragments: [],
                                live: this.isLive,
                                startSN: 0
                            }, c = !1;
                            this.isLive || (a = this.seqGener.genSnFromM3u8(e),
                                f.startSN = a);
                            for (var p = {
                                method: null,
                                key: null,
                                iv: null,
                                uri: null
                            }, v = /(?:#EXT-X-(MEDIA-SEQUENCE):(\d+))|(?:#EXT-X-(TARGETDURATION):(\d+))|(?:#EXT-X-(KEY):(.*))|(?:#EXT(INF):([\d\.]+)[^\r\n]*([\r\n]+[^#|\r\n]+)?)|(?:#EXT-X-(BYTERANGE):([\d]+[@[\d]*)]*[\r\n]+([^#|\r\n]+)?|(?:#EXT-X-(ENDLIST))|(?:#EXT-X-(DIS)CONTINUITY))/g; null !== (s = v.exec(e)); )
                                switch (s.shift(),
                                    (s = s.filter(function(e) {
                                        return void 0 !== e
                                    }))[0]) {
                                    case "MEDIA-SEQUENCE":
                                        this.isLive && (d = f.startSN = parseInt(s[1]));
                                        break;
                                    case "TARGETDURATION":
                                        f.targetduration = parseFloat(s[1]);
                                        break;
                                    case "ENDLIST":
                                        f.live = !1,
                                            u.default.info("M3u8Parser.parseLevelPlaylist ENDLIST isLive=false");
                                        break;
                                    case "DIS":
                                        c = !0;
                                        break;
                                    case "BYTERANGE":
                                        var m = s[1].split("@");
                                        l = 1 === m.length ? r : parseInt(m[1]),
                                            r = parseInt(m[0]) + l,
                                        (n = f.fragments.length ? f.fragments[f.fragments.length - 1] : null) && !n.url && (n.byteRangeStartOffset = l,
                                            n.byteRangeEndOffset = r,
                                            n.url = this.resolve(s[2], t));
                                        break;
                                    case "INF":
                                        var y = parseFloat(s[1]);
                                        if (!isNaN(y)) {
                                            var _, S = d++;
                                            if (this.isLive || (S = a++),
                                            p.method && p.uri && !p.iv) {
                                                _ = this.cloneObj(p);
                                                for (var g = new Uint8Array(16), T = 12; T < 16; T++)
                                                    g[T] = S >> 8 * (15 - T) & 255;
                                                _.iv = g
                                            } else
                                                _ = p;
                                            var P = s[2];
                                            f.fragments.push({
                                                url: P ? this.resolve(P, t) : null,
                                                time: P ? o.default.getTimeFromUrl(P, this.isLive) : 0,
                                                duration: y,
                                                start: h,
                                                level: i,
                                                sn: S,
                                                discontinuity: c,
                                                byteRangeStartOffset: l,
                                                byteRangeEndOffset: r,
                                                decryptdata: _
                                            }),
                                            c && (c = !1),
                                                h += y,
                                                l = null
                                        }
                                        break;
                                    case "KEY":
                                        var I = s[1]
                                            , E = this.parseKeyParamsByRegex(I, /(METHOD)=([^,]*)/)
                                            , k = this.parseKeyParamsByRegex(I, /(URI)=["]([^,]*)["]/)
                                            , R = this.parseKeyParamsByRegex(I, /(IV)=([^,]*)/);
                                        E && (p = {
                                            method: null,
                                            key: null,
                                            iv: null,
                                            uri: null
                                        },
                                        k && "AES-128" === E && (p.method = E,
                                            p.uri = this.resolve(k, t),
                                            p.key = null,
                                        R && (p.iv = R,
                                        "0x" === p.iv.substring(0, 2) && (p.iv = p.iv.substring(2)),
                                            p.iv = p.iv.match(/.{8}/g),
                                            p.iv[0] = parseInt(p.iv[0], 16),
                                            p.iv[1] = parseInt(p.iv[1], 16),
                                            p.iv[2] = parseInt(p.iv[2], 16),
                                            p.iv[3] = parseInt(p.iv[3], 16),
                                            p.iv = new Uint32Array(p.iv))))
                                }
                            return f.totalduration = h,
                                f.endSN = d - 1,
                            this.isLive || (f.endSN = a - 1),
                                f
                        }
                    }]),
                        e
                }();
                t.default = d
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.startSeq = 1e3,
                            this.m3u8Len = 0,
                            this.preTsArr = void 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "genSnFromM3u8",
                        value: function(e) {
                            var t = this.convertM3u8ToArray(e);
                            if (void 0 === this.preTsArr)
                                this.preTsArr = t;
                            else {
                                var i = this.findSeq(this.preTsArr, t[0], this.startSeq);
                                -1 === i && (i = this.startSeq + this.preTsArr.length),
                                    this.preTsArr = t,
                                    this.startSeq = i
                            }
                            return this.startSeq
                        }
                    }, {
                        key: "convertM3u8ToArray",
                        value: function(e) {
                            for (var t = /#EXT(INF):([\d\.]+)[^\r\n]*[\r\n]+([^#|\r\n]+)?/gi, i = [], a = void 0; null !== (a = t.exec(e)); )
                                a.shift(),
                                "INF" === (a = a.filter(function(e) {
                                    return void 0 !== e
                                }))[0] && i.push(a[2]),
                                    a = [];
                            return i
                        }
                    }, {
                        key: "findSeq",
                        value: function(e, t, i) {
                            for (var a = e.length - 1; a >= 0; a--)
                                if (e[a] === t)
                                    return i + a;
                            return -1
                        }
                    }]),
                        e
                }();
                t.default = r
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(14))
                    , n = a(i(0))
                    , r = a(i(1))
                    , u = a(i(3))
                    , o = (a(i(197)),
                    a(i(198)))
                    , l = function() {
                    function e(t, i) {
                        (0,
                            n.default)(this, e),
                            this.mse = t,
                            this.remuxer = i,
                            this.width = 0,
                            this.height = 0,
                            this.lastSN = 0,
                            this.lastLevel = 0,
                            this.PES_TIMESCALE = 9e4
                    }
                    return (0,
                        r.default)(e, [{
                        key: "destroy",
                        value: function() {
                            this.switchLevel(),
                                this.duration = 0,
                                this._initPTS = this._initDTS = void 0
                        }
                    }, {
                        key: "probe",
                        value: function(e) {
                            return e.length >= 564 && 71 === e[0] && 71 === e[188] && 71 === e[376]
                        }
                    }, {
                        key: "switchLevel",
                        value: function() {
                            this.pmtParsed = !1,
                                this._pmtId = -1,
                                this._avcTrack = {
                                    type: "video",
                                    id: -1,
                                    sn: 0,
                                    samples: [],
                                    len: 0,
                                    naluCnt: 0
                                },
                                this._aacTrack = {
                                    type: "audio",
                                    id: -1,
                                    sn: 0,
                                    samples: [],
                                    len: 0
                                },
                                this._id3Track = {
                                    type: "id3",
                                    id: -1,
                                    sn: 0,
                                    samples: [],
                                    len: 0
                                },
                                this.remuxer.switchLevel()
                        }
                    }, {
                        key: "insertDiscontinuity",
                        value: function() {
                            this.switchLevel(),
                                this.remuxer.insertDiscontinuity()
                        }
                    }, {
                        key: "parseTs",
                        value: function(e) {
                            var t = e.data
                                , i = e.audioCodec
                                , a = e.videoCodec
                                , s = e.timeOffset
                                , n = e.duration
                                , r = e.discontinuity
                                , o = e.level
                                , l = e.sn
                                , d = (t = new Uint8Array(t)).length;
                            if (this.probe(t)) {
                                this.audioCodec = i,
                                    this.videoCodec = a,
                                    this.timeOffset = s,
                                    this.duration = n,
                                    this.contiguous = !1,
                                    r ? (u.default.log("TsParser.parseTs discontinuity detected"),
                                        this.insertDiscontinuity()) : o !== this.lastLevel ? (u.default.log("TsParser.parseTs level switch detected"),
                                        this.switchLevel(),
                                        this.lastLevel = o) : l === this.lastSN + 1 && (this.contiguous = !0),
                                    this.lastSN = l,
                                this.contiguous || (this.aacOverFlow = null),
                                this._avcTrack || this.insertDiscontinuity();
                                for (var h, f, c, p, v, m, y, _, S = this.pmtParsed, g = this._avcTrack.id, T = this._aacTrack.id, P = this._id3Track.id, I = 0; I < d; I += 188)
                                    if (71 === t[I]) {
                                        if (p = !!(64 & t[I + 1]),
                                            v = ((31 & t[I + 1]) << 8) + t[I + 2],
                                        (48 & t[I + 3]) >> 4 > 1) {
                                            if ((m = I + 5 + t[I + 4]) === I + 188)
                                                continue
                                        } else
                                            m = I + 4;
                                        S ? (y = (_ = I + 188) - m,
                                            v === g ? (p && (h && this._parseAVCPES(this._parsePES(h)),
                                                h = {
                                                    data: [],
                                                    size: 0
                                                }),
                                            h && (h.data.push(t.subarray(m, _)),
                                                h.size += y)) : v === T ? (p && (f && this._parseAACPES(this._parsePES(f)),
                                                f = {
                                                    data: [],
                                                    size: 0
                                                }),
                                            f && (f.data.push(t.subarray(m, _)),
                                                f.size += y)) : v === P && (p && (c && this._parseID3PES(this._parsePES(c)),
                                                c = {
                                                    data: [],
                                                    size: 0
                                                }),
                                            c && (c.data.push(t.subarray(m, _)),
                                                c.size += y))) : (p && (m += t[m] + 1),
                                            0 === v ? this._parsePAT(t, m) : v === this._pmtId && (this._parsePMT(t, m),
                                                S = this.pmtParsed = !0,
                                                g = this._avcTrack.id,
                                                T = this._aacTrack.id,
                                                P = this._id3Track.id))
                                    } else
                                        u.default.error("TsParser.parseTs ERROR: TS packet did not start with 0x47");
                                h && this._parseAVCPES(this._parsePES(h)),
                                f && this._parseAACPES(this._parsePES(f)),
                                c && this._parseID3PES(this._parsePES(c)),
                                    this._aacTrack.sn = this._avcTrack.sn = l,
                                    this.remuxer.remux(this._aacTrack, this._avcTrack, this.timeOffset, this.contiguous)
                            }
                        }
                    }, {
                        key: "_parsePAT",
                        value: function(e, t) {
                            var i = e[t + 8] << 8 | e[t + 9];
                            1 == i && (this._pmtId = (31 & e[t + 10]) << 8 | e[t + 11]),
                                u.default.log("TsParser._parsePAT program_number=" + i + " pmtId=" + this._pmtId)
                        }
                    }, {
                        key: "_parsePMT",
                        value: function(e, t) {
                            var i = t + 3 + ((15 & e[t + 1]) << 8 | e[t + 2]) - 4;
                            for (t += 12 + ((15 & e[t + 10]) << 8 | e[t + 11]); t < i; ) {
                                var a = e[t]
                                    , s = (31 & e[t + 1]) << 8 | e[t + 2];
                                switch (a) {
                                    case 15:
                                        this._aacTrack.id = s;
                                        break;
                                    case 21:
                                        this._id3Track.id = s;
                                        break;
                                    case 27:
                                        this._avcTrack.id = s;
                                        break;
                                    default:
                                        u.default.log("unkown stream type:" + e[t])
                                }
                                t += 5 + ((15 & e[t + 3]) << 8 | e[t + 4])
                            }
                            u.default.log("TsParser._parsePMT aacTrack.id=" + this._aacTrack.id + " avcTrack.id=" + this._avcTrack.id)
                        }
                    }, {
                        key: "_parsePES",
                        value: function(e) {
                            var t = e.data[0];
                            if (1 != (t[0] << 16) + (t[1] << 8) + t[2])
                                return null;
                            var i, a, s = (t[4] << 8) + t[5], n = t[7];
                            192 & n && ((i = 536870912 * (14 & t[9]) + 4194304 * (255 & t[10]) + 16384 * (254 & t[11]) + 128 * (255 & t[12]) + (254 & t[13]) / 2) > 4294967295 && (i -= 8589934592),
                                64 & n ? (a = 536870912 * (14 & t[14]) + 4194304 * (255 & t[15]) + 16384 * (254 & t[16]) + 128 * (255 & t[17]) + (254 & t[18]) / 2) > 4294967295 && (a -= 8589934592) : a = i);
                            var r = t[8] + 9;
                            e.data[0] = e.data[0].subarray(r),
                                e.size -= r;
                            for (var u = 0, o = new Uint8Array(e.size); e.data.length; )
                                t = e.data.shift(),
                                    o.set(t, u),
                                    u += t.byteLength;
                            return {
                                data: o,
                                pts: i,
                                dts: a,
                                len: s
                            }
                        }
                    }, {
                        key: "_parseAVCPES",
                        value: function(e) {
                            if (null != e) {
                                var t, i = this._avcTrack, a = i.samples, n = this._parseAVCNALu(e.data), r = [], l = 0;
                                0 === n.length && a.length > 0 && this._pushToPreUnit(e.data),
                                    e.data = null;
                                var d = !1
                                    , h = !1
                                    , f = !1
                                    , c = !1
                                    , p = !1
                                    , v = ""
                                    , m = !0
                                    , y = !1
                                    , _ = void 0;
                                try {
                                    for (var S, g = (0,
                                        s.default)(n); !(m = (S = g.next()).done); m = !0) {
                                        var T = S.value;
                                        switch (T.type) {
                                            case 1:
                                                p = !0;
                                                break;
                                            case 5:
                                                d = !0,
                                                    p = !0,
                                                    c = !0;
                                                break;
                                            case 6:
                                                p = !0;
                                                break;
                                            case 7:
                                                if (f = !0,
                                                    p = !0,
                                                    !i.sps) {
                                                    i.sps = [T.data],
                                                        i.timescale = this.remuxer.timescale,
                                                        i.duration = this.remuxer.timescale * this.duration;
                                                    var P = new o.default(T.data).readSPS();
                                                    this.width = i.width = P.width,
                                                        this.height = i.height = P.height;
                                                    for (var I = T.data.subarray(1, 4), E = "avc1.", k = 0; k < 3; k++) {
                                                        var R = I[k].toString(16);
                                                        R.length < 2 && (R = "0" + R),
                                                            E += R
                                                    }
                                                    i.codec = E
                                                }
                                                break;
                                            case 8:
                                                h = !0,
                                                    p = !0,
                                                i.pps || (i.pps = [T.data]);
                                                break;
                                            case 9:
                                                p = !0;
                                                break;
                                            default:
                                                p = !1,
                                                    v += "unknown NAL " + T.type + " "
                                        }
                                        p && (r.push(T),
                                            l += T.data.byteLength)
                                    }
                                } catch (e) {
                                    y = !0,
                                        _ = e
                                } finally {
                                    try {
                                        !m && g.return && g.return()
                                    } finally {
                                        if (y)
                                            throw _
                                    }
                                }
                                v.length && u.default.log(v),
                                (!0 !== f && !0 !== h || !1 !== d) && r.length && (!0 === c || i.sps) && (t = {
                                    units: r,
                                    dts: e.dts,
                                    pts: e.pts,
                                    key: c
                                },
                                    a.push(t),
                                    i.len += l,
                                    i.naluCnt += r.length)
                            } else
                                u.default.error("TsParser._parseAVCPES pes is null.")
                        }
                    }, {
                        key: "_parseAVCNALu",
                        value: function(e) {
                            for (var t, i, a, s, n, r, u = 0, o = e.byteLength, l = 0, d = []; u < o; )
                                switch (t = e[u++],
                                    l) {
                                    case 0:
                                        0 === t && (l = 1);
                                        break;
                                    case 1:
                                        l = 0 === t ? 2 : 0;
                                        break;
                                    case 2:
                                    case 3:
                                        0 === t ? l = 3 : 1 === t ? (s = 31 & e[u],
                                            n ? (a = {
                                                data: e.subarray(n, u - l - 1),
                                                type: r
                                            },
                                                d.push(a)) : (i = u - l - 1) && this._pushToPreUnit(e.subarray(0, i)),
                                            n = u,
                                            r = s,
                                        1 !== s && 5 !== s || (u = o),
                                            l = 0) : l = 0
                                }
                            return n && (a = {
                                data: e.subarray(n, o),
                                type: r
                            },
                                d.push(a)),
                                d
                        }
                    }, {
                        key: "_pushToPreUnit",
                        value: function(e) {
                            var t = this._avcTrack.samples.length;
                            if (0 != t) {
                                var i = this._avcTrack.samples[t - 1]
                                    , a = i.units[i.units.length - 1]
                                    , s = new Uint8Array(a.data.byteLength + e.byteLength);
                                s.set(a.data, 0),
                                    s.set(e, a.data.byteLength),
                                    a.data = s,
                                    this._avcTrack.len += e.byteLength
                            }
                        }
                    }, {
                        key: "_parseAACPES",
                        value: function(e) {
                            if (null != e) {
                                var t, i, a, s, n, r, o, l, d = this._aacTrack, h = e.data, f = h.length, c = 0;
                                if (this.aacOverFlow) {
                                    var p = new Uint8Array(this.aacOverFlow.byteLength + h.byteLength);
                                    p.set(this.aacOverFlow, 0),
                                        p.set(h, this.aacOverFlow.byteLength),
                                        h = p,
                                        this.aacOverFlow = null
                                }
                                for (i = 0; i < f - 1 && (255 !== h[i] || 240 != (240 & h[i + 1])); i++)
                                    ;
                                if (i && (i < f - 1 ? (o = "AAC PES did not start with ADTS header, offset:" + i,
                                    l = !1) : (o = "no ADTS header found in AAC PES",
                                    l = !0),
                                    u.default.error("TsParser._parseAACPES ERROR:" + o),
                                    l))
                                    return;
                                if (!d.audiosamplerate) {
                                    var v = this._ADTStoAudioConfig(h, i, this.audioCodec);
                                    d.config = v.config,
                                        d.audiosamplerate = v.samplerate,
                                        d.channelCount = v.channelCount,
                                        d.codec = v.codec,
                                        d.timescale = this.remuxer.timescale,
                                        d.duration = this.remuxer.timescale * this.duration,
                                        u.default.log("TsParser._parseAACPES parsed codec:" + d.codec + ",rate:" + v.samplerate + ",nb channel:" + v.channelCount)
                                }
                                for (; i + 5 < f; ) {
                                    if (a = 1 & h[i + 1] ? 7 : 9,
                                        s = (3 & h[i + 3]) << 11,
                                        s |= h[i + 4] << 3,
                                        s |= (224 & h[i + 5]) >>> 5,
                                    (s -= a) < 0)
                                        return void u.default.error("TsParser._parseAACPES adtsFrameSize:" + s + ", adtsStartOffset:" + i + ", len:" + f);
                                    if (0 != s) {
                                        if (!((n = i + a) + s <= f))
                                            break;
                                        for (r = Math.round(e.pts + 1024 * c * this.PES_TIMESCALE / d.audiosamplerate),
                                                 t = {
                                                     unit: h.subarray(n, n + s),
                                                     pts: r,
                                                     dts: r
                                                 },
                                                 d.samples.push(t),
                                                 d.len += s,
                                                 i += a + s,
                                                 c++; i < f - 1 && (255 !== h[i] || 240 != (240 & h[i + 1])); i++)
                                            ;
                                    } else
                                        i += a
                                }
                                i < f && (this.aacOverFlow = h.subarray(i, f))
                            } else
                                u.default.error("TsParser._parseAACPES pes is null.")
                        }
                    }, {
                        key: "_ADTStoAudioConfig",
                        value: function(t, i, a) {
                            var s = e.AdtsSampleingRates
                                , n = 1 + ((192 & t[i + 2]) >>> 6)
                                , r = (60 & t[i + 2]) >>> 2;
                            if (!(r > s.length - 1)) {
                                var o = (1 & t[i + 2]) << 2 | (192 & t[i + 3]) >>> 6;
                                u.default.log("TsParser._ADTStoAudioConfig manifest codec:" + a + ", [ADTS] type:" + n + ",sampleingIndex:" + r + "[" + s[r] + "kHz],channelConfig:" + o);
                                var l, d, h = navigator.userAgent.toLowerCase();
                                return -1 !== h.indexOf("firefox") ? r >= 6 ? (n = 5,
                                    d = new Array(4),
                                    l = r - 3) : (n = 2,
                                    d = new Array(2),
                                    l = r) : -1 !== h.indexOf("android") ? -1 !== h.indexOf("mqqbrowser") ? (n = 2,
                                    d = new Array(2),
                                    l = r) : (n = 5,
                                    d = new Array(4),
                                    l = r) : (n = 5,
                                    d = new Array(4),
                                    a && (-1 !== a.indexOf("mp4a.40.29") || -1 !== a.indexOf("mp4a.40.5")) || !a && r >= 6 ? l = r - 3 : (a && -1 !== a.indexOf("mp4a.40.2") && (r >= 6 || 1 === o) && (n = 2,
                                        d = new Array(2)),
                                        l = r)),
                                    d[0] = n << 3,
                                    d[0] |= (14 & r) >> 1,
                                    d[1] |= (1 & r) << 7,
                                    d[1] |= o << 3,
                                5 === n && (d[1] |= (14 & l) >> 1,
                                    d[2] = (1 & l) << 7,
                                    d[2] |= 8,
                                    d[3] = 0),
                                    {
                                        config: d,
                                        samplerate: s[r],
                                        channelCount: o,
                                        codec: "mp4a.40." + n
                                    }
                            }
                            u.default.error("TsParser._ADTStoAudioConfig ERROR:invalid ADTS sampling index:" + r)
                        }
                    }, {
                        key: "_parseID3PES",
                        value: function(e) {
                            this._id3Track.samples.push(e)
                        }
                    }]),
                        e
                }();
                l.AdtsSampleingRates = [96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3, 12e3, 11025, 8e3, 7350],
                    t.default = l
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = function() {
                    function e() {
                        (0,
                            s.default)(this, e)
                    }
                    return (0,
                        n.default)(e, null, [{
                        key: "init",
                        value: function() {
                            var t;
                            for (t in e.types = {
                                avc1: [],
                                avcC: [],
                                hvc1: [],
                                hvcC: [],
                                btrt: [],
                                dinf: [],
                                dref: [],
                                esds: [],
                                ftyp: [],
                                hdlr: [],
                                mdat: [],
                                mdhd: [],
                                mdia: [],
                                mfhd: [],
                                minf: [],
                                moof: [],
                                moov: [],
                                mp4a: [],
                                mvex: [],
                                mvhd: [],
                                sdtp: [],
                                stbl: [],
                                stco: [],
                                stsc: [],
                                stsd: [],
                                stsz: [],
                                stts: [],
                                tfdt: [],
                                tfhd: [],
                                traf: [],
                                trak: [],
                                trun: [],
                                trex: [],
                                tkhd: [],
                                vmhd: [],
                                smhd: []
                            },
                                e.types)
                                e.types.hasOwnProperty(t) && (e.types[t] = [t.charCodeAt(0), t.charCodeAt(1), t.charCodeAt(2), t.charCodeAt(3)]);
                            var i = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 118, 105, 100, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 105, 100, 101, 111, 72, 97, 110, 100, 108, 101, 114, 0])
                                , a = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 115, 111, 117, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 111, 117, 110, 100, 72, 97, 110, 100, 108, 101, 114, 0]);
                            e.HDLR_TYPES = {
                                video: i,
                                audio: a
                            };
                            var s = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 117, 114, 108, 32, 0, 0, 0, 1])
                                , n = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]);
                            e.STTS = e.STSC = e.STCO = n,
                                e.STSZ = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
                                e.VMHD = new Uint8Array([0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]),
                                e.SMHD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]),
                                e.STSD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1]);
                            var r = new Uint8Array([105, 115, 111, 109])
                                , u = new Uint8Array([97, 118, 99, 49])
                                , o = new Uint8Array([0, 0, 0, 1]);
                            e.FTYP = e.box(e.types.ftyp, r, o, r, u),
                                e.DINF = e.box(e.types.dinf, e.box(e.types.dref, s))
                        }
                    }, {
                        key: "box",
                        value: function(e) {
                            for (var t, i = Array.prototype.slice.call(arguments, 1), a = 8, s = i.length, n = s; s--; )
                                a += i[s].byteLength;
                            for ((t = new Uint8Array(a))[0] = a >> 24 & 255,
                                     t[1] = a >> 16 & 255,
                                     t[2] = a >> 8 & 255,
                                     t[3] = 255 & a,
                                     t.set(e, 4),
                                     s = 0,
                                     a = 8; s < n; s++)
                                t.set(i[s], a),
                                    a += i[s].byteLength;
                            return t
                        }
                    }, {
                        key: "hdlr",
                        value: function(t) {
                            return e.box(e.types.hdlr, e.HDLR_TYPES[t])
                        }
                    }, {
                        key: "mdat",
                        value: function(t) {
                            return e.box(e.types.mdat, t)
                        }
                    }, {
                        key: "mdhd",
                        value: function(t, i) {
                            return e.box(e.types.mdhd, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, t >> 24 & 255, t >> 16 & 255, t >> 8 & 255, 255 & t, i >> 24, i >> 16 & 255, i >> 8 & 255, 255 & i, 85, 196, 0, 0]))
                        }
                    }, {
                        key: "mdia",
                        value: function(t) {
                            return e.box(e.types.mdia, e.mdhd(t.timescale, t.duration), e.hdlr(t.type), e.minf(t))
                        }
                    }, {
                        key: "mfhd",
                        value: function(t) {
                            return e.box(e.types.mfhd, new Uint8Array([0, 0, 0, 0, t >> 24, t >> 16 & 255, t >> 8 & 255, 255 & t]))
                        }
                    }, {
                        key: "minf",
                        value: function(t) {
                            return "audio" === t.type ? e.box(e.types.minf, e.box(e.types.smhd, e.SMHD), e.DINF, e.stbl(t)) : e.box(e.types.minf, e.box(e.types.vmhd, e.VMHD), e.DINF, e.stbl(t))
                        }
                    }, {
                        key: "moof",
                        value: function(t, i, a) {
                            return e.box(e.types.moof, e.mfhd(t), e.traf(a, i))
                        }
                    }, {
                        key: "moov",
                        value: function(t) {
                            for (var i = t.length, a = []; i--; )
                                a[i] = e.trak(t[i]);
                            return e.box.apply(null, [e.types.moov, e.mvhd(t[0].timescale, t[0].duration)].concat(a).concat(e.mvex(t)))
                        }
                    }, {
                        key: "mvex",
                        value: function(t) {
                            for (var i = t.length, a = []; i--; )
                                a[i] = e.trex(t[i]);
                            return e.box.apply(null, [e.types.mvex].concat(a))
                        }
                    }, {
                        key: "mvhd",
                        value: function(t, i) {
                            var a = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, t >> 24 & 255, t >> 16 & 255, t >> 8 & 255, 255 & t, i >> 24 & 255, i >> 16 & 255, i >> 8 & 255, 255 & i, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255]);
                            return e.box(e.types.mvhd, a)
                        }
                    }, {
                        key: "sdtp",
                        value: function(t) {
                            var i, a, s = t.samples || [], n = new Uint8Array(4 + s.length);
                            for (a = 0; a < s.length; a++)
                                i = s[a].flags,
                                    n[a + 4] = i.dependsOn << 4 | i.isDependedOn << 2 | i.hasRedundancy;
                            return e.box(e.types.sdtp, n)
                        }
                    }, {
                        key: "stbl",
                        value: function(t) {
                            return e.box(e.types.stbl, e.stsd(t), e.box(e.types.stts, e.STTS), e.box(e.types.stsc, e.STSC), e.box(e.types.stsz, e.STSZ), e.box(e.types.stco, e.STCO))
                        }
                    }, {
                        key: "avc1",
                        value: function(t) {
                            var i, a, s, n = [], r = [];
                            for (i = 0; i < t.sps.length; i++)
                                s = (a = t.sps[i]).byteLength,
                                    n.push(s >>> 8 & 255),
                                    n.push(255 & s),
                                    n = n.concat(Array.prototype.slice.call(a));
                            for (i = 0; i < t.pps.length; i++)
                                s = (a = t.pps[i]).byteLength,
                                    r.push(s >>> 8 & 255),
                                    r.push(255 & s),
                                    r = r.concat(Array.prototype.slice.call(a));
                            var u = e.box(e.types.avcC, new Uint8Array([1, n[3], n[4], n[5], 255, 224 | t.sps.length].concat(n).concat([t.pps.length]).concat(r)))
                                , o = t.width
                                , l = t.height;
                            return e.box(e.types.avc1, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, o >> 8 & 255, 255 & o, l >> 8 & 255, 255 & l, 0, 72, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 255, 255]), u, e.box(e.types.btrt, new Uint8Array([0, 28, 156, 128, 0, 45, 198, 192, 0, 45, 198, 192])))
                        }
                    }, {
                        key: "hvc1",
                        value: function(t) {
                            var i, a, s, n = [], r = [], u = [];
                            for (n.push(161),
                                     n.push(t.vps.length >>> 8 & 255),
                                     n.push(255 & t.vps.length),
                                     i = 0; i < t.vps.length; i++)
                                s = (a = t.vps[i]).byteLength,
                                    n.push(s >>> 8 & 255),
                                    n.push(255 & s),
                                    n = n.concat(Array.prototype.slice.call(a));
                            for (r.push(162),
                                     r.push(t.sps.length >>> 8 & 255),
                                     r.push(255 & t.sps.length),
                                     i = 0; i < t.sps.length; i++)
                                s = (a = t.sps[i]).byteLength,
                                    r.push(s >>> 8 & 255),
                                    r.push(255 & s),
                                    r = r.concat(Array.prototype.slice.call(a));
                            var o = []
                                , l = 0;
                            for (i = 0; i < r.length; )
                                a = r[i],
                                    2 !== l || 3 !== a ? (0 === a ? l++ : l = 0,
                                        o.push(a),
                                        ++i) : (++i,
                                        l = 0);
                            for (u.push(163),
                                     u.push(t.pps.length >>> 8 & 255),
                                     u.push(255 & t.pps.length),
                                     i = 0; i < t.pps.length; i++)
                                s = (a = t.pps[i]).byteLength,
                                    u.push(s >>> 8 & 255),
                                    u.push(255 & s),
                                    u = u.concat(Array.prototype.slice.call(a));
                            var d = e.box(e.types.hvcC, new Uint8Array([1, o[8], o[9], o[10], o[11], o[12], o[13], o[14], o[15], o[16], o[17], o[18], o[19], 240, 0, 255, 253, 248, 248, 0, 0, 15].concat([3]).concat(n).concat(r).concat(u)))
                                , h = t.width
                                , f = t.height;
                            return e.box(e.types.hvc1, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h >> 8 & 255, 255 & h, f >> 8 & 255, 255 & f, 0, 72, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 255, 255]), d, e.box(e.types.btrt, new Uint8Array([0, 28, 156, 128, 0, 45, 198, 192, 0, 45, 198, 192])))
                        }
                    }, {
                        key: "esds",
                        value: function(e) {
                            var t = e.config.length;
                            return new Uint8Array([0, 0, 0, 0, 3, 23 + t, 0, 1, 0, 4, 15 + t, 64, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5].concat([t]).concat(e.config).concat([6, 1, 2]))
                        }
                    }, {
                        key: "mp4a",
                        value: function(t) {
                            var i = t.audiosamplerate;
                            return e.box(e.types.mp4a, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t.channelCount, 0, 16, 0, 0, 0, 0, i >> 8 & 255, 255 & i, 0, 0]), e.box(e.types.esds, e.esds(t)))
                        }
                    }, {
                        key: "stsd",
                        value: function(t) {
                            return "audio" === t.type ? e.box(e.types.stsd, e.STSD, e.mp4a(t)) : t.isHevc ? e.box(e.types.stsd, e.STSD, e.hvc1(t)) : e.box(e.types.stsd, e.STSD, e.avc1(t))
                        }
                    }, {
                        key: "tkhd",
                        value: function(t) {
                            var i = t.id
                                , a = t.duration
                                , s = t.width
                                , n = t.height;
                            return e.box(e.types.tkhd, new Uint8Array([0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, i >> 24 & 255, i >> 16 & 255, i >> 8 & 255, 255 & i, 0, 0, 0, 0, a >> 24, a >> 16 & 255, a >> 8 & 255, 255 & a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, s >> 8 & 255, 255 & s, 0, 0, n >> 8 & 255, 255 & n, 0, 0]))
                        }
                    }, {
                        key: "traf",
                        value: function(t, i) {
                            var a = e.sdtp(t)
                                , s = t.id;
                            return e.box(e.types.traf, e.box(e.types.tfhd, new Uint8Array([0, 0, 0, 0, s >> 24, s >> 16 & 255, s >> 8 & 255, 255 & s])), e.box(e.types.tfdt, new Uint8Array([0, 0, 0, 0, i >> 24, i >> 16 & 255, i >> 8 & 255, 255 & i])), e.trun(t, a.length + 16 + 16 + 8 + 16 + 8 + 8), a)
                        }
                    }, {
                        key: "trak",
                        value: function(t) {
                            return t.duration = t.duration || 4294967295,
                                e.box(e.types.trak, e.tkhd(t), e.mdia(t))
                        }
                    }, {
                        key: "trex",
                        value: function(t) {
                            var i = t.id;
                            return e.box(e.types.trex, new Uint8Array([0, 0, 0, 0, i >> 24, i >> 16 & 255, i >> 8 & 255, 255 & i, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]))
                        }
                    }, {
                        key: "trun",
                        value: function(t, i) {
                            var a, s, n, r, u, o, l = t.samples || [], d = l.length, h = 12 + 16 * d, f = new Uint8Array(h);
                            for (i += 8 + h,
                                     f.set([0, 0, 15, 1, d >>> 24 & 255, d >>> 16 & 255, d >>> 8 & 255, 255 & d, i >>> 24 & 255, i >>> 16 & 255, i >>> 8 & 255, 255 & i], 0),
                                     a = 0; a < d; a++)
                                n = (s = l[a]).duration,
                                    r = s.size,
                                    u = s.flags,
                                    o = s.cts,
                                    f.set([n >>> 24 & 255, n >>> 16 & 255, n >>> 8 & 255, 255 & n, r >>> 24 & 255, r >>> 16 & 255, r >>> 8 & 255, 255 & r, u.isLeading << 2 | u.dependsOn, u.isDependedOn << 6 | u.hasRedundancy << 4 | u.paddingValue << 1 | u.isNonSync, 61440 & u.degradPrio, 15 & u.degradPrio, o >>> 24 & 255, o >>> 16 & 255, o >>> 8 & 255, 255 & o], 12 + 16 * a);
                            return e.box(e.types.trun, f)
                        }
                    }, {
                        key: "initSegment",
                        value: function(t) {
                            e.types || e.init();
                            var i, a = e.moov(t);
                            return (i = new Uint8Array(e.FTYP.byteLength + a.byteLength)).set(e.FTYP),
                                i.set(a, e.FTYP.byteLength),
                                i
                        }
                    }]),
                        e
                }();
                t.default = r
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(3))
                    , u = (a(i(5)),
                    a(i(199)))
                    , o = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.size = 0,
                            this.buffers = []
                    }
                    return (0,
                        n.default)(e, [{
                        key: "destroy",
                        value: function() {
                            this.reset()
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            this.size = 0,
                                this.buffers = []
                        }
                    }, {
                        key: "append",
                        value: function(e) {
                            0 !== e.length && (this.buffers.push(e),
                                this.size += e.length)
                        }
                    }, {
                        key: "getByte",
                        value: function(e) {
                            for (var t = 0, i = 0; i < this.buffers.length; ++i) {
                                var a = this.buffers[i];
                                if (t + a.length > e)
                                    return a[e - t];
                                t += a.length
                            }
                            return r.default.warn("FlvCacher.getByte has no offset=" + e),
                                0
                        }
                    }, {
                        key: "popFrame",
                        value: function() {
                            if (0 === this.size)
                                return null;
                            if (0 === this.buffers.length)
                                return r.default.error("FlvCacher.popFront error no buffers, size:" + this.size + " not eq 0"),
                                    this.reset(),
                                    null;
                            if (this.size <= u.default.TAG_HEADER_LEN + u.default.PREV_TAG_SIZE_LEN)
                                return null;
                            var e = (this.getByte(1) << 16) + (this.getByte(2) << 8) + this.getByte(3)
                                , t = u.default.TAG_HEADER_LEN + e + u.default.PREV_TAG_SIZE_LEN;
                            if (this.size < t)
                                return null;
                            if (1 === this.buffers.length) {
                                if (this.buffers[0].length === t)
                                    return this.size -= t,
                                        this.buffers.shift();
                                var i = this.buffers[0].slice(0, t);
                                return this.buffers[0] = this.buffers[0].slice(t),
                                    this.size -= t,
                                    i
                            }
                            for (var a = new Uint8Array(t), s = 0, n = 0, o = void 0; s < t; ) {
                                var l = t - s;
                                if (this.buffers[0].length > l) {
                                    o = this.buffers[0].slice(0, l),
                                        a.set(o, n),
                                        n += l,
                                        s += l,
                                        this.buffers[0] = this.buffers[0].slice(l),
                                        this.size -= l;
                                    break
                                }
                                o = this.buffers.shift(),
                                    a.set(o, n),
                                    n += o.length,
                                    s += o.length,
                                    this.size -= o.length
                            }
                            return a
                        }
                    }]),
                        e
                }();
                t.default = o
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = function() {
                    function e(t) {
                        (0,
                            s.default)(this, e),
                            this.seiList = [],
                            this.player = t,
                            this.lastTs = -1,
                            this.internal = 10,
                            this.timerStart = !1
                    }
                    return (0,
                        n.default)(e, [{
                        key: "add",
                        value: function(e, t) {
                            var i = this.seiList.length;
                            if (this.seiList.length > 0)
                                for (i = this.seiList.length - 1; i > 0 && !(e > this.seiList[i].timeStamp); i--)
                                    ;
                            this.seiList.splice(i + 1, 0, {
                                timeStamp: e,
                                data: t
                            }),
                            this.timerStart || (this.timerStart = !0,
                                setTimeout(this.checkDispatchSei.bind(this), this.internal))
                        }
                    }, {
                        key: "checkDispatchSei",
                        value: function() {
                            if (this.timerStart) {
                                for (var e = this.player.getCurrentRealTime(), t = 0, i = null; t < this.seiList.length - 2; ) {
                                    if (e >= this.seiList[t].timeStamp && this.seiList[t + 1].timeStamp > e) {
                                        i = this.seiList[t + 1].data,
                                            this.player.onH264Sei(i, this.seiList[t + 1].timeStamp),
                                            this.seiList.splice(0, t + 1);
                                        break
                                    }
                                    t++
                                }
                                setTimeout(this.checkDispatchSei.bind(this), this.internal)
                            }
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            this.seiList = [],
                                this.player = null,
                                this.lastTs = -1,
                                this.timerStart = !1
                        }
                    }]),
                        e
                }();
                t.default = r
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(11))
                    , u = a(i(18))
                    , o = function() {
                    function e(t) {
                        (0,
                            s.default)(this, e),
                            this.hlsMgr = t,
                            this.isPaused = !1
                    }
                    return (0,
                        n.default)(e, [{
                        key: "start",
                        value: function() {
                            this.stop(),
                                r.default.once(this.checkSuc, this, 1e4),
                                r.default.once(this.checkVideo, this, 2e4)
                        }
                    }, {
                        key: "stop",
                        value: function() {
                            r.default.remove(this.checkSuc, this),
                                r.default.remove(this.checkVideo, this)
                        }
                    }, {
                        key: "checkSuc",
                        value: function() {
                            u.default.sendMetrics([{
                                sMetricName: u.default.METRIC.WEB_HLS_PLAY_SUC_RATIO,
                                vField: {
                                    value: this.hlsMgr.hasVideo ? 100 : 0
                                }
                            }])
                        }
                    }, {
                        key: "checkVideo",
                        value: function() {
                            u.default.sendMetrics([{
                                sMetricName: u.default.METRIC.WEB_HLS_PLAY_VIDEO_RATIO,
                                vField: {
                                    value: this.hlsMgr.hasVideo ? 100 : 0
                                }
                            }])
                        }
                    }, {
                        key: "report",
                        value: function() {
                            u.default.sendMetrics([{
                                sMetricName: u.default.METRIC.VIDEO_BAD_QUALITY_RATIO,
                                vField: {
                                    value: this.isPaused ? 100 : 0
                                }
                            }]),
                                this.isPaused = !1
                        }
                    }]),
                        e
                }();
                t.default = o
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(46))
                    , u = a(i(3))
                    , o = a(i(11))
                    , l = a(i(8))
                    , d = a(i(5))
                    , h = a(i(70))
                    , f = a(i(271))
                    , c = a(i(200))
                    , p = i(20)
                    , v = a(i(201))
                    , m = a(i(34))
                    , y = a(i(272))
                    , _ = a(i(18))
                    , S = a(i(273))
                    , g = a(i(10))
                    , T = function() {
                    function e(t) {
                        (0,
                            s.default)(this, e),
                            this.H5Player = t,
                            this.startTs = 0,
                            this.started = !1,
                            this.startTime = 0,
                            this.flvLink = null,
                            this.recvTime = 0,
                            this.connectTime = 0,
                            this.player = new h.default(this,"flv"),
                            this.pauseStartTs = 0,
                            this.gopCnt = 0,
                            this.maxGop = e.DEFAULT_MAX_GOP,
                            this.minPlayDelay = l.default.UintMax,
                            this.pauseCnt = 0,
                            this.pauseTime = 0,
                            this.pauseCnt5 = 0,
                            this.pauseTime5 = 0,
                            this.pauseReason = 0,
                            this.pauseCheckLock = !1,
                            this.loadTime = 0,
                            this.connectTime = 0,
                            this.config = new f.default,
                        void 0 !== y.default && (this.qaStat = new y.default(this)),
                            this.playedStat = null,
                            this.flowSize = 0,
                            this.jumpToP2PCd = 24e4,
                            this.nextJumpToP2PTs = 0,
                            this.waitPlayEnd = !1,
                            this.jumpToP2P = !1
                    }
                    return (0,
                        n.default)(e, [{
                        key: "reset",
                        value: function() {
                            this.started && (u.default.log("FlvMgr.reset"),
                                o.default.remove(this.onCheckTimer, this),
                                o.default.remove(this.onCheckFastTimer, this),
                            this.flvLink && (this.flvLink.close(),
                                this.flvLink = null),
                                this.player.destroy(),
                                this.player = new h.default(this,"flv"),
                                this.player.setPushGop(this.getConfig(c.default.PUSH_GOP)),
                                this.pauseStartTs = 0,
                                this.qaStat.isFirstReport = !0,
                                this.startTs = 0,
                                this.started = !1,
                                this.recvTime = 0,
                                this.startTime = 0,
                                this.maxGop = e.DEFAULT_MAX_GOP,
                                this.minPlayDelay = l.default.UintMax,
                                this.gopCnt = 0,
                                this.pauseCnt = 0,
                                this.pauseTime = 0,
                                this.pauseCnt5 = 0,
                                this.pauseTime5 = 0,
                                this.pauseCheckLock = !1,
                                this.loadTime = 0,
                                this.connectTime = 0,
                                this.flowSize = 0,
                                this.waitPlayEnd = !1,
                                this.jumpToP2P = !1)
                        }
                    }, {
                        key: "getLine",
                        value: function() {
                            return r.default.lineType
                        }
                    }, {
                        key: "startFlv",
                        value: function(e) {
                            u.default.log("FlvMgr.startFlv lineType=" + e.lineType + " url=" + e.url),
                            e.url && (this.H5Player.playingMgr = this,
                                this.reset(),
                                this.url = e.url,
                                this.lineType = e.lineType,
                                r.default.lineType = e.lineType,
                                r.default.curBitrate = e.curBitrate,
                                r.default.originalBitrate = e.originalBitrate,
                                this._startFlv(),
                            this.flvLink || (this.flvLink = new v.default(this)),
                                this.flvLink.connect(e.url))
                        }
                    }, {
                        key: "_startFlv",
                        value: function() {
                            o.default.remove(this.tryPlayP2PTimeout, this),
                                o.default.add(this.onCheckTimer, this, 1e3),
                                o.default.add(this.onCheckFastTimer, this, 100);
                            var e = d.default.now();
                            this.startTs = e,
                                this.startTime = e,
                            0 == this.nextJumpToP2PTs && (this.nextJumpToP2PTs = e + this.jumpToP2PCd),
                                this.started = !0,
                                this.player.setPushGop(this.getConfig(c.default.PUSH_GOP)),
                                this.player.setJitter(this.getConfig(c.default.JIT_BUFLEN), this.getConfig(c.default.VIDEO_JIT_MIN_BUFLEN), this.getConfig(c.default.VIDEO_JIT_MAX_BUFLEN)),
                            void 0 === S.default || this.playedStat || (this.playedStat = new S.default(this),
                                o.default.once(this.playedStat.send, this.playedStat, 1e4))
                        }
                    }, {
                        key: "stopFlv",
                        value: function() {
                            var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                            this._reportFlvFlow(),
                            this.started && (u.default.log("FlvMgr.stopFlv"),
                                this.reset(),
                                this.started = !1),
                                this.jumpToP2P = e
                        }
                    }, {
                        key: "requestUrl",
                        value: function() {
                            this._reportFlvFlow(),
                                this.H5Player.trigger(p.Event.FLV_URL_UNAVAILABLE)
                        }
                    }, {
                        key: "setConfig",
                        value: function(e, t) {
                            this.config.setConfig(e, t)
                        }
                    }, {
                        key: "getConfig",
                        value: function(e) {
                            return this.config.getConfig(e)
                        }
                    }, {
                        key: "setVolume",
                        value: function(e) {
                            this.player.setVolume(e)
                        }
                    }, {
                        key: "setMuted",
                        value: function(e) {
                            this.player.setMuted(e)
                        }
                    }, {
                        key: "getMuted",
                        value: function() {
                            return this.player.getMuted()
                        }
                    }, {
                        key: "setPlaybackrateAccess",
                        value: function(e) {
                            this.player && this.player.setPlaybackrateAccess(e)
                        }
                    }, {
                        key: "onConnected",
                        value: function() {
                            this.connectTime = d.default.now(),
                                u.default.log("%c[TIME] connectTime=" + (this.connectTime - this.startTs), "color:#A23400;background:#FFF5C2")
                        }
                    }, {
                        key: "onClosed",
                        value: function() {
                            this._reportFlvFlow(),
                                this.reset()
                        }
                    }, {
                        key: "onError",
                        value: function() {
                            this._reportFlvFlow(),
                                this.reset(),
                                this.H5Player.trigger(p.Event.ANCHOR_STOP, {
                                    video: this.player.getPlayVideo()
                                })
                        }
                    }, {
                        key: "onData",
                        value: function(e) {
                            var t = new Uint8Array(e);
                            this.flowSize += t.byteLength,
                                this.player.appendFlv(t);
                            var i = d.default.now();
                            0 == this.recvTime && u.default.log("%c[TIME] firstPkgTime=" + (i - this.connectTime), "color:#A23400;background:#FFF5C2"),
                                this.recvTime = i
                        }
                    }, {
                        key: "getCurrentTime",
                        value: function() {
                            return this.player.getCurrentRealTime()
                        }
                    }, {
                        key: "onPlayVideo",
                        value: function(e, t, i) {
                            if (this.setVolume(this.H5Player.getVolume()),
                            0 !== this.startTs) {
                                this.loadTime = d.default.now() - this.startTs;
                                var a = this.connectTime - this.startTs;
                                void 0 !== _.default && _.default.sendFlvTime(this.loadTime, a, 0),
                                    u.default.log("%cFlvMgr.onPlayVideo loadTime=" + this.loadTime, "color:#A23400;background:#FFF5C2"),
                                    this.startTs = 0
                            }
                            this.H5Player.trigger(p.Event.VIDEO_PLAY, {
                                video: e,
                                width: t,
                                height: i
                            }),
                                this.H5Player.trigger(p.Event.PLAY_STATUS, {
                                    status: p.Status.VIDEO_PLAYING
                                })
                        }
                    }, {
                        key: "onVideoStop",
                        value: function(e, t) {
                            this._reportFlvFlow(),
                                u.default.log("FlvMgr.onVideoStop hasVideo=" + t),
                                this.jumpToP2P ? this.jumpToP2P = !1 : (this.H5Player.trigger(p.Event.PLAY_STATUS, {
                                    status: p.Status.VIDEO_STOP
                                }),
                                    this.H5Player.trigger(p.Event.VIDEO_STOP, {
                                        video: e,
                                        hasVideo: t
                                    }))
                        }
                    }, {
                        key: "onSendSeiData",
                        value: function(e, t, i) {
                            this.H5Player.trigger(p.Event.H264_SEI_PLAY, {
                                data: e,
                                ts: t,
                                now: (new Date).getTime(),
                                vt: i
                            })
                        }
                    }, {
                        key: "onPlayerError",
                        value: function(e) {
                            this._reportFlvFlow(),
                                this.H5Player.trigger(p.Event.H5_PLAYER_ERROR)
                        }
                    }, {
                        key: "onPlayPause",
                        value: function(e, t) {
                            this.pauseStartTs = e,
                                this.pauseCheckLock = !1,
                                this.H5Player.trigger(p.Event.PLAY_STATUS, {
                                    status: p.Status.VIDEO_CACHING
                                })
                        }
                    }, {
                        key: "onPlayResume",
                        value: function(e, t) {
                            if (this.pauseStartTs > 0) {
                                var i = e - this.pauseStartTs;
                                i > 200 && (u.default.warn("FlvMgr.onPlayResume pauseTime=" + i),
                                    this.pauseCnt++,
                                    this.pauseTime += i,
                                    this.pauseCnt5++,
                                    this.pauseTime5 += i),
                                    this.pauseStartTs = 0
                            }
                            this.H5Player.trigger(p.Event.PLAY_STATUS, {
                                status: p.Status.VIDEO_PLAYING
                            })
                        }
                    }, {
                        key: "onCheckTimer",
                        value: function(e, t) {
                            if (this.started) {
                                if (this.connected && this.recvTime > 0 && e - this.recvTime > 8e3) {
                                    var i = this.player.getBufferLen();
                                    return u.default.warn("FlvMgr.onCheckTimer no data received " + (e - this.recvTime) + " buffLen=" + i),
                                        this.H5Player.trigger(p.Event.NO_DATA_RECEIVED),
                                        void this.reset()
                                }
                                if (this.flvLink && this.flvLink.onCheckTimer(e, t),
                                    this.player.onCheckTimer(e, t),
                                    this.connected) {
                                    if (t % 20 == 0) {
                                        if (this.pauseStartTs > 0) {
                                            var a = e - this.pauseStartTs;
                                            a > 200 && (u.default.warn("FlvMgr.onCheckTimer pauseTime=" + a),
                                                this.pauseTime += a,
                                                this.pauseStartTs = e,
                                            t % 300 == 0 && (this.pauseTime5 += a))
                                        }
                                        if (this.qaStat) {
                                            0 == this.pauseTime && (this.pauseReason = 0);
                                            var s = this.pauseStartTs > 0;
                                            this.qaStat.record(t, this.pauseCnt, this.pauseTime, s, this.flowSize, this.pauseReason)
                                        }
                                        this.pauseCnt = 0,
                                            this.pauseTime = 0,
                                            this.pauseReason = 0,
                                            this.flowSize = 0
                                    }
                                    t % 300 == 0 && (_.default.sendMetrics([{
                                        sMetricName: _.default.METRIC.VIDEO_VIDEO_BAD_QUALITY_5M_RATIO,
                                        vField: {
                                            value: this.pauseCnt5 > 0 ? 100 : 0
                                        }
                                    }]),
                                        this.pauseCnt5 = 0,
                                        this.pauseTime5 = 0),
                                        this.tryPlayP2P()
                                }
                            }
                        }
                    }, {
                        key: "onCheckFastTimer",
                        value: function(e, t) {
                            if (this.started) {
                                this.player.onCheckFastTimer(e, t),
                                !this.pauseCheckLock && this.pauseStartTs > 0 && e - this.pauseStartTs > 200 && (this.pauseCheckLock = !0,
                                    this.pauseCheck(e));
                                var i = this.player.getBufferLen();
                                this.waitPlayEnd && i < 1e3 && (this.waitPlayEnd = !1,
                                this.H5Player.hasCDNMgr() && (this.jumpToP2PCd < 18e5 && (this.jumpToP2PCd += 12e4),
                                    this.nextJumpToP2PTs = e + this.jumpToP2PCd,
                                    u.default.warn("FlvMgr.onCheckFastTimer jumpToP2PCd=" + this.jumpToP2PCd / 6e4 + "min"),
                                    m.default.setP2p(1),
                                    this.H5Player.flvTurnToP2p(),
                                    o.default.once(this.tryPlayP2PTimeout, this, 3e3)))
                            }
                        }
                    }, {
                        key: "tryPlayP2P",
                        value: function() {
                            if (!this.waitPlayEnd && this.H5Player.isSupportP2P) {
                                var e = this.H5Player.cdnMgr;
                                if (e && e.getLine() == this.getLine()) {
                                    var t = e.streamName;
                                    this.url && t && -1 != this.url.indexOf(t) && e.isEverPlayed && r.default.jumpBackToP2P() && (d.default.now() < this.nextJumpToP2PTs || this.player.getBufferLen() < this.player.JITTER_BUFLEN || (this.flvLink && (u.default.warn("FlvMgr.tryPlayP2P"),
                                        this.flvLink.close()),
                                        this.waitPlayEnd = !0))
                                }
                            }
                        }
                    }, {
                        key: "tryPlayP2PTimeout",
                        value: function() {
                            var e = this.H5Player.cdnMgr;
                            e && !e.isPlaying && e.turnToFlv(g.default.turnToFlvReason.FLV_TO_P2P_FAIL, !0)
                        }
                    }, {
                        key: "_reportFlvFlow",
                        value: function() {
                            this.flowSize > 0 && (this.qaStat && this.qaStat.sendFlow(this.flowSize),
                                this.flowSize = 0)
                        }
                    }, {
                        key: "pauseCheck",
                        value: function(e) {
                            if (this.started && this.flvLink) {
                                var t = 0
                                    , i = r.default.curBitrate / 8 - 10
                                    , a = this.flvLink.speed / 1024 | 0;
                                t = a > 0 && a < i ? g.default.pauseReason.FLV_NET_SLOW : g.default.pauseReason.FLV_NO_BUFF,
                                this.recvTime > 0 && e - this.recvTime > 2e3 && (t = g.default.pauseReason.FLV_NO_DATA);
                                var s = this.player.getBufferLen();
                                s > 1e3 && (t = g.default.pauseReason.FLV_UNKNOW_PAUSE),
                                t > this.pauseReason && (this.pauseReason = t),
                                    u.default.warn("FlvMgr.pauseCheck curReason=" + t + " reportReason=" + this.pauseReason + " buffLen=" + s)
                            }
                        }
                    }, {
                        key: "connected",
                        get: function() {
                            return this.flvLink && this.flvLink.connected
                        }
                    }]),
                        e
                }();
                T.DEFAULT_MAX_GOP = 200,
                    T.MAX_ADJUST_JIT = 500,
                    T.JIT_TOLERATE_LEN = 500,
                    t.default = T
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(6))
                    , n = a(i(0))
                    , r = a(i(1))
                    , u = a(i(200))
                    , o = function() {
                    function e() {
                        (0,
                            n.default)(this, e),
                            this.configs = new s.default,
                            this.configs.set(u.default.PUSH_GOP, !1),
                            this.configs.set(u.default.JIT_BUFLEN, 2e3),
                            this.configs.set(u.default.VIDEO_JIT_MIN_BUFLEN, 1e3),
                            this.configs.set(u.default.VIDEO_JIT_MAX_BUFLEN, 8e3)
                    }
                    return (0,
                        r.default)(e, [{
                        key: "setConfig",
                        value: function(e, t) {
                            1 == e && (e = u.default.JIT_BUFLEN),
                                this.configs.set(e, t)
                        }
                    }, {
                        key: "getConfig",
                        value: function(e) {
                            return this.configs.get(e)
                        }
                    }]),
                        e
                }();
                t.default = o
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(46))
                    , u = a(i(3))
                    , o = a(i(5))
                    , l = a(i(18))
                    , d = a(i(10))
                    , h = function() {
                    function e(t) {
                        (0,
                            s.default)(this, e),
                            this.flvMgr = t,
                            this.data = {
                                act: "webhuyah5qa",
                                uid: 0,
                                sid: 0,
                                subsid: 0,
                                linetype: -1,
                                sendcnt: 0,
                                paucount: 0,
                                paulength: 0,
                                bflength: 0,
                                vr: 0,
                                httphead: "",
                                rel: "jsscene",
                                ref: location.href,
                                isp2p: 0
                            },
                            this.img = null,
                            this.pausedCount = 0,
                            this.pausedTime = 0,
                            this.isPaused = !1,
                            this.isFirstReport = !0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "send",
                        value: function() {
                            var e = this.data
                                , t = (this.flvMgr.H5Player,
                            "//ylog.hiido.com/c.gif?time=" + o.default.utc());
                            for (var i in e.uid = r.default.uid || r.default.uuid,
                                e.sid = r.default.sid,
                                e.subsid = r.default.subSid,
                                e.linetype = this.flvMgr.lineType,
                                e.sendcnt++,
                                e.paucount = this.pausedCount,
                                e.paulength = this.pausedTime > 12e4 ? 12e4 : this.pausedTime,
                                e.bflength = this.flvMgr.player.getBufferLen(),
                                this.pausedCount = 0,
                                this.pausedTime = 0,
                                e)
                                t += "&" + i + "=" + e[i];
                            u.default.log("QAStat sendcnt=" + e.sendcnt + " paucount=" + e.paucount + " paulength=" + e.paulength + " bflength=" + e.bflength),
                            this.img || (this.img = new Image),
                                this.img.src = t
                        }
                    }, {
                        key: "sendFlow",
                        value: function(e) {
                            var t = [{
                                sMetricName: l.default.METRIC.VIDEO_FLOW_LINE,
                                vField: {
                                    value: e
                                }
                            }];
                            l.default.sendMetrics(t)
                        }
                    }, {
                        key: "record",
                        value: function(e, t, i, a, s, n) {
                            if (this.pausedCount += t,
                                this.pausedTime += i,
                            e % 120 == 0 && (a && this.pausedCount++,
                                this.send()),
                            a && (this.isPaused = !0),
                            e % 20 == 0) {
                                var u = 0;
                                u = this.flvMgr.getConfig(100) ? this.flvMgr.getConfig(101) ? this.flvMgr.H5Player.isBrowserSupport() ? this.flvMgr.H5Player.isP2PCooling() ? d.default.userProperty.P2P_COOLING : 1 == l.default.turnToFlvTimes && 0 == l.default.restartTimes ? l.default.turnToFlvReason == d.default.turnToFlvReason.FULL_CONNECT_TIMEOUT ? d.default.userProperty.FIRST_FULL_CONNECT_TIMEOUT : l.default.turnToFlvReason == d.default.turnToFlvReason.FULL_NO_DATA ? d.default.userProperty.FIRST_FULL_NO_DATA : l.default.turnToFlvReason == d.default.turnToFlvReason.FULL_PLAY_FAIL ? d.default.userProperty.FIRST_FULL_PLAY_FAIL : l.default.turnToFlvReason == d.default.turnToFlvReason.SUB_CONNECT_TIMEOUT ? d.default.userProperty.SUB_CONNECT_TIMEOUT : l.default.turnToFlvReason == d.default.turnToFlvReason.SUB_NO_DATA ? d.default.userProperty.SUB_NO_DATA : l.default.turnToFlvReason == d.default.turnToFlvReason.P2P_ARGS_ERROR ? d.default.userProperty.P2P_ARGS_ERROR : l.default.turnToFlvReason == d.default.turnToFlvReason.P2P_COOLING ? d.default.userProperty.P2P_COOLING : d.default.userProperty.UNKNOW : l.default.turnToFlvReason == d.default.turnToFlvReason.FULL_CONNECT_TIMEOUT || l.default.turnToFlvReason == d.default.turnToFlvReason.FULL_NO_DATA || l.default.turnToFlvReason == d.default.turnToFlvReason.FULL_PLAY_FAIL ? l.default.restartReason == d.default.restartReason.RANGE_SEQ_MAX ? d.default.userProperty.RESTART_RANGE_MAX : l.default.restartReason == d.default.restartReason.RANGE_SEQ_LARGE ? d.default.userProperty.RESTART_RANGE_LARGE : l.default.restartReason == d.default.restartReason.CONNECT ? d.default.userProperty.RESTART_CONNECT : l.default.restartReason == d.default.restartReason.MULTI_CDN ? d.default.userProperty.RESTART_MUTI_CDN : l.default.restartReason == d.default.restartReason.PLAYER_NO_DATA ? d.default.userProperty.RESTART_PLAYER_NO_DATA : l.default.restartReason == d.default.restartReason.PLAYER_ERROR ? d.default.userProperty.RESTART_PLAYER_ERROR : l.default.restartReason == d.default.restartReason.FLV_TO_P2P ? d.default.userProperty.FLV_TO_P2P : l.default.restartReason == d.default.restartReason.LOST_SEQ ? d.default.userProperty.LOST_SEQ : d.default.userProperty.UNKNOW : l.default.turnToFlvReason == d.default.turnToFlvReason.SUB_CONNECT_TIMEOUT ? d.default.userProperty.SUB_CONNECT_TIMEOUT : l.default.turnToFlvReason == d.default.turnToFlvReason.SUB_NO_DATA ? d.default.userProperty.SUB_NO_DATA : l.default.turnToFlvReason == d.default.turnToFlvReason.P2P_ARGS_ERROR ? d.default.userProperty.P2P_ARGS_ERROR : l.default.turnToFlvReason == d.default.turnToFlvReason.P2P_COOLING ? d.default.userProperty.P2P_COOLING : d.default.userProperty.UNKNOW : d.default.userProperty.BROWSER_UN_SUPPORT : d.default.userProperty.CLIENT_CLOSE : d.default.userProperty.SERVER_CLOSE;
                                var o = this.flvMgr.player.parser.timeStampStat
                                    , h = [{
                                    sMetricName: l.default.METRIC.VIDEO_FLOW_LINE,
                                    vField: {
                                        value: s
                                    }
                                }, {
                                    sMetricName: l.default.METRIC.SDK_P2P_SERVER_OPEN,
                                    vField: {
                                        value: 1 == u ? 0 : 100
                                    }
                                }, {
                                    sMetricName: l.default.METRIC.SDK_P2P_USER_PROPERTY,
                                    vDimension: {
                                        success: u
                                    }
                                }, {
                                    sMetricName: l.default.METRIC.SDK_PLAYER_PARSER,
                                    vField: {
                                        dts0: o.dtsStat[0],
                                        dts1: o.dtsStat[1],
                                        dts2: o.dtsStat[2],
                                        dts3: o.dtsStat[3],
                                        dts4: o.dtsStat[4],
                                        pts0: o.ptsStat[0],
                                        pts1: o.ptsStat[1],
                                        pts2: o.ptsStat[2],
                                        pts3: o.ptsStat[3],
                                        pts4: o.ptsStat[4],
                                        cts0: o.ctsStat[0],
                                        cts1: o.ctsStat[1],
                                        cts2: o.ctsStat[2],
                                        cts3: o.ctsStat[3],
                                        cts4: o.ctsStat[4]
                                    }
                                }];
                                o.reset(),
                                    this.isFirstReport ? this.isFirstReport = !1 : h.push({
                                        sMetricName: l.default.METRIC.VIDEO_BAD_QUALITY_RATIO,
                                        vField: {
                                            value: this.isPaused ? 100 : 0,
                                            pausecnt: t
                                        },
                                        vDimension: {
                                            p2p: 0,
                                            originalBitrate: r.default.originalBitrate,
                                            p2pCooling: this.flvMgr.H5Player.p2pCooling ? 1 : 0,
                                            topSid: r.default.sid,
                                            reason: n,
                                            quality: a || t > 0 ? 100 : 0
                                        }
                                    }),
                                    l.default.sendMetrics(h),
                                    this.isPaused = !1
                            }
                        }
                    }, {
                        key: "getHost",
                        value: function(e) {
                            return e.replace("https*://", "").split("/")[0]
                        }
                    }, {
                        key: "setHttpHead",
                        value: function(e) {
                            this.data.httphead = this.getHost(e)
                        }
                    }]),
                        e
                }();
                t.default = h
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = (a(i(11)),
                    a(i(5)))
                    , u = a(i(46))
                    , o = function() {
                    function e(t) {
                        (0,
                            s.default)(this, e),
                            this.flvMgr = t,
                            this.data = {
                                act: "webhuyaplayed",
                                uid: 0,
                                sid: 0,
                                subsid: 0,
                                linetype: -1,
                                status: 0,
                                recode: 0,
                                vtime: -1,
                                isp2p: 0
                            }
                    }
                    return (0,
                        n.default)(e, [{
                        key: "send",
                        value: function() {
                            var e = this.data
                                , t = this.flvMgr
                                , i = this.flvMgr.flvLink ? this.flvMgr.flvLink.status : 200
                                , a = "//ylog.hiido.com/c.gif?time=" + r.default.utc();
                            for (var s in e.uid = u.default.uid || u.default.uuid,
                                e.sid = u.default.sid,
                                e.subsid = u.default.subSid,
                                e.linetype = t.lineType,
                                e.status = i || 1,
                                0 == i ? e.recode = 2 : (i < 200 || i >= 300) && (e.recode = 1),
                                e.vtime = t.loadTime || -1,
                                e)
                                a += "&" + s + "=" + e[s];
                            (new Image).src = a
                        }
                    }]),
                        e
                }();
                t.default = o
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(43))
                    , n = a(i(6))
                    , r = a(i(0))
                    , u = a(i(1))
                    , o = a(i(9))
                    , l = (a(i(27)),
                    a(i(3)))
                    , d = a(i(11))
                    , h = a(i(5))
                    , f = a(i(18))
                    , c = i(20)
                    , p = a(i(2))
                    , v = a(i(275))
                    , m = a(i(276))
                    , y = a(i(277))
                    , _ = a(i(53))
                    , S = a(i(207))
                    , g = a(i(205))
                    , T = a(i(296))
                    , P = a(i(308))
                    , I = a(i(310))
                    , E = a(i(311))
                    , k = a(i(16))
                    , R = a(i(312))
                    , C = a(i(313))
                    , L = a(i(10))
                    , A = a(i(7))
                    , M = a(i(314))
                    , U = a(i(315))
                    , b = a(i(316))
                    , N = function() {
                    function e(t) {
                        (0,
                            r.default)(this, e),
                            this.H5Player = t,
                            this.quickAccessFrom = "",
                            this.loadStream = !1,
                            this.started = !1,
                            this.startTs = 0,
                            this.loadTime = 0,
                            this.restartStamp = 0,
                            this.pauseStartTs = 0,
                            this.hasEmptyFrames = !1,
                            this.videoStatus = c.Status.VIDEO_STOP,
                            this.loaderMap = new n.default,
                            this.isEverSuccessPlayed = !1,
                            this.lastEmptySliceTs = 0,
                            this.info = null,
                            this.infoList = null,
                            this.url = null,
                            this.player = null,
                            this.resender = new P.default(this),
                            g.default.cdnMgr = this,
                            o.default.proxyLink = new v.default(this,t),
                            o.default.videoLink = new m.default(this),
                            o.default.loaderMgr = new y.default(this),
                            o.default.userAbility = new U.default,
                            this.userClose = new b.default(this),
                            this.pauseCnt = 0,
                            this.pauseTime = 0,
                            this.pauseCnt5 = 0,
                            this.pauseTime5 = 0,
                            this.pauseCheckLock = !1,
                            this.pauseStat = new R.default(this),
                            this.qaStat = new E.default(this),
                            this.playedStat = null,
                            this.firstSlicePrinted = !1,
                            this.isJumpFromFlv = !1,
                            this.fastTimerInterval = 10,
                            this.wakeChecker = new M.default(t),
                            this.loaderErrorTimes = 0,
                            o.default.addListener(p.default.PP2pSliceData, this.onPP2pSliceData, this),
                            o.default.addListener(p.default.PP2pSliceAudioData, this.onSliceAudioData, this),
                            o.default.addListener(p.default.PP2pSliceVideoData, this.onSliceVideoData, this),
                            o.default.addListener(p.default.PCdnForceConnectVideoProxy, this.onForceConnectVideoProxy, this)
                    }
                    return (0,
                        u.default)(e, [{
                        key: "resetRestart",
                        value: function() {
                            o.default.loaderMgr && o.default.loaderMgr.reset(),
                            this.player && (this.player.dispose(),
                                this.player = null),
                                this.quickAccessFrom = "",
                                this.loadStream = !1,
                                this.startTs = 0,
                                this.loadTime = 0,
                                this.pauseCnt = 0,
                                this.pauseTime = 0,
                                this.pauseCnt5 = 0,
                                this.pauseTime5 = 0,
                                this.pauseStartTs = 0,
                                this.pauseCheckLock = !1,
                                this.pauseStat.reset(),
                                this.hasEmptyFrames = !1,
                                this.firstSlicePrinted = !1,
                                this.isEverSuccessPlayed = !1,
                                this.lastEmptySliceTs = 0,
                                this.videoStatus = c.Status.VIDEO_STOP,
                                this.loaderMap.clear(),
                                this.loaderErrorTimes = 0,
                                this.qaStat.isFirstReport = !0,
                                this.resender.reset()
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            l.default.group("CdnMgr.reset"),
                            o.default.videoLink && o.default.videoLink.close(),
                            o.default.p2pMgr && o.default.p2pMgr.stop(),
                                this.resetRestart(),
                                this.wakeChecker.reset(),
                                d.default.remove(this.onCheckTimer, this),
                                d.default.remove(this.onCheckFastTimer, this),
                                d.default.remove(this.playTimeout, this),
                                d.default.remove(this.onPlayTimeout2, this),
                                d.default.remove(this.onPlayTimeout4, this),
                                g.default.dispose(),
                                o.default.streamSeqSN = 0,
                                o.default.quickAccessBeginIndex = 0,
                                o.default.quickAccessEndIndex = 0,
                                o.default.quickTime = 0,
                                o.default.exip = 0,
                                o.default.sslUrl = "",
                                o.default.myIp = "",
                                o.default.wanIp = "",
                                o.default.wanPort = 0,
                                o.default.cdnpConnected = 0,
                                l.default.groupEnd()
                        }
                    }, {
                        key: "getLine",
                        value: function() {
                            return o.default.lineType
                        }
                    }, {
                        key: "startFlv",
                        value: function(e, t) {
                            var i = (0,
                                s.default)(e).replace(/\,/g, "\n").replace(/[\"\{\}]/g, "");
                            if (void 0 == e.sP2pUrl || void 0 == e.sP2pUrlSuffix || void 0 == e.sFlvAntiCode || void 0 == e.bitrate || void 0 == e.lineType)
                                return console.error("CdnMgr.startFlv P2P参数不完整，跳转至FLV！\n" + i),
                                    void this.turnToFlv(L.default.turnToFlvReason.P2P_ARGS_ERROR, !0);
                            if (this.H5Player.playingMgr = this,
                                this.reset(),
                                g.default.creatNewWorker(),
                                d.default.add(this.onCheckTimer, this, 1e3),
                                d.default.add(this.onCheckFastTimer, this, this.fastTimerInterval),
                                l.default.log("CdnMgr.startFlv \n" + i),
                            t instanceof Array) {
                                var a = [];
                                t.forEach(function(e) {
                                    a.push(e.iLineIndex + " " + e.sP2pUrl + " " + e.sP2pUrlSuffix)
                                }),
                                    l.default.log("CdnMgr.startFlv multiCdn infoList\n" + a.join("\n"))
                            }
                            this.info = e,
                                this.infoList = t,
                                o.default.lineType = e.lineType,
                                o.default.bitrate = e.bitrate,
                                o.default.curBitRate = e.curBitRate || e.curBitrate,
                                o.default.originalBitrate = e.originalBitrate,
                                o.default.loaderMgr.p2pUrl = e.sP2pUrl,
                                o.default.loaderMgr.suffix = e.sP2pUrlSuffix,
                                o.default.sFlvToken = e.sFlvAntiCode,
                                o.default.proxyLink.updateAnticode(e.sFlvUrl, e.sStreamName),
                                o.default.isStartFromUrl = !1,
                                o.default.userAbility.init(),
                            t instanceof Array && S.default.init(t, this),
                                this.started = !0,
                                this.startTs = h.default.now(),
                                this.player = new T.default(this),
                                this.quickAccessVideo(),
                            this.playedStat || (this.playedStat = new I.default(this),
                                d.default.once(this.playedStat.send, this.playedStat, 1e4)),
                                d.default.once(this.playTimeout, this, 4e3),
                                d.default.once(this.onPlayTimeout2, this, 2e3),
                                d.default.once(this.onPlayTimeout4, this, 4e3),
                                this.wakeChecker.startWakeTimeoutChecker()
                        }
                    }, {
                        key: "testRestart",
                        value: function() {
                            this.restart(100)
                        }
                    }, {
                        key: "getCurrentTime",
                        value: function() {
                            return this.player ? this.player.getCurrentRealTime() : 0
                        }
                    }, {
                        key: "onPlayTimeout2",
                        value: function() {
                            if (this.started) {
                                var e = [{
                                    sMetricName: f.default.METRIC.WEB_P2P_LOAD_SAMPLE,
                                    vDimension: {
                                        success: 1
                                    }
                                }];
                                f.default.sendMetrics(e)
                            }
                        }
                    }, {
                        key: "onPlayTimeout4",
                        value: function() {
                            if (this.started) {
                                var e = [{
                                    sMetricName: f.default.METRIC.WEB_P2P_LOAD_SAMPLE,
                                    vDimension: {
                                        success: 2
                                    }
                                }];
                                f.default.sendMetrics(e)
                            }
                        }
                    }, {
                        key: "playTimeout",
                        value: function() {
                            if (this.started) {
                                var e = {
                                    sMetricName: f.default.METRIC.WEB_P2P_LOAD_RATIO
                                };
                                this.isPlaying ? (k.default.printLoadFail(!1),
                                    e.vField = {
                                        value: 100
                                    },
                                    f.default.sendMetrics([e])) : (k.default.printLoadFail(!0),
                                    k.default.p2pState = 0,
                                    f.default.httpError ? e.vDimension = {
                                        success: 1
                                    } : e.vDimension = {
                                        success: 2
                                    },
                                    e.vField = {
                                        value: 0
                                    },
                                    f.default.sendMetrics([e]))
                            }
                        }
                    }, {
                        key: "onRenderTimeout",
                        value: function() {
                            this.started && !this.isPlaying && (l.default.warn("VideoLoader.onRenderTimeout"),
                                this.turnToFlv(L.default.turnToFlvReason.FULL_PLAY_FAIL),
                                this.loaderErrorTimes++)
                        }
                    }, {
                        key: "turnToFlv",
                        value: function(e) {
                            var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                            (this.started || t) && (l.default.warn("CdnMgr.turnToFlv reason=" + e),
                                f.default.turnToFlvReason = e,
                                f.default.turnToFlvTimes++,
                                this.stopFlv(),
                                this.H5Player.trigger(c.Event.P2P_TIMEOUT))
                        }
                    }, {
                        key: "switchBitrate",
                        value: function(e) {
                            return e = Number(e),
                                o.default.curBitRate = e,
                                l.default.log("%cCdnMgr.switchBitrate=" + e + " multiCdn=" + o.default.isMutiCdn(), "background:#FFBFFF"),
                                !(!this.started || o.default.isStartFromUrl || (this.reset(),
                                    g.default.creatNewWorker(),
                                    d.default.add(this.onCheckTimer, this, 1e3),
                                    d.default.add(this.onCheckFastTimer, this, this.fastTimerInterval),
                                    this.startTs = h.default.now(),
                                    this.player = new T.default(this),
                                    this.info.bitrate = e,
                                    this.quickAccessVideo(),
                                    this.wakeChecker.startWakeTimeoutChecker(),
                                    0))
                        }
                    }, {
                        key: "quickAccessVideo",
                        value: function() {
                            var e = Number(this.info.iIsP2PSupport);
                            e = e > 1 ? e : 0,
                                this.createStreamId(e),
                                this.quickAccessVideoOnly(),
                                o.default.proxyLink.getProxy(this.info.sStreamName, this.info.bitrate, e)
                        }
                    }, {
                        key: "quickAccessVideoOnly",
                        value: function() {
                            var e = h.default.now();
                            o.default.initUseTime(e);
                            var t = !1
                                , i = o.default.extendConfig.quickAccessLines;
                            "string" == typeof i && (t = "all" == (i = i.toLowerCase()) || -1 != i.split(",").indexOf(o.default.lineType.toString())),
                            (t || Number(localStorage._p2pQuickAccess)) && (o.default.quickTime = 2e3,
                                o.default.quickAccessBeginIndex = o.default.exip = 0,
                                this.loadFullStream("quickTime"))
                        }
                    }, {
                        key: "startP2PUrl",
                        value: function(e) {
                            l.default.log("CdnMgr.startP2PUrl " + e),
                                this.H5Player.playingMgr = this,
                                this.reset(),
                                g.default.creatNewWorker(),
                                d.default.add(this.onCheckTimer, this, 1e3),
                                d.default.add(this.onCheckFastTimer, this, this.fastTimerInterval),
                                o.default.isStartFromUrl = !0,
                                this.url = e,
                                this.started = !0,
                                this.startTs = h.default.now(),
                                this.player = new T.default(this),
                                o.default.initUseTime(this.startTs),
                                o.default.getVPTime = this.startTs,
                                o.default.connectVpTime = this.startTs,
                                o.default.connectVideoTime = this.startTs,
                                o.default.loginTime = this.startTs,
                                o.default.loaderMgr.init(),
                                o.default.loaderMgr.fullLoader.connect(e)
                        }
                    }, {
                        key: "stopFlv",
                        value: function() {
                            this.started && (l.default.log("CdnMgr.stopFlv"),
                                this.started = !1,
                                k.default.reportFlow(),
                                this.reset())
                        }
                    }, {
                        key: "cdnpReconnect",
                        value: function() {
                            o.default.p2pMgr && o.default.p2pMgr.cdnpReconnect()
                        }
                    }, {
                        key: "restart",
                        value: function(e) {
                            if (l.default.log("%cCdnMgr.restart", "background:#FFBFFF", e),
                                e) {
                                f.default.restartReason = e,
                                    f.default.restartTimes++;
                                var t = !0;
                                if (e === L.default.restartReason.LOST_SEQ_JUMP || e == L.default.restartReason.CONNECT) {
                                    var i = h.default.now();
                                    this.restartStamp > 0 && i - this.restartStamp < 2e4 && (t = !1),
                                        this.restartStamp = i
                                }
                                if (t) {
                                    var a = [{
                                        sMetricName: f.default.METRIC.WEB_P2P_CDN_RESTART,
                                        vDimension: {
                                            success: e
                                        }
                                    }];
                                    f.default.sendMetrics(a)
                                }
                            }
                            k.default.reportFlow(),
                                e === L.default.restartReason.FLV_TO_P2P ? (this.stopFlv(),
                                this.info && (this.info.sFlvAntiCode = o.default.sFlvToken),
                                    o.default.isStartFromUrl ? this.startP2PUrl(this.url) : this.startFlv(this.info, this.infoList),
                                e == L.default.restartReason.FLV_TO_P2P && (this.isJumpFromFlv = !0)) : (o.default.p2pMgr.restart(),
                                    this.resetRestart(),
                                    this.player = new T.default(this),
                                    this.quickAccessVideoOnly())
                        }
                    }, {
                        key: "getMaxSeq",
                        value: function() {
                            return this.resender.globalMaxSeq
                        }
                    }, {
                        key: "getMaxSeqTs",
                        value: function() {
                            return this.resender.globalMaxSeqTs
                        }
                    }, {
                        key: "setConfig",
                        value: function(e, t) {
                            l.default.log("CdnMgr.setConfig key=" + e + " value=" + t),
                                o.default.setConfig(e, t)
                        }
                    }, {
                        key: "getConfig",
                        value: function(e) {
                            return o.default.getConfig(e)
                        }
                    }, {
                        key: "setPlaybackrateAccess",
                        value: function(e) {
                            this.player && this.player.setPlaybackrateAccess(e)
                        }
                    }, {
                        key: "createStreamId",
                        value: function(e) {
                            var t = this.info.sStreamName
                                , i = Number(this.info.bitrate);
                            i > 0 && i % 100 == 0 && (i = i <= 8e3 ? i / 100 + 400 | 0 : i / 100 + 1e3 | 0);
                            var a = new A.default;
                            a.streamName = t,
                                a.codecType = i,
                                a.cdnBrand = e,
                                o.default.streamId = a
                        }
                    }, {
                        key: "loadFullStream",
                        value: function(e) {
                            if (!this.loadStream) {
                                this.loadStream = !0,
                                    this.quickAccessFrom = e,
                                    o.default.loaderMgr.init(),
                                    l.default.log("%cQuickAccess from " + e, "background:#FFBFFF");
                                var t = o.default.quickAccessBeginIndex;
                                o.default.loaderMgr.loadFullStream(t),
                                    Number(localStorage._noP2p) ? l.default.log("%c=============== NO P2P ===============", "font-weight:bold") : (o.default.p2pMgr || (o.default.p2pMgr = new C.default(this)),
                                        o.default.p2pMgr.initConfig()),
                                    this.resender.init()
                            }
                        }
                    }, {
                        key: "onPP2pSliceData",
                        value: function(e) {
                            if (Number(localStorage._printSlice) && !e.isCtrlSlice) {
                                var t = e.isAudio ? "Audio" : "Video"
                                    , i = e.isVideo ? "color:#9F35FF" : "color:#AE8F00";
                                l.default.debug("%c####### " + t + " slice " + e.seq, i, "from=" + e.from, "uid=" + e.uid)
                            }
                            if (0 == this.firstSlicePrinted) {
                                this.firstSlicePrinted = !0;
                                var a = "%cFirst Slice isVideo=" + e.isVideo + " seq=" + e.seq;
                                "quickTime" != this.quickAccessFrom && (a += " equalToQuickAccess=" + (e.seq == o.default.quickAccessBeginIndex)),
                                    l.default.log(a, "background:#FFBFFF")
                            }
                            var s = h.default.now();
                            if (this.lastEmptySliceTs = e.isCtrlSlice ? s : 0,
                            e.from < _.default.TYPE_FULL && l.default.warn("CdnMgr.onPP2pSliceData unknown from=" + e.from),
                                e.isFromPeer)
                                if (g.default.isRunning())
                                    g.default.parseSlice({
                                        uid: e.uid,
                                        uri: e.uri,
                                        seq: e.seq,
                                        buffer: e.payload.buffer
                                    });
                                else {
                                    var n = new DataView(e.payload.buffer);
                                    o.default.videoLink && o.default.videoLink.onData(e.uri, n, e.seq)
                                }
                            else if (e.isSubSlice && e.loaderId && this.loaderMap.has(e.loaderId)) {
                                var r = this.loaderMap.get(e.loaderId)
                                    , u = r.loader;
                                r.firstSeq || (r.firstSeq = e.seq,
                                    l.default.log("CdnMgr.onPP2pSliceData type=2 line=" + u.lineType + " firstSeq=" + e.seq));
                                var d = Number(localStorage._printLineSlice);
                                d && d == u.lineType && l.default.log("printLineSlice line=" + u.lineType + " seq=" + e.seq)
                            }
                            this.resender.onReceiveData(e)
                        }
                    }, {
                        key: "onSliceAudioData",
                        value: function(e) {
                            this.player && (this.player.isDispose ? (l.default.log("CdnMgr.onSliceAudioData player disposed, restart."),
                                this.restart(L.default.restartReason.PLAYER_DISPOSE)) : this.player.onAudioStreamData(e))
                        }
                    }, {
                        key: "onSliceVideoData",
                        value: function(e) {
                            if (Number(localStorage._printVideoCfg)) {
                                var t = e.config;
                                if (t.has(1) && t.has(2)) {
                                    var i = 4294967296 * t.get(1) + t.get(2);
                                    l.default.log("CdnMgr.onSliceVideoData startIdx=" + i + " curSeq=" + e.seq + " gap=" + (e.seq - i))
                                }
                            }
                            this.player && (this.player.isDispose ? (l.default.log("CdnMgr.onSliceVideoData player disposed, restart."),
                                this.restart(L.default.restartReason.PLAYER_DISPOSE)) : this.player.onVideoStreamData(e))
                        }
                    }, {
                        key: "onForceConnectVideoProxy",
                        value: function(e) {
                            if (e.cdnGroupId.equal(o.default.streamId)) {
                                var t = 10 + 10 * Math.floor(Math.random() * e.reconnectTime / 10);
                                l.default.log("ForceConnectVideoProxy start", h.default.now(), e),
                                    e.videoProxyIpInfo.length > 0 ? d.default.once(this.onDelayConnect, this, t, e.videoProxyIpInfo) : d.default.once(this.onDelayGetProxy, this, t)
                            }
                        }
                    }, {
                        key: "onDelayConnect",
                        value: function(e, t, i) {
                            l.default.log("ForceConnectVideoProxy end", h.default.now()),
                                o.default.videoLink.forceConnect(i)
                        }
                    }, {
                        key: "onDelayGetProxy",
                        value: function(e, t) {
                            l.default.log("ForceConnectVideoProxy end", h.default.now()),
                                o.default.videoLink.getProxy()
                        }
                    }, {
                        key: "onCheckTimer",
                        value: function(e, t) {
                            if (this.started) {
                                if (this.player && this.player.onCheckTimer(e, t),
                                this.resender && this.resender.onCheckTimer(e, t),
                                    o.default.globalSpeedCalc.calculate(),
                                t % (Number(localStorage._speedPrintRate) || 20) == 0) {
                                    var i = o.default.curBitRate / 8
                                        , a = this.getGlobalSpeed();
                                    l.default.log("CdnMgr.onCheckTimer avgSpeed=" + a + "KB/s expectSpeed=" + i + "KB/s")
                                }
                                if (t % 20 == 0) {
                                    if (this.pauseStartTs > 0) {
                                        var s = e - this.pauseStartTs;
                                        s > 200 && (this.pauseTime += s,
                                            this.pauseStartTs = e,
                                        t % 300 == 0 && (this.pauseTime5 += s))
                                    }
                                    this.loaderErrorTimes,
                                        this.loaderErrorTimes = 0;
                                    var n = this.resender.getStat();
                                    k.default.record.resendTimes = n.resendTimes,
                                        k.default.record.resendTimeoutCnt = n.resendTimeoutCnt,
                                        k.default.record.resendErrorTimes = n.resendErrorTimes,
                                        k.default.record.resendSliceCnt = n.resendSliceCnt,
                                        k.default.record.resendRespondCnt = n.resendRespondCnt,
                                        k.default.record.resendLateCnt = n.resendLateCnt,
                                        k.default.record.resendMissCnt = n.resendMissCnt,
                                        k.default.record.repeatResendCnt = n.repeatResendCnt,
                                        k.default.record.repeatResendSucc = n.repeatResendSucc,
                                        k.default.record.repeatResendFail = n.repeatResendFail,
                                        k.default.record.resendTimesLimit = n.resendTimesLimit;
                                    var r = this.player.getStat();
                                    k.default.record.dropFrames = r.dropFrames,
                                        k.default.record.playedFrames = r.playedFrames,
                                        k.default.record.dtsJumpPauseTimes = r.dtsJumpPauseTimes,
                                        k.default.record.skipFramePauseTimes = r.skipFramePauseTimes;
                                    var u = r.dropFrames;
                                    k.default.record.fullFrameRatio = 0 == u ? 100 : 0,
                                        this.pauseStat.lastCheck(r, n);
                                    var d = this.pauseStartTs > 0
                                        , h = 0 == this.pauseTime ? 0 : this.pauseStat.reason;
                                    this.qaStat.record(t, this.pauseCnt, this.pauseTime, d, h),
                                        this.qaStat.hasEmptyFrames = this.hasEmptyFrames,
                                        this.pauseCnt = 0,
                                        this.pauseTime = 0,
                                        this.pauseStat.reset()
                                }
                                t % 300 == 0 && (f.default.sendMetrics([{
                                    sMetricName: f.default.METRIC.VIDEO_VIDEO_BAD_QUALITY_5M_RATIO,
                                    vField: {
                                        value: this.pauseCnt5 > 0 ? 100 : 0
                                    }
                                }]),
                                    this.pauseCnt5 = 0,
                                    this.pauseTime5 = 0)
                            }
                        }
                    }, {
                        key: "onCheckFastTimer",
                        value: function(e, t) {
                            this.started && (this.wakeChecker.onCheckFastTimer(e, t),
                            this.player && this.player.onCheckFastTimer(e, t),
                            this.resender && t % 10 == 0 && this.resender.onCheckFastTimer(e, t),
                            !this.pauseCheckLock && this.pauseStartTs > 0 && e - this.pauseStartTs > 200 && (this.pauseCheckLock = !0,
                                this.pauseStat.pauseCheck(this.bufferLen)))
                        }
                    }, {
                        key: "getGlobalSpeed",
                        value: function() {
                            var e = o.default.globalSpeedCalc.average();
                            return e = Math.round(e / 1024)
                        }
                    }, {
                        key: "isLowNet",
                        value: function() {
                            var e = o.default.curBitRate / 8;
                            return this.getGlobalSpeed() < e - 20
                        }
                    }, {
                        key: "setVolume",
                        value: function(e) {
                            this.player && this.player.msePlayer.setVolume(e)
                        }
                    }, {
                        key: "setMuted",
                        value: function(e) {
                            this.player && this.player.msePlayer.setMuted(e)
                        }
                    }, {
                        key: "getMuted",
                        value: function() {
                            return this.player ? this.player.msePlayer.getMuted() : -1
                        }
                    }, {
                        key: "onPlayVideo",
                        value: function(e, t, i, a) {
                            k.default.recordPlayBuf(),
                            Number(localStorage._noP2p) || o.default.p2pMgr && o.default.p2pMgr.start();
                            var s = h.default.now();
                            if (o.default.onPlayTime = s,
                                l.default.log("%c[TIME] onPlayTime=" + (s - o.default.firstRenderTime) + " totalTime=" + (s - o.default.startTime), "color:#A23400;background:#FFF5C2"),
                                e.autoplay = !0,
                                e.volume = this.H5Player.getVolume(),
                                this.H5Player.trigger(c.Event.VIDEO_PLAY, {
                                    video: e,
                                    width: t,
                                    height: i,
                                    hasVideo: a
                                }),
                                0 !== this.startTs ? (this.loadTime = s - this.startTs,
                                    f.default.sendCdnTime(o.default, !0),
                                    l.default.log("%cCdnMgr.onPlayVideo w/h=" + t + "/" + i + " loadTime=" + this.loadTime, "color:#A23400;background:#FFF5C2"),
                                    this.startTs = 0,
                                    o.default.printUseTime()) : l.default.log("CdnMgr.onPlayVideo w/h=" + t + "/" + i),
                                this.isEverSuccessPlayed = !0,
                                this.updateStatus(c.Status.VIDEO_PLAYING),
                                this.isJumpFromFlv) {
                                this.isJumpFromFlv = !1;
                                var n = this.H5Player.flvMgr;
                                n && n.stopFlv(!0)
                            }
                        }
                    }, {
                        key: "onVideoStop",
                        value: function(e, t) {
                            l.default.log("CdnMgr.onVideoStop hasVideo=" + t),
                            t && (this.updateStatus(c.Status.VIDEO_STOP),
                                this.H5Player.trigger(c.Event.VIDEO_STOP, {
                                    video: e,
                                    haveVideo: !0
                                }))
                        }
                    }, {
                        key: "onSendSeiData",
                        value: function(e) {
                            this.H5Player.trigger(c.Event.H264_SEI_PLAY, {
                                data: e
                            })
                        }
                    }, {
                        key: "onPlayerError",
                        value: function(e) {
                            e && (f.default.restartReason = L.default.restartReason.PLAYER_ERROR,
                                this.H5Player.trigger(c.Event.H5_PLAYER_ERROR)),
                                this.pauseStartTs = 0
                        }
                    }, {
                        key: "onErrorEvent",
                        value: function(e) {
                            if (3 === e.type) {
                                var t = this.player.getStat()
                                    , i = t.dropFrames
                                    , a = t.playedFrames;
                                l.default.log("CdnMgr onErrorEvent dropFrames", i, "playedFrames", a)
                            }
                            f.default.sendMetrics([{
                                sMetricName: f.default.METRIC.WEB_P2P_PLAY_FAIL,
                                vDimension: {
                                    success: e.type
                                }
                            }])
                        }
                    }, {
                        key: "onPlayPause",
                        value: function(e, t) {
                            this.pauseStartTs = e,
                                this.pauseCheckLock = !1,
                            t && this.updateStatus(c.Status.VIDEO_CACHING)
                        }
                    }, {
                        key: "onPlayResume",
                        value: function(e, t) {
                            if (this.pauseStartTs) {
                                var i = e - this.pauseStartTs;
                                i > 200 && (l.default.warn("CdnMgr.onPlayResume pauseTime=" + i),
                                    this.pauseCnt++,
                                    this.pauseTime += i,
                                    this.pauseCnt5++,
                                    this.pauseTime5 += i),
                                    this.pauseStartTs = 0
                            }
                            t && this.updateStatus(c.Status.VIDEO_PLAYING)
                        }
                    }, {
                        key: "updateStatus",
                        value: function(e) {
                            this.videoStatus !== e && (this.videoStatus = e,
                                this.H5Player.trigger(c.Event.PLAY_STATUS, {
                                    status: e
                                }))
                        }
                    }, {
                        key: "streamName",
                        get: function() {
                            return this.info ? this.info.sStreamName : ""
                        }
                    }, {
                        key: "isEverPlayed",
                        get: function() {
                            return !!this.info
                        }
                    }, {
                        key: "isPlaying",
                        get: function() {
                            return this.videoStatus != c.Status.VIDEO_STOP
                        }
                    }, {
                        key: "bufferLen",
                        get: function() {
                            return this.player ? this.player.getBufferLen() : 0
                        }
                    }]),
                        e
                }();
                t.default = N
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(9))
                    , u = a(i(3))
                    , o = a(i(11))
                    , l = a(i(5))
                    , d = a(i(47))
                    , h = a(i(63))
                    , f = a(i(20))
                    , c = a(i(7))
                    , p = a(i(113))
                    , v = function() {
                    function e(t, i) {
                        (0,
                            s.default)(this, e),
                            this.cdnMgr = t,
                            this.H5Player = i,
                            this.streamName = "",
                            this.codecType = 0,
                            this.cdnBrand = 0,
                            this._delayGetProxy = !1,
                            this._retryTimer = 0,
                            this._sendTime = 0,
                            this.cdnTokenReq = null,
                            this.lastTokenTime = 0,
                            this.cdnTokenExRequestId = 0,
                            this.bindGetCdnTokenExRsp = this.onGetCdnTokenExRsp.bind(this),
                            o.default.add(this.onCheckTimer, this, 1e3),
                            h.default.connected ? this._onConnected() : h.default.inited ? h.default.addListener(h.default.WEBSOCKET_CONNECTED, this._onConnected.bind(this)) : r.default.addListener(h.default.TAFLINK_INITED, this._onConnected.bind(this))
                    }
                    return (0,
                        n.default)(e, [{
                        key: "_onConnected",
                        value: function() {
                            this._delayGetProxy && (this._delayGetProxy = !1,
                                this.getProxy(this.streamName, this.codecType, this.cdnBrand)),
                                h.default.addListener("getCdnTokenInfoEx", this.bindGetCdnTokenExRsp),
                                this.getCdnTokenExReq(l.default.now())
                        }
                    }, {
                        key: "sendWup",
                        value: function(e, t, i) {
                            var a = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3]
                                , s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : null;
                            h.default.sendWup(e, t, i, a, s)
                        }
                    }, {
                        key: "sendYY",
                        value: function(e, t) {
                            var i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
                            h.default.sendYY(e, t, r.default.uuid, i, !0)
                        }
                    }, {
                        key: "reGetProxy",
                        value: function() {
                            u.default.log("ProxyLink.reGetProxy", this.streamName, this.codecType, this.cdnBrand),
                                this.getProxy(this.streamName, this.codecType, this.cdnBrand)
                        }
                    }, {
                        key: "getProxy",
                        value: function(e, t) {
                            var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0;
                            if (this.streamName = e,
                                this.codecType = t,
                                this.cdnBrand = i,
                                h.default.connected) {
                                this._retryTimer && (clearTimeout(this._retryTimer),
                                    this._retryTimer = 0),
                                t > 0 && t % 100 == 0 && (t = t <= 8e3 ? t / 100 + 400 | 0 : t / 100 + 1e3 | 0);
                                var a = new c.default;
                                a.streamName = e + "",
                                    a.codecType = t,
                                    a.cdnBrand = i;
                                var s = new p.default;
                                s.uid = r.default.getUid(),
                                    s.version = 1,
                                    s.sdkVersion = 1,
                                    s.appid = r.default.appid,
                                    s.clientAppid = 0,
                                    s.clientType = 8,
                                    s.sendTime = .001 * Date.now() >> 0,
                                    s.cdnGroupIdList = [a],
                                    this._sendTime = s.sendTime,
                                    r.default.reqVpTime = l.default.now(),
                                    this.sendYY(s, this._rspProxy.bind(this))
                            } else
                                this._delayGetProxy = !0
                        }
                    }, {
                        key: "_rspProxy",
                        value: function(e) {
                            if (this.cdnMgr.started && e.sendTime == this._sendTime) {
                                if (r.default.getVPTime = l.default.now(),
                                    u.default.log("%c[TIME] getVPTime=" + (r.default.getVPTime - r.default.reqVpTime) + " totalTime=" + (r.default.getVPTime - r.default.startTime), "color:#A23400;background:#FFF5C2"),
                                0 != e.result) {
                                    var t = "UNKNOWN ERROR!";
                                    if (1 == e.result ? t = "EGetVP_NO_RESOURCE" : 2 == e.result && (t = "EGetVP_FUZZY_NO_MATCH"),
                                        u.default.warn("Proxylink", t, e),
                                    1 == e.retryType)
                                        this.H5Player.trigger(f.default.NO_VIDEO);
                                    else {
                                        var i = this;
                                        this._retryTimer = setTimeout(function() {
                                            u.default.log("Proxylink retry getProxy"),
                                                i.getProxy(i.streamName, i.codecType, i.cdnBrand)
                                        }, 1e3 * e.retryFreq)
                                    }
                                }
                                r.default.videoLink.connect(e)
                            }
                        }
                    }, {
                        key: "onCheckTimer",
                        value: function(e, t) {
                            t % 10 == 0 && this.getCdnTokenExReq(e)
                        }
                    }, {
                        key: "updateAnticode",
                        value: function(e, t) {
                            var i = this.cdnTokenReq || new d.default.GetCdnTokenExReq;
                            i.sFlvUrl = e,
                                i.sStreamName = t,
                                this.cdnTokenReq = i,
                                this.lastTokenTime = 0,
                            h.default.connected && (h.default.addListener("getCdnTokenInfoEx", this.bindGetCdnTokenExRsp),
                                this.getCdnTokenExReq(l.default.now()))
                        }
                    }, {
                        key: "getCdnTokenExReq",
                        value: function(e) {
                            this.cdnTokenReq && (this.lastTokenTime > 0 && e - this.lastTokenTime < 24e4 || (this.lastTokenTime = e,
                                this.cdnTokenExRequestId = Math.floor(1e5 * Math.random()) + 1,
                                h.default.sendWup("liveui", "getCdnTokenInfoEx", this.cdnTokenReq, null, null, this.cdnTokenExRequestId)))
                        }
                    }, {
                        key: "onGetCdnTokenExRsp",
                        value: function(e) {
                            if (null != e.iRequestId && e.iRequestId == this.cdnTokenExRequestId) {
                                this.cdnTokenExRequestId = -1,
                                    r.default.sFlvToken = e.sFlvToken;
                                var t = "ProxyLink.onGetCdnTokenExRsp"
                                    , i = e.sFlvToken.match(/wsTime=(.+?)($|\&)/);
                                if (i) {
                                    var a = 1e3 * parseInt(i[1], 16)
                                        , s = l.default.getDateTimeStr(a, !1);
                                    t += "\n【wsTime】" + i[1] + " => " + s
                                }
                                t += "\n" + r.default.sFlvToken,
                                this.cdnTokenReq && (t += "\nsFlvUrl: " + this.cdnTokenReq.sFlvUrl + "\nsStreamName: " + this.cdnTokenReq.sStreamName),
                                    u.default.log(t)
                            }
                        }
                    }]),
                        e
                }();
                t.default = v
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                function s(e) {
                    return "color:" + e + ";font-weight:900"
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var n = a(i(0))
                    , r = a(i(1))
                    , u = a(i(9))
                    , o = a(i(3))
                    , l = a(i(34))
                    , d = a(i(2))
                    , h = a(i(52))
                    , f = a(i(33))
                    , c = a(i(11))
                    , p = a(i(5))
                    , v = a(i(8))
                    , m = (a(i(18)),
                    a(i(93)),
                    a(i(15)))
                    , y = (a(i(64)),
                    a(i(117)))
                    , _ = a(i(121))
                    , S = a(i(114))
                    , g = a(i(122))
                    , T = a(i(13))
                    , P = a(i(10));
                i(20);
                var I = function() {
                    function e(t) {
                        (0,
                            n.default)(this, e),
                            this.cdnMgr = t,
                            this.vps = null,
                            this.link = new h.default(this),
                            this.printProtocol = !!Number(localStorage._printProtocol),
                            this.started = !1,
                            this.proxys = null,
                            this.token = "",
                            this.connectedTime = 0,
                            this.lastGetProxyTime = 0,
                            this.pingCnt = 0,
                            this.pingLastStamp = 0,
                            this.wsUrl = "",
                            this.rttCalc = new m.default(12),
                            this.rttMax = 0,
                            this.rttNow = 0,
                            this.pingPkg = new g.default,
                            this.debugUriList = [],
                            this.debugUriTsList = []
                    }
                    return (0,
                        r.default)(e, [{
                        key: "destroy",
                        value: function() {
                            this.link.destroy(),
                                this.link = null
                        }
                    }, {
                        key: "close",
                        value: function() {
                            this.started && (this.logout(),
                                o.default.info("VideoLink.close"),
                                this.started = !1,
                                this.reset())
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            o.default.log("VideoLink.reset"),
                                this.vps = null,
                                this.link.destroy(),
                                this.link = new h.default(this),
                                this.lastGetProxyTime = 0,
                                this.pingCnt = 0,
                                this.proxys = null,
                                this.token = "",
                                this.connectedTime = 0,
                                this.rttMax = 0,
                                this.rttCalc = new m.default(12),
                                this.debugUriList = [],
                                this.debugUriTsList = [],
                                c.default.remove(this.onCheckTimer, this)
                        }
                    }, {
                        key: "forceConnect",
                        value: function(e) {
                            var t = this.vps;
                            this.reset(),
                                t ? (c.default.add(this.onCheckTimer, this, 1e3),
                                    this.vps = t,
                                    this.proxys = e,
                                    this.reconnect()) : this.getProxy()
                        }
                    }, {
                        key: "connect",
                        value: function(e) {
                            c.default.add(this.onCheckTimer, this, 1e3),
                                this.vps = e,
                                u.default.userArea = e.userArea,
                                u.default.sslUrl = e.sslUrl || "";
                            var t = [];
                            if (e.allocatedStreams.forEach(function(e) {
                                t = t.concat(e)
                            }),
                            0 !== t.length) {
                                this.lastGetProxyTime = p.default.now() - 3e3,
                                    this.link.destroy(),
                                    this.link = new h.default(this);
                                var i = null;
                                if (t.forEach(function(e) {
                                    u.default.streamId || (u.default.streamId = e.streamId),
                                        o.default.info("VideoLink.connect streamName=" + u.default.streamId.text()),
                                    !i && e && (i = e.videoProxyInfos.slice()),
                                        this.token = e.token,
                                        u.default.streamSeqSN = e.streamSeqSN,
                                        u.default.quickAccessBeginIndex = e.quickAccessBeginIndex,
                                        u.default.quickAccessEndIndex = e.quickAccessEndIndex,
                                        u.default.exip = e.ip,
                                        u.default.urlTokenTime = e.urlTokenTime,
                                        u.default.urlToken = e.urlToken,
                                        u.default.wsTime = u.default.urlTokenTime.toString(16).toLowerCase(),
                                        o.default.info("streamSeqSN=" + u.default.streamSeqSN + " quickAccess=" + u.default.quickAccessBeginIndex + "," + u.default.quickAccessEndIndex + " ip=" + u.default.exip + " urlToken=" + u.default.urlToken + " urlTokenTime=" + u.default.urlTokenTime)
                                }
                                    .bind(this)),
                                u.default.exip > 0 && this.cdnMgr.loadFullStream("vp"),
                                !i || 0 != i.length)
                                    return this.proxys = i,
                                        this.started = !0,
                                        this.pingCnt = 0,
                                        this.reconnect(),
                                        this.wsUrl.replace(/ws+?:\/\//g, "");
                                o.default.warn("VideoLink.connect NO STREAM!")
                            } else
                                o.default.warn("VideoLink.connect proxys is empty")
                        }
                    }, {
                        key: "reconnect",
                        value: function() {
                            if (this.started)
                                if (this.proxys && 0 != this.proxys.length) {
                                    var e = this.proxys.shift();
                                    T.default.proxyIp = e.ip,
                                        this.isWss(e) ? this.connectWss(e) : this.connectWs(e)
                                } else
                                    this.getProxy()
                        }
                    }, {
                        key: "isWss",
                        value: function(e) {
                            return !(!u.default.sslUrl || !e.videoProxyInfo.has(8)) && e.videoProxyInfo.get(8) > 0
                        }
                    }, {
                        key: "connectWs",
                        value: function(e) {
                            var t = Math.floor(Math.random() * e.tcpPorts.length)
                                , i = t;
                            if (465 === e.tcpPorts[t] && (++t >= e.tcpPorts.length && (t = 0),
                            t === i))
                                return o.default.warn("VideoLink.connect has no correct ports"),
                                    void this.reconnect();
                            this.wsUrl = "ws://" + e.ip + ":" + e.tcpPorts[t],
                                o.default.info("%cconnecting video " + this.wsUrl, s("#0000E3")),
                                localStorage._setWssUrl ? this.link.connect(localStorage._setWssUrl) : this.link.connect(this.wsUrl)
                        }
                    }, {
                        key: "connectWss",
                        value: function(e) {
                            var t = e.videoProxyInfo.get(8)
                                , i = [t >> 16, 65535 & t]
                                , a = i[Math.floor(Math.random() * i.length)]
                                , n = v.default.ip2uint(e.ip);
                            this.wsUrl = "wss://" + n + u.default.sslUrl + ":" + a,
                                o.default.info("%cconnecting video " + this.wsUrl, s("#0000E3")),
                                T.default.cdnpip = n,
                                localStorage._setWssUrl ? this.link.connect(localStorage._setWssUrl) : this.link.connect(this.wsUrl)
                        }
                    }, {
                        key: "send",
                        value: function(e) {
                            if (!e || !this.connected)
                                return !1;
                            var t = e.constructor.name;
                            return this.printProtocol && !E[t] && o.default.debug("%c>>>>> " + t, s("#009100"), e),
                                "Uint8Array" != t ? this.link.send(e.marshall()) : this.link.send(e),
                                !0
                        }
                    }, {
                        key: "getProxy",
                        value: function() {
                            var e = p.default.now();
                            e - this.lastGetProxyTime < 5e3 || (o.default.log("VideoLink.getProxy lastGetProxyTime=" + this.lastGetProxyTime + " now=" + e),
                                this.reset(),
                                this.lastGetProxyTime = e,
                                u.default.proxyLink.reGetProxy())
                        }
                    }, {
                        key: "onopen",
                        value: function() {
                            o.default.log("VideoLink.onopen");
                            var e = p.default.now();
                            this.connectedTime = e,
                                u.default.connectVpTime = e,
                                u.default.cdnpConnected = 1,
                                u.default.addListener(d.default.PCdnProxyPingRes, this.onVideoProxyPingRes, this),
                                u.default.addListener(d.default.PCdnP2PUserRegisterRes, this.onLoginVideoProxy, this, 9),
                                this.login()
                        }
                    }, {
                        key: "onclose",
                        value: function() {
                            o.default.log("%cVideoLink.onclose", "color:white;background:black;"),
                                this.connectedTime = 0,
                                this.reconnect()
                        }
                    }, {
                        key: "onerror",
                        value: function(e) {
                            o.default.warn("VideoLink.onerror", e),
                                this.reconnect()
                        }
                    }, {
                        key: "onData",
                        value: function(e, t, a) {
                            var n = new f.default(t)
                                , r = d.default[e]
                                , l = n
                                , h = null;
                            try {
                                h = i(94)("./" + r).default
                            } catch (t) {
                                o.default.warn("%c[x] Unmatched protocol " + (e >> 8) + " " + r, "color:red;background:#FFF0F0")
                            }
                            h && (void 0 == (l = new h).unmarshall ? o.default.error("[x]" + r + ".unmarshall undefined!") : (l.unmarshall(n),
                            void 0 != a && (l.seq = a))),
                            this.printProtocol && !E[r] && o.default.debug("%c<<<<< " + r, s("#0000E3"), l),
                                u.default._onYYData(e, l)
                        }
                    }, {
                        key: "onCheckTimer",
                        value: function(e, t) {
                            this.started && (this.onPingTimer(e, t),
                                this.onCheckConnect(e, t))
                        }
                    }, {
                        key: "onCheckConnect",
                        value: function(e, t) {
                            this.connected || t % 3 == 0 && this.reconnect()
                        }
                    }, {
                        key: "onPingTimer",
                        value: function(e, t) {
                            if (this.link.connected && t % 3 == 0)
                                if (this.pingCnt >= 4)
                                    o.default.warn("VideoLink.onPingTimer ping time out");
                                else {
                                    this.pingCnt++,
                                        this.pingLastStamp = e;
                                    var i = this.pingPkg;
                                    i.appid = u.default.appid,
                                        i.uid = u.default.getUid(),
                                        i.sid = u.default.subSid,
                                        i.stampc = e,
                                        i.loginStamp = 0,
                                        i.cdnLineType = u.default.lineType,
                                        u.default.p2pMgr ? (i.uplinkBw = u.default.p2pMgr.getUplinkBw(),
                                            i.availPeers = u.default.p2pMgr.getAvailPeers(),
                                            i.bPunched = u.default.p2pMgr.getBPunched()) : (i.uplinkBw = 0,
                                            i.availPeers = 0,
                                            i.bPunched = !1),
                                        this.send(i)
                                }
                        }
                    }, {
                        key: "onVideoProxyPingRes",
                        value: function(e) {
                            this.pingCnt = 0,
                                this.pingLastStamp = 0,
                                T.default.csMinBw = e.csMinBw,
                                T.default.remainP2pStreamNum = e.remainP2pStreamNum,
                                T.default.SNBw = e.SNBw,
                                u.default.videoNtp.ntpProcess(e.stampc, e.stamps);
                            var t = p.default.now()
                                , i = t - e.stampc >> 1;
                            l.default.addRtt(i),
                                this.rttNow = parseInt((this.rttNow * Number(u.default.extendConfig.p2pConfig.coefficient) + i) / (Number(u.default.extendConfig.p2pConfig.coefficient) + 1)),
                                u.default.stampcSvr = e.stampcSvr + 2 * this.rttNow - i,
                                u.default.stampcNow = t,
                            i < 6e5 && this.onRtt(i)
                        }
                    }, {
                        key: "checkQuickAccess",
                        value: function() {
                            if (0 == u.default.streamSeqSN || 0 == u.default.exip) {
                                var e = new S.default;
                                e.uid = u.default.getUid(),
                                    e.cdnGroupId = u.default.streamId,
                                    e.sendTime = p.default.now(),
                                    u.default.sendYY(e, this.onQuickAccessInfo.bind(this))
                            }
                        }
                    }, {
                        key: "onQuickAccessInfo",
                        value: function(e) {
                            u.default.streamSeqSN = e.streamSeqSN,
                                u.default.quickAccessBeginIndex = e.quickAccessBeginIndex,
                                u.default.quickAccessEndIndex = e.quickAccessEndIndex,
                                u.default.exip = e.ip,
                                u.default.urlTokenTime = e.urlTokenTime,
                                u.default.urlToken = e.urlToken,
                                u.default.wsTime = u.default.urlTokenTime.toString(16).toLowerCase(),
                                o.default.info("streamSeqSN=" + u.default.streamSeqSN + " quickAccess=" + u.default.quickAccessBeginIndex + "," + u.default.quickAccessEndIndex + " ip=" + u.default.exip + " urlToken=" + u.default.urlToken + " urlTokenTime=" + u.default.urlTokenTime)
                        }
                    }, {
                        key: "login",
                        value: function() {
                            var e = new y.default;
                            e.cdnGroupId = u.default.streamId,
                                e.uid = u.default.getUid(),
                                e.clientType = 1,
                                e.tcpId = 0,
                                e.localIps = [],
                                e.localPort = 0,
                                e.token = this.token,
                                e.tokenVersion = this.vps.tokenVersion,
                                e.version = T.default.version + "",
                                e.cdnLineType = u.default.lineType,
                                e.fixedCdnStreamCount = P.default.PROXY_NUM,
                                e.sourceCodecRate = 1e3 * u.default.curBitRate,
                                e.maxCdnStreamCount = u.default.BASE_SUBS,
                                T.default.firstLogin ? e.clearSubscribeInfo = 1 : e.clearSubscribeInfo = 0,
                                this.send(e)
                        }
                    }, {
                        key: "logout",
                        value: function() {
                            var e = new _.default;
                            e.cdnGroupId = u.default.streamId,
                                e.uid = u.default.getUid(),
                                e.clientType = 1,
                                e.tcpId = 0,
                                e.clientType = u.default.lineType,
                                this.send(e)
                        }
                    }, {
                        key: "initStream",
                        value: function() {
                            T.default.firstLogin || this.cdnMgr.cdnpReconnect(),
                                T.default.firstLogin = !1
                        }
                    }, {
                        key: "onLoginVideoProxy",
                        value: function(e) {
                            u.default.wanIp = v.default.inet_ntoa(e.wanIp),
                                u.default.wanPort = e.wanPort,
                                o.default.log("VideoLink.onLogin " + u.default.wanIp + ":" + u.default.wanPort),
                                u.default.loginTime = p.default.now(),
                                T.default.enableFeatures = e.enableFeatures,
                                T.default.stunProts = e.stunProts.slice(),
                                this.initStream(),
                                u.default.printVpTime(),
                            e.ret > 0 && o.default.warn("VideoLink.onLoginVideoProxy login failed. ret=" + e.ret)
                        }
                    }, {
                        key: "getVideoConnectedDuration",
                        value: function() {
                            return this.link.connected ? p.default.now() - this.connectedTime : 0
                        }
                    }, {
                        key: "avgRtt",
                        value: function() {
                            var e = this.rttCalc.average();
                            return e === v.default.UintMax ? 0 : e
                        }
                    }, {
                        key: "getRttSamples",
                        value: function() {
                            var e = this.rttCalc.getSamples();
                            return 0 != this.pingLastStamp && e.push(p.default.now() - this.pingLastStamp),
                                e
                        }
                    }, {
                        key: "getRttSampleMax",
                        value: function() {
                            var e = this.getRttSamples()
                                , t = 0;
                            if (e)
                                for (var i = e.length, a = 0; a < i; a++)
                                    e[a] > t && (t = e[a]);
                            return t
                        }
                    }, {
                        key: "getMaxRtt",
                        value: function() {
                            var e = this.rttMax;
                            return this.rttMax = 0,
                                e
                        }
                    }, {
                        key: "onRtt",
                        value: function(e) {
                            this.rttCalc.add(e),
                            e > this.rttMax && (this.rttMax = e)
                        }
                    }, {
                        key: "connected",
                        get: function() {
                            return this.link && this.link.connected
                        }
                    }]),
                        e
                }();
                t.default = I;
                var E = {
                    PCdnProxyPing: 1,
                    PCdnProxyPingRes: 1,
                    PP2pSliceAudioData: 1,
                    PP2pSliceVideoData: 1,
                    PP2pSliceControlData: 1,
                    PCdnP2pGetNode: 1,
                    PCdnP2pGetNodeRes: 1,
                    P2POffer: 1,
                    P2PAnswer: 1,
                    P2PCandidate: 1,
                    P2POfferReject: 1,
                    P2PRequestOffer: 1,
                    PCdnP2PWSForward: 1,
                    PCdnP2PWSForwardReject: 1,
                    PCdnP2pReportLog: 1,
                    PCDNSubscribeReq: 1,
                    PCDNSubscribeRes: 1,
                    PCDNCompeteSubscribeReq: 1,
                    PCDNCompeteSubscribeRes: 1
                }
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(71))
                    , n = a(i(43))
                    , r = a(i(0))
                    , u = a(i(1))
                    , o = a(i(9))
                    , l = a(i(11))
                    , d = a(i(5))
                    , h = a(i(3))
                    , f = (a(i(2)),
                    a(i(53)))
                    , c = a(i(16))
                    , p = (a(i(74)),
                    a(i(10)))
                    , v = a(i(13))
                    , m = a(i(207))
                    , y = function() {
                    function e(t) {
                        (0,
                            r.default)(this, e),
                            this.cdnMgr = t,
                            this.p2pUrl = null,
                            this.suffix = "slice",
                            this.streamName = "",
                            this.isInited = !1,
                            this.rangeSeq = 0,
                            this.rangeStamp = 0,
                            this.seqList = [],
                            this.lastResendList = [],
                            this.openWss = !1,
                            this.delayFullLoader = null,
                            this.delaySubLoader = null
                    }
                    return (0,
                        u.default)(e, [{
                        key: "init",
                        value: function() {
                            if (!o.default.isStartFromUrl) {
                                if (!this.p2pUrl)
                                    return void h.default.error("LoaderMgr.init p2pUrl can't be null");
                                if (null == o.default.streamId)
                                    return void h.default.error("LoaderMgr.init streamId can't be null");
                                "/" == this.p2pUrl.substr(-1) && (this.p2pUrl = this.p2pUrl.substr(0, this.p2pUrl.length - 1)),
                                    this.p2pUrl = this.p2pUrl.replace(/^(http|ws)s?\:/i, ""),
                                    this.streamName = o.default.streamId.text();
                                var e = !1;
                                if (-1 == self.location.protocol.indexOf("https")) {
                                    var t = o.default.extendConfig.p2pWssLines;
                                    "string" == typeof t && (e = "all" == (t = t.toLowerCase()) || -1 != t.split(",").indexOf(o.default.lineType.toString()))
                                } else
                                    e = !0;
                                void 0 === localStorage._testSSL ? this.openWss = e : this.openWss = Number(localStorage._testSSL) > 0
                            }
                            var i = this.cdnMgr;
                            this.fullLoader = new f.default(i,f.default.TYPE_FULL),
                                this.subLoader = new f.default(i,f.default.TYPE_SUB),
                                this.forceSubLoader = new f.default(i,f.default.TYPE_SUB),
                                this.forceSubLoader.isForceSubLoader = !0,
                                this.patchSubLoader = new f.default(i,f.default.TYPE_PATCH),
                                this.rangeLoader = new f.default(i,f.default.TYPE_RANGE),
                                this.rangeLoader.onRangeLoaded = this._onRangeLoaded.bind(this),
                                this.rangeLoader.onRangeError = this._onRangeError.bind(this),
                                this.isInited = !0
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            h.default.log("LoaderMgr.reset"),
                                l.default.remove(this._onRangeTimeout, this),
                            this.isInited && (this.fullLoader.close(),
                                this.subLoader.close(),
                                this.forceSubLoader.close(),
                                this.patchSubLoader.close(),
                                this.rangeLoader.close()),
                                this.delayDestroy(),
                                m.default.close(),
                                this.seqList = [],
                                this.lastResendList = [],
                                this.isInited = !1,
                                this.rangeStamp = 0,
                                this.openWss = !1
                        }
                    }, {
                        key: "getUrl",
                        value: function(e) {
                            var t = e == f.default.TYPE_RANGE || e == f.default.TYPE_FULL ? "http" : "ws";
                            t = this.changeLineUrl(e, t),
                            this.openWss && (t += "s");
                            var i = "";
                            return 3 == o.default.lineType && e != f.default.TYPE_RANGE && e != f.default.TYPE_FULL && (i = "/websocket"),
                                this.url = t + ":" + this.p2pUrl + i + "/" + this.streamName + "." + this.suffix + "?" + o.default.sFlvToken + "&ex1=" + o.default.exip + "&baseIndex=",
                                this.url
                        }
                    }, {
                        key: "changeLineUrl",
                        value: function(e, t) {
                            o.default.isHttp2() && 1 == o.default.lineType && (t = "http",
                                this.p2pUrl = this.p2pUrl.replace("ws.p2p.huya.com", "ws-test.p2p.huya.com"));
                            var i = void 0
                                , a = o.default.extendConfig.p2pConfig.swapdomain && o.default.extendConfig.p2pConfig.swapdomain.hasOwnProperty("line_" + o.default.lineType) ? o.default.extendConfig.p2pConfig.swapdomain["line_" + o.default.lineType] : [];
                            return a && a.length > 3 && e == f.default.TYPE_SUB ? (i = new RegExp(a[2],"g"),
                                this.p2pUrl = this.p2pUrl.replace(i, a[3])) : a && a.length > 1 && (i = new RegExp(a[0],"g"),
                                this.p2pUrl = this.p2pUrl.replace(i, a[1])),
                                t
                        }
                    }, {
                        key: "getSpeed",
                        value: function() {
                            var e = 0;
                            return this.fullLoader.connected ? e = this.fullLoader.speed : (this.subLoader.connected && (e += this.subLoader.speed),
                            this.forceSubLoader.connected && (e += this.forceSubLoader.speed)),
                                e
                        }
                    }, {
                        key: "loadFullStream",
                        value: function(e) {
                            if (this.isInited) {
                                var t = "";
                                isNaN(e) ? (h.default.error("LoaderMgr.loadSubStream baseIndex isNaN [" + e + "] change to 0."),
                                    e = 0) : 0 == e && o.default.quickTime > 0 && (t = "&quickTime=" + o.default.quickTime),
                                    this.stopSubStream(),
                                    this.stopForceSubStream(),
                                    this.stopPatchSubStream();
                                var i = this.getUrl(f.default.TYPE_FULL) + e + t;
                                this.fullLoader.connect(i, o.default.lineType),
                                    this.cdnMgr.qaStat.setHttpHead(i)
                            } else
                                h.default.error("LoaderMgr.loadFullStream not init")
                        }
                    }, {
                        key: "stopFullStream",
                        value: function(e) {
                            this.fullLoader.close()
                        }
                    }, {
                        key: "loadForceSubStream",
                        value: function(e) {
                            if (!this.forceSubLoader.started) {
                                var t = v.default.forceArr.slice().join(",")
                                    , i = this.getUrl(f.default.TYPE_SUB) + e;
                                i += "&baseSubs=" + o.default.BASE_SUBS + "&sub=" + t,
                                    this.forceSubLoader.connect(i, o.default.lineType, {
                                        subs: t
                                    })
                            }
                        }
                    }, {
                        key: "stopForceSubStream",
                        value: function() {
                            this.forceSubLoader.close()
                        }
                    }, {
                        key: "loadSubStream",
                        value: function(e, t) {
                            if (t = t.slice(),
                                m.default.isTurnOn())
                                this.loadSubStreamMultiLink(e, t);
                            else if (this.isInited) {
                                if (isNaN(e) && (h.default.error("LoaderMgr.loadSubStream baseIndex isNaN [" + e + "] change to 0."),
                                    e = 0),
                                this.subLoader.connected && this.subLoader.close(),
                                    this.stopFullStream(!1),
                                    this.stopSubStream(!1),
                                    h.default.groupEnd(),
                                Number(o.default.extendConfig.forceSubLoader) && v.default.forceArr.length > 0) {
                                    this.loadForceSubStream(e);
                                    for (var i = v.default.forceArr, a = t.length - 1; a >= 0; a--) {
                                        var s = t[a];
                                        -1 != i.indexOf(s) && t.splice(a, 1)
                                    }
                                }
                                if (t.length > 0) {
                                    var n = t.join(",")
                                        , r = this.getUrl(f.default.TYPE_SUB) + e;
                                    r += "&baseSubs=" + o.default.BASE_SUBS + "&sub=" + n,
                                        this.subLoader.connect(r, o.default.lineType, {
                                            subs: n
                                        })
                                } else
                                    this.subLoader.close()
                            } else
                                h.default.error("LoaderMgr.loadSubStream not init")
                        }
                    }, {
                        key: "stopSubStream",
                        value: function(e) {
                            m.default.isTurnOn() ? this.stopSubStreamMultiLink(e) : (e = !0) ? this.subLoader.close() : (this.delayDestroy(),
                                this.delaySubLoader = this.subLoader,
                                this.delaySubLoader.isDelayCloseLoader = !0,
                                this.subLoader = new f.default(this.cdnMgr,f.default.TYPE_SUB))
                        }
                    }, {
                        key: "loadPatchSubStream",
                        value: function(e, t, i) {
                            if (!o.default.isStartFromUrl)
                                if (this.isInited)
                                    if (e = Number(e) || 0,
                                        t = Number(t) || 0,
                                        i = i.slice(),
                                    e <= 0 || 0 == i.length)
                                        h.default.error("LoaderMgr.loadPatchSubStream argument error, baseSubs=" + e + ", subs=" + (0,
                                            n.default)(i));
                                    else {
                                        this.patchSubLoader.connected && this.patchSubLoader.close();
                                        var a = i.join(",")
                                            , s = this.getUrl(f.default.TYPE_PATCH) + t;
                                        s += "&baseSubs=" + e + "&sub=" + a,
                                            this.patchSubLoader.connect(s, o.default.lineType, {
                                                baseSubs: e,
                                                subs: a
                                            })
                                    }
                                else
                                    h.default.error("LoaderMgr.loadPatchSubStream not init")
                        }
                    }, {
                        key: "stopPatchSubStream",
                        value: function() {
                            this.patchSubLoader.close()
                        }
                    }, {
                        key: "loadSubStreamMultiLink",
                        value: function(e, t) {
                            this.isInited ? (h.default.log("LoaderMgr.loadSubStreamMultiLink"),
                            isNaN(e) && (h.default.error("LoaderMgr.loadSubStreamMultiLink baseIndex isNaN [" + e + "] change to 0."),
                                e = 0),
                                m.default.loadSubStream(e, t),
                                this.stopFullStream(!1)) : h.default.error("LoaderMgr.loadSubStreamMultiLink not init")
                        }
                    }, {
                        key: "stopSubStreamMultiLink",
                        value: function(e) {
                            h.default.log("LoaderMgr.stopSubStreamMultiLink"),
                                m.default.stopSubStream(e)
                        }
                    }, {
                        key: "loadRangeStream",
                        value: function() {
                            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0;
                            if (this.isInited) {
                                if (e) {
                                    if (0 == e.length)
                                        return;
                                    this.seqList.length > 0 && this.seqList != e ? this.seqList = this.seqList.concat(e) : this.seqList = e
                                }
                                if (this.rangeLoader.isConnectTimeout || this.rangeLoader.isResponseTimeout) {
                                    var t = this.rangeLoader.isConnectTimeout ? "connection" : "response";
                                    h.default.warn("LoaderMgr.loadRangeStream " + t + " timeout.\n" + this.rangeLoader.url),
                                        this.rangeLoader.reportTimeout(t),
                                        this.rangeLoader.close()
                                }
                                if (this.rangeLoader.connected || this.rangeLoader.connecting)
                                    return h.default.info("LoaderMgr.loadRangeStream rangeLoader is loading, waiting SeqNum=" + this.seqList.length),
                                        void (this.seqList.length > 2e3 && this.cdnMgr.restart(p.default.restartReason.RANGE_SEQ_MAX));
                                var i = this.seqList.length
                                    , a = this.cdnMgr.resender;
                                if (this.seqList.length > 0 && a.reduceSeqs(this.seqList),
                                    i == this.seqList.length ? i = 0 : i -= this.seqList.length,
                                0 == this.seqList.length)
                                    return h.default.log("LoaderMgr.loadRangeStream nothing to load. reduceCnt=" + i),
                                        void this._onRangeLoaded("");
                                var n = this.getWsRange(this.seqList)
                                    , r = (0,
                                    s.default)(n, 3)
                                    , u = r[0]
                                    , c = r[1]
                                    , v = r[2];
                                this.seqList = v;
                                var m = c.length;
                                if (0 != m) {
                                    var y = this.seqList.length;
                                    this.lastResendList = c,
                                        a.resendStat(c),
                                        this.rangeSeq++,
                                        this.rangeStamp = d.default.now();
                                    var _ = {
                                        resendCnt: m,
                                        waitCnt: y,
                                        reduceCnt: i,
                                        maxCdnSeq: this.cdnMgr.resender.globalCdnMaxSeq
                                    }
                                        , S = this.getUrl(f.default.TYPE_RANGE) + u;
                                    this.rangeLoader.connect(S, o.default.lineType, _),
                                        l.default.once(this._onRangeTimeout, this, 4e3)
                                }
                            } else
                                h.default.error("LoaderMgr.loadRangeStream not init")
                        }
                    }, {
                        key: "stopRangeStream",
                        value: function() {
                            this.rangeLoader.close()
                        }
                    }, {
                        key: "_onRangeTimeout",
                        value: function() {
                            h.default.warn("LoaderMgr.onRangeTimeout"),
                                this.cdnMgr.resender.resendTimeoutCnt++,
                                this.cdnMgr.resender.onResendRetry(this.lastResendList),
                            this.seqList.length > 0 && this.loadRangeStream()
                        }
                    }, {
                        key: "_onRangeLoaded",
                        value: function(e) {
                            l.default.remove(this._onRangeTimeout, this);
                            var t = d.default.now();
                            this.rangeStamp > 0 && t - this.rangeStamp > 1e3 && (this.rangeStamp = 0),
                                this.cdnMgr.resender.onResendRetry(this.lastResendList, 0),
                                this.lastResendList = [],
                            this.seqList.length > 0 && this.loadRangeStream()
                        }
                    }, {
                        key: "_onRangeError",
                        value: function(e, t) {
                            1e4 === t && c.default.add(c.default.keys.RESEND_FETCH_ERROR, 1),
                                l.default.remove(this._onRangeTimeout, this),
                                h.default.warn("LoaderMgr.onRangeError httpCode=" + t),
                                this.cdnMgr.resender.resendErrorTimes++,
                                this.cdnMgr.resender.onResendRetry(this.lastResendList),
                            this.seqList.length > 0 && this.loadRangeStream()
                        }
                    }, {
                        key: "getWsRange",
                        value: function(e) {
                            d.default.now();
                            var t = 0
                                , i = [];
                            if (0 == e.length)
                                return h.default.warn("LoaderMgr.getWsRange seqList is empty."),
                                    ["0", [], i];
                            if (1 == e.length)
                                return [(t = e[0]) + "&wsRange=0", [t], i];
                            e.sort(function(e, t) {
                                return e - t
                            });
                            for (var a = [t = e.shift()], s = 1, n = 0, r = !1, u = t + "&wsRange=0", o = 0, l = e.length; o < l; o++) {
                                var f = e[o] - t;
                                if (f != n) {
                                    if (s + 1 > 128) {
                                        i = e.slice(o);
                                        break
                                    }
                                    s++,
                                        a.push(e[o]),
                                        f - n == 1 ? r = !0 : r ? (u += "-" + n + "," + f,
                                            r = !1) : u += "," + f,
                                        n = f
                                }
                            }
                            return r && (u += "-" + n),
                                [u, a, i]
                        }
                    }, {
                        key: "delayDestroy",
                        value: function() {}
                    }]),
                        e
                }();
                t.default = y
            }
            , function(e, t, i) {
                e.exports = {
                    default: i(279),
                    __esModule: !0
                }
            }
            , function(e, t, i) {
                i(45),
                    i(36),
                    e.exports = i(280)
            }
            , function(e, t, i) {
                var a = i(91)
                    , s = i(19)("iterator")
                    , n = i(39);
                e.exports = i(17).isIterable = function(e) {
                    var t = Object(e);
                    return void 0 !== t[s] || "@@iterator"in t || n.hasOwnProperty(a(t))
                }
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(10))
                    , u = a(i(204))
                    , o = a(i(15))
                    , l = a(i(9))
                    , d = function() {
                    function e(t) {
                        (0,
                            s.default)(this, e),
                            this.uid = t,
                            this.subMinBw = -1,
                            this.remainUplinkNum = 0,
                            this.subNum = 0,
                            this.curSubNum = 0,
                            this.rttNow = r.default.DEFAULT_DELAY,
                            this.sendCntCalc = new o.default(10),
                            this.recvCntCalc = new o.default(10)
                    }
                    return (0,
                        n.default)(e, [{
                        key: "isSubMax",
                        value: function() {
                            return this.subNum + this.curSubNum >= r.default.MAX_PULL_NUM
                        }
                    }, {
                        key: "getRtt",
                        value: function() {
                            return this.rttNow
                        }
                    }, {
                        key: "addRtt",
                        value: function(e) {
                            this.rttNow === r.default.DEFAULT_DELAY ? this.rttNow = e : this.rttNow = (this.rttNow * Number(l.default.extendConfig.p2pConfig.coefficient) + e) / (Number(l.default.extendConfig.p2pConfig.coefficient) + 1)
                        }
                    }, {
                        key: "addSendRecv",
                        value: function(e, t) {
                            e < t && (e = t),
                                this.sendCntCalc.add(e),
                                this.recvCntCalc.add(t)
                        }
                    }, {
                        key: "getSendSum",
                        value: function() {
                            return this.sendCntCalc.sum
                        }
                    }, {
                        key: "getRecvSum",
                        value: function() {
                            return this.recvCntCalc.sum
                        }
                    }], [{
                        key: "cmpLossRate",
                        value: function(e, t) {
                            var i = u.default.calcRateScore(e.sendCntCalc.sum, e.recvCntCalc.sum)
                                , a = u.default.calcRateScore(t.sendCntCalc.sum, t.recvCntCalc.sum);
                            return u.default.cmpScore(i, a)
                        }
                    }, {
                        key: "cmpRtt",
                        value: function(e, t) {
                            var i = e.getRtt()
                                , a = t.getRtt();
                            return u.default.cmpScore(i, a)
                        }
                    }]),
                        e
                }();
                t.default = d
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(6))
                    , n = a(i(0))
                    , r = a(i(1))
                    , u = a(i(10));
                a(i(8)),
                    a(i(5));
                var o = function() {
                    function e(t) {
                        (0,
                            n.default)(this, e),
                            this.uid = t,
                            this.aliveStamp = 0,
                            this.streamMap = new s.default
                    }
                    return (0,
                        r.default)(e, [{
                        key: "add",
                        value: function(e, t, i) {
                            this.aliveStamp = i;
                            var a = new l;
                            a.status = t,
                                a.timeStamp = i,
                                this.streamMap.set(e, a)
                        }
                    }, {
                        key: "del",
                        value: function(e) {
                            this.streamMap.delete(e)
                        }
                    }, {
                        key: "has",
                        value: function(e) {
                            return this.streamMap.has(e)
                        }
                    }, {
                        key: "getStreamNum",
                        value: function() {
                            return this.streamMap.size
                        }
                    }, {
                        key: "isTimeOut",
                        value: function(e) {
                            return e - this.aliveStamp >= u.default.SUBSCRIBE_TIMEOUT
                        }
                    }]),
                        e
                }()
                    , l = function e() {
                    (0,
                        n.default)(this, e),
                        this.status = 0,
                        this.timeStamp = 0
                };
                t.default = o
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(6))
                    , n = a(i(0))
                    , r = a(i(1))
                    , u = a(i(9))
                    , o = a(i(21))
                    , l = a(i(2))
                    , d = a(i(101))
                    , h = a(i(10))
                    , f = a(i(16))
                    , c = a(i(284))
                    , p = a(i(285))
                    , v = a(i(286))
                    , m = function() {
                    function e(t) {
                        (0,
                            n.default)(this, e),
                            this.uid = t,
                            this.uplinkBw = 0,
                            this.rtt = 0,
                            this.sendCnt = 0,
                            this.recvCnt = 0,
                            this.peerSendCnt = 0,
                            this.peer = new c.default(this),
                            this.channel = new p.default(this),
                            this.ping = new v.default(this),
                            this.tryPunch = !1,
                            this.handlerMap = new s.default,
                            this.handlerMap.set(l.default.P2PNotifyNodeLeave, this.recvNotifyNodeLeave.bind(this))
                    }
                    return (0,
                        r.default)(e, [{
                        key: "isActive",
                        value: function() {
                            return this.peer._offerSended
                        }
                    }, {
                        key: "punched",
                        value: function() {
                            return this.channel.connected
                        }
                    }, {
                        key: "connect",
                        value: function() {
                            this.peer.connect()
                        }
                    }, {
                        key: "connectBack",
                        value: function() {
                            this.peer.connectBack()
                        }
                    }, {
                        key: "recvOffer",
                        value: function(e) {
                            this.peer.recvOffer(e)
                        }
                    }, {
                        key: "recvAnswer",
                        value: function(e) {
                            this.peer.recvAnswer(e)
                        }
                    }, {
                        key: "recvCandidate",
                        value: function(e) {
                            this.peer.recvCandidate(e)
                        }
                    }, {
                        key: "clear",
                        value: function() {
                            this.channel.clear(),
                                this.peer.clear()
                        }
                    }, {
                        key: "close",
                        value: function() {
                            this.channel.close(),
                                this.peer.close(),
                                this.uplinkBw = 0,
                                this.rtt = 0
                        }
                    }, {
                        key: "onCheckTimer",
                        value: function(e, t) {
                            this.punched() && this.ping.onCheckTimer(e, t),
                                this.peer.onCheckTimer(e, t)
                        }
                    }, {
                        key: "onChannelData",
                        value: function(e, t) {
                            this.handlerMap.has(e) && this.handlerMap.get(e)(t)
                        }
                    }, {
                        key: "sendNotifyLeaveNet",
                        value: function(e) {
                            var t = new d.default;
                            t.uid = u.default.getUid(),
                                t.reason = e,
                                this.channel.send(t, h.default.DataType.SIGNALLING)
                        }
                    }, {
                        key: "recvNotifyNodeLeave",
                        value: function(e) {
                            e.reason === h.default.LeaveReason.PING_DIF ? f.default.add(f.default.keys.LEAVE_PING_DIF, 1) : e.reason === h.default.LeaveReason.RESET && f.default.add(f.default.keys.LEAVE_RESET, 1),
                                o.default.delNode(this.uid, h.default.DEL_REASON.NODE_LEAVE)
                        }
                    }, {
                        key: "send",
                        value: function(e, t) {
                            this.channel.send(e, t)
                        }
                    }]),
                        e
                }();
                t.default = m
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(9))
                    , u = (a(i(3)),
                    a(i(21)))
                    , o = a(i(146))
                    , l = a(i(16))
                    , d = a(i(5))
                    , h = a(i(10))
                    , f = a(i(13))
                    , c = a(i(8))
                    , p = window.PeerConnection || window.webkitPeerConnection || window.webkitRTCPeerConnection || window.mozRTCPeerConnection
                    , v = window.mozRTCIceCandidate || window.RTCIceCandidate
                    , m = window.mozRTCSessionDescription || window.RTCSessionDescription
                    , y = function() {
                    function e(t) {
                        (0,
                            s.default)(this, e),
                            this._node = t,
                            this._offerSended = !1,
                            this._answerSended = !1,
                            this._hasIce = !1,
                            this._connectTime = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "_createPeer",
                        value: function() {
                            if (!this._peer) {
                                l.default.add(l.default.keys.TRY_PUNCH_NUM, 1);
                                var e = [3478, 3578, 3678, 3778, 3878, 3978]
                                    , t = {
                                    iceServers: [{
                                        urls: ["stun:stun.huya.com:" + e[Math.round(1e3 * Math.random()) % e.length], "stun:stun2.huya.com:" + e[Math.round(1e3 * Math.random()) % e.length]]
                                    }]
                                };
                                f.default.proxyIp && f.default.stunProts && f.default.stunProts.length > 0 && (e = f.default.stunProts,
                                    t = {
                                        iceServers: [{
                                            urls: ["stun:" + (c.default.ip2uint(f.default.proxyIp) + r.default.sslUrl) + ":" + e[Math.random() * e.length | 0]]
                                        }]
                                    }),
                                    this._node.tryPunch = !0,
                                    this._peer = new p(t),
                                    this._peer.onicecandidate = this._onIceCandidate.bind(this)
                            }
                        }
                    }, {
                        key: "clear",
                        value: function() {
                            this._peer && (this._peer.onicecandidate = null,
                                this._peer.ondatachannel = null)
                        }
                    }, {
                        key: "close",
                        value: function() {
                            this._peer && this._peer.close(),
                                this._peer = null,
                                this._offerSended = !1,
                                this._answerSended = !1,
                                this._hasIce = !1,
                                this._connectTime = 0
                        }
                    }, {
                        key: "_onIceCandidate",
                        value: function(e) {
                            this._hasIce = !0,
                            e.candidate && event.candidate.candidate && -1 === event.candidate.candidate.indexOf(" tcp ") && o.default.sendCandidate(this._node.uid, e.candidate)
                        }
                    }, {
                        key: "recvCandidate",
                        value: function(e) {
                            if (e.candidate && -1 === e.candidate.indexOf(" tcp ") && this._peer) {
                                var t = new v({
                                    candidate: e.candidate,
                                    sdpMLineIndex: e.sdpMLineIndex,
                                    sdpMid: e.sdpMid
                                });
                                this._peer.addIceCandidate(t, this._onIceSuccess.bind(this), this._onIceError.bind(this))
                            }
                        }
                    }, {
                        key: "_onIceSuccess",
                        value: function() {}
                    }, {
                        key: "_onIceError",
                        value: function() {}
                    }, {
                        key: "_onCreateOffer",
                        value: function(e) {
                            this._peer.setLocalDescription(e),
                                o.default.sendOffer(this._node.uid, e)
                        }
                    }, {
                        key: "recvOffer",
                        value: function(e) {
                            if (0 == this._connectTime && (this._connectTime = d.default.now()),
                                this._createPeer(),
                                this._peer) {
                                var t = new m({
                                    sdp: e.sdp,
                                    type: e.sdpType
                                });
                                this._peer.setRemoteDescription(t),
                                    this._peer.createAnswer(this._onCreateAnswer.bind(this), this._onError.bind(this))
                            }
                        }
                    }, {
                        key: "_onCreateAnswer",
                        value: function(e) {
                            this._peer && (this._peer.ondatachannel = this._onDataChannel.bind(this),
                                this._peer.setLocalDescription(e),
                                o.default.sendAnswer(this._node.uid, e),
                                this._answerSended = !0)
                        }
                    }, {
                        key: "_onDataChannel",
                        value: function(e) {
                            this._node.channel.setChannel(e.channel, !0)
                        }
                    }, {
                        key: "recvAnswer",
                        value: function(e) {
                            if (this._peer) {
                                var t = new m({
                                    sdp: e.sdp,
                                    type: e.sdpType
                                });
                                this._peer.setRemoteDescription(t)
                            }
                        }
                    }, {
                        key: "_onError",
                        value: function(e) {
                            u.default.delNode(this._node.uid, h.default.DEL_REASON.PEER_ERROR)
                        }
                    }, {
                        key: "connect",
                        value: function() {
                            this._node.punched() || this._offerSended || this._answerSended || (this._connectTime = d.default.now(),
                                r.default.getUid() > this._node.uid ? o.default.sendRequestOffer(this._node.uid) : this._connect())
                        }
                    }, {
                        key: "connectBack",
                        value: function() {
                            this._node.punched() || this._offerSended || this._answerSended || (l.default.add(l.default.keys.PUNCH_BACK_TIMES, 1),
                                this._connectTime = d.default.now(),
                                this._connect())
                        }
                    }, {
                        key: "_connect",
                        value: function() {
                            this._createPeer(),
                                this._node.channel.setChannel(this._peer.createDataChannel("sendDataChannel", {
                                    ordered: !1,
                                    maxRetransmits: 0
                                }), !1),
                                this._peer.createOffer(this._onCreateOffer.bind(this), this._onError.bind(this)),
                                this._offerSended = !0
                        }
                    }, {
                        key: "onCheckTimer",
                        value: function(e, t) {
                            !this._node.punched() && e - this._connectTime > Number(r.default.extendConfig.p2pConfig.punchTimeout) && (this._hasIce ? l.default.add(l.default.keys.PUNCH_FAIL_HAS_ICE, 1) : l.default.add(l.default.keys.PUNCH_FAIL_NO_ICE, 1),
                                l.default.add(l.default.keys.PUNCH_FAIL_NUM, 1),
                                u.default.delNode(this._node.uid, h.default.DEL_REASON.PEER_TIMEOUT))
                        }
                    }]),
                        e
                }();
                t.default = y
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(2))
                    , u = a(i(33))
                    , o = a(i(9))
                    , l = a(i(3))
                    , d = a(i(13))
                    , h = a(i(21))
                    , f = a(i(28))
                    , c = a(i(42))
                    , p = a(i(72))
                    , v = a(i(16))
                    , m = a(i(10))
                    , y = a(i(5))
                    , _ = function() {
                    function e(t) {
                        (0,
                            s.default)(this, e),
                            this._node = t,
                            this.isPassive = !1,
                            this.connected = !1
                    }
                    return (0,
                        n.default)(e, [{
                        key: "clear",
                        value: function() {
                            this._channel && (this._channel.onmessage = null,
                                this._channel.onopen = null,
                                this._channel.onclose = null,
                                this._channel.onerror = null)
                        }
                    }, {
                        key: "close",
                        value: function() {
                            this._channel && this._channel.close(),
                                this._channel = null,
                                this.connected = !1
                        }
                    }, {
                        key: "setChannel",
                        value: function(e, t) {
                            this.isPassive = t,
                                this.clear(),
                                this.close(),
                                e.binaryType = "arraybuffer",
                                e.onmessage = this._onMessage.bind(this),
                                e.onopen = this._onState.bind(this),
                                e.onclose = this._onState.bind(this),
                                e.onerror = this._onError.bind(this),
                                this._channel = e
                        }
                    }, {
                        key: "_onMessage",
                        value: function(e) {
                            this._node.recvCnt++,
                                h.default.addDownlinkBw(e.data.byteLength),
                                o.default.globalSpeedCalc.addCur(e.data.byteLength);
                            var t = new DataView(e.data)
                                , a = new u.default(t)
                                , s = r.default[a.uri];
                            if (s) {
                                var n = i(94)("./" + s);
                                if (n && n.default) {
                                    var d = new n.default;
                                    d.unmarshall(a),
                                    d.uri !== r.default.P2PSliceData && v.default.add(v.default.keys.FLOW_SINGLLING_DOWN, t.byteLength),
                                        this._node.onChannelData(a.uri, d),
                                        this._node.ping.onChannelData(a.uri, d),
                                        p.default.onChannelData(a.uri, d)
                                } else
                                    l.default.error("p2p channel message，not found class：", s, "uri：", uri)
                            } else
                                l.default.warn("p2p channel message，not found proto,uri：", uri)
                        }
                    }, {
                        key: "_onState",
                        value: function() {
                            var e = this._channel.readyState;
                            l.default.log("P2P Peer onChannelState", e, "nodeUid", this._node.uid),
                                "open" === e ? (d.default.bPunched = !0,
                                    this.connected = !0,
                                    c.default.addPeerInfo(this._node.uid),
                                    h.default.addPunch(this._node.uid),
                                    f.default.addPubCandidate(this._node.uid),
                                this._node.isActive() && o.default.getUid() > this._node.uid && v.default.add(v.default.keys.PUNCH_BACK_SUC, 1),
                                    v.default.add(v.default.keys.TOTAL_PEER_NODES, 1),
                                    this.isPassive ? v.default.add(v.default.keys.PASSIVE_PUNCH_NODES, 1) : v.default.add(v.default.keys.ACTIVE_PUNCH_NODES, 1),
                                    this._node.ping.sendKeepAlive(y.default.now())) : "closed" === e && h.default.delNode(this._node.uid, m.default.DEL_REASON.CHANNEL_CLOSE)
                        }
                    }, {
                        key: "_onError",
                        value: function(e) {
                            v.default.add(v.default.keys.PUNCH_FAIL_NUM, 1),
                                h.default.delNode(this._node.uid, m.default.DEL_REASON.CHANNEL_ERROR)
                        }
                    }, {
                        key: "send",
                        value: function(e, t) {
                            if (this._channel && this.connected) {
                                var i = null;
                                i = e instanceof Uint8Array ? e : e.marshall(),
                                    t === m.default.DataType.SLICE ? h.default.addUplinkBw(i.length) : v.default.add(v.default.keys.FLOW_SINGLLING, i.length),
                                    this._node.sendCnt++;
                                try {
                                    this._channel.send(i)
                                } catch (e) {
                                    this.connected = !1,
                                        h.default.delNode(this._node.uid),
                                        l.default.debug("channel send error", e)
                                }
                            }
                        }
                    }]),
                        e
                }();
                t.default = _
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(6))
                    , n = a(i(0))
                    , r = a(i(1))
                    , u = a(i(9))
                    , o = a(i(5))
                    , l = a(i(8))
                    , d = a(i(21))
                    , h = a(i(28))
                    , f = a(i(35))
                    , c = a(i(42))
                    , p = a(i(13))
                    , v = a(i(2))
                    , m = a(i(10))
                    , y = a(i(99))
                    , _ = a(i(100))
                    , S = function() {
                    function e(t) {
                        (0,
                            n.default)(this, e),
                            this._node = t,
                            this.lastRecvPingStampc = 0,
                            this.period = 3,
                            this.alive = !0,
                            this.handlerMap = new s.default,
                            this.handlerMap.set(v.default.P2PKeepAlive, this.recvKeepAlive.bind(this)),
                            this.handlerMap.set(v.default.P2PKeepAliveRes, this.recvKeepAliveRes.bind(this))
                    }
                    return (0,
                        r.default)(e, [{
                        key: "onCheckTimer",
                        value: function(e, t) {
                            t % this.period == 0 && (this.alive ? (this.alive = !1,
                                this.sendKeepAlive(e)) : d.default.delNode(this._node.uid, m.default.DEL_REASON.PING_TIMEOUT))
                        }
                    }, {
                        key: "onChannelData",
                        value: function(e, t) {
                            this.handlerMap.has(e) && this.handlerMap.get(e)(t)
                        }
                    }, {
                        key: "sendKeepAlive",
                        value: function(e) {
                            var t = new y.default;
                            t.fromUid = u.default.getUid(),
                                t.curSid = u.default.subSid,
                                t.timeStampc = e,
                                t.uplinkBw = d.default.getUplinkBw(),
                                t.sendCount = this._node.sendCnt,
                                t.streamDelay = h.default.getStreamDelays(),
                                t.subMinBw = f.default.getSubMinBw(),
                                t.subNum = f.default.getSubNum(this._node.uid),
                                t.remainUplinkNum = p.default.curUplinkStreamNum - f.default.getUplinkNum(),
                            t.remainUplinkNum < 0 && (t.remainUplinkNum = 0),
                                t.cdnpip = p.default.cdnpip,
                                t.maxSeqs = h.default.getStreamMaxSeqs(),
                                this._node.channel.send(t, m.default.DataType.PING)
                        }
                    }, {
                        key: "recvKeepAlive",
                        value: function(e) {
                            e.curSid === u.default.subSid ? e.timeStampc < this.lastRecvPingStampc || (this.alive = !0,
                                f.default.updateAlive(e.fromUid, o.default.now()),
                                this.lastRecvPingStampc = e.timeStampc,
                                this._node.uplinkBw = e.uplinkBw,
                                c.default.setPeerInfo(e, l.default.UintMax),
                                h.default.updateByPing(this._node.uid, e),
                                this.sendKeepAliveRes(e.timeStampc, e.sendCount),
                            p.default.cdnpip !== e.cdnpip && d.default.delNode(this._node.uid, m.default.DEL_REASON.DIF_CDNP)) : this.recvFromOtherSubSid()
                        }
                    }, {
                        key: "sendKeepAliveRes",
                        value: function(e, t) {
                            var i = new _.default;
                            i.fromUid = u.default.getUid(),
                                i.curSid = u.default.subSid,
                                i.timeStampc = e,
                                i.uplinkBw = d.default.getUplinkBw(),
                                i.sendCount = t - this._node.peerSendCnt,
                                this._node.peerSendCnt = t,
                                i.recvCount = this._node.recvCnt,
                                this._node.recvCnt = 0,
                                i.streamDelay = h.default.getStreamDelays(),
                                i.subMinBw = f.default.getSubMinBw(),
                                i.subNum = f.default.getSubNum(this._node.uid),
                                i.remainUplinkNum = p.default.curUplinkStreamNum - f.default.getUplinkNum(),
                            i.remainUplinkNum < 0 && (i.remainUplinkNum = 0),
                                i.cdnpip = p.default.cdnpip,
                                i.maxSeqs = h.default.getStreamMaxSeqs(),
                                c.default.updatePeer(this._node.uid, i.sendCount, i.recvCount),
                                this._node.channel.send(i, m.default.DataType.PING)
                        }
                    }, {
                        key: "recvKeepAliveRes",
                        value: function(e) {
                            e.curSid === u.default.subSid ? e.cdnpip === p.default.cdnpip ? (this.alive = !0,
                                this._node.uplinkBw = e.uplinkBw,
                                this._node.rtt = (o.default.now() - e.timeStampc) / 2,
                                c.default.setPeerInfo(e, this._node.rtt),
                                h.default.updateByPing(this._node.uid, e),
                                h.default.calcPeerLoss(this._node.uid, e.sendCount, e.recvCount)) : d.default.delNode(this._node.uid, m.default.DEL_REASON.DIF_CDNP) : this.recvFromOtherSubSid()
                        }
                    }, {
                        key: "recvFromOtherSubSid",
                        value: function() {
                            this._node.punched() && this._node.sendNotifyLeaveNet(m.default.LeaveReason.PING_DIF),
                                d.default.delNode(this._node.uid, m.default.DEL_REASON.OTHER_SID)
                        }
                    }]),
                        e
                }();
                t.default = S
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(14))
                    , n = a(i(6))
                    , r = a(i(0))
                    , u = a(i(1))
                    , o = a(i(8))
                    , l = a(i(5))
                    , d = a(i(10))
                    , h = a(i(15))
                    , f = function() {
                    function e() {
                        (0,
                            r.default)(this, e),
                            this.sent = 0,
                            this.received = 0,
                            this.updateStamp = 0
                    }
                    return (0,
                        u.default)(e, [{
                        key: "update",
                        value: function(e, t, i) {
                            this.sent += e,
                                this.received += t,
                                this.updateStamp = i
                        }
                    }]),
                        e
                }()
                    , c = function() {
                    function e() {
                        (0,
                            r.default)(this, e),
                            this.uploadThrehold = o.default.UintMax,
                            this.totalSent = 0,
                            this.totalReceived = 0,
                            this.lastTime = 0,
                            this.uploadMin = 1,
                            this.averageUpload = new h.default(e.UPLOAD_QUEUE_MAX_SIZE),
                            this.peers = new n.default
                    }
                    return (0,
                        u.default)(e, [{
                        key: "reset",
                        value: function() {
                            this.uploadThrehold = o.default.UintMax,
                                this.totalSent = 0,
                                this.totalReceived = 0,
                                this.lastTime = l.default.now(),
                                this.averageUpload.reset(),
                                this.peers.clear()
                        }
                    }, {
                        key: "update",
                        value: function(e, t, i, a) {
                            if (!d.default.isProxyUid(e) && 0 !== t && 0 !== i) {
                                i > t && (i = t);
                                var s = null;
                                this.peers.has(e) ? s = this.peers.get(e) : (s = new f,
                                    this.peers.set(e, s)),
                                    s.update(t, i, a),
                                    this.totalSent += t,
                                    this.totalReceived += i
                            }
                        }
                    }, {
                        key: "addActualUpload",
                        value: function(e) {
                            this.averageUpload.add(e)
                        }
                    }, {
                        key: "ready",
                        value: function(t) {
                            var i = t - this.lastTime;
                            return this.totalSent > e.TOTAL_SENT_THRESHOLD && i > e.MIN_UPDATE_INTERVAL || i > e.MAX_UPDATE_INTERVAL
                        }
                    }, {
                        key: "updateUploadBandwidth",
                        value: function(t, i) {
                            var a = this.calcUplinkRecvRate()
                                , s = t
                                , n = this.averageUpload.average();
                            if (n === o.default.UintMax && (n = 0),
                            a > e.HIGH_RECV_RATE) {
                                var r = t >= this.uploadThrehold ? e.LOW_ADD_RATIO : e.HIGH_ADD_RATIO;
                                (s = Math.round(r * n) + 1) < t && (s = t),
                                r === e.HIGH_ADD_RATIO && s > this.uploadThrehold && (s = this.uploadThrehold),
                                    this.uploadMin = parseInt(.8 * s)
                            } else
                                a < e.LOW_RECV_RATE && (this.uploadThrehold = n,
                                s > this.uploadMin && s--,
                                s < 1 && (s = 1));
                            return this.lastTime = i,
                                s
                        }
                    }, {
                        key: "calcUplinkRecvRate",
                        value: function() {
                            var t = new f
                                , i = !0
                                , a = !1
                                , n = void 0;
                            try {
                                for (var r, u = (0,
                                    s.default)(this.peers.values()); !(i = (r = u.next()).done); i = !0) {
                                    var o = r.value;
                                    if (0 !== o.sent) {
                                        (this.totalReceived - t.received) * (this.totalSent - o.sent) < (this.totalSent - t.sent) * (this.totalReceived - o.received) && (t = o),
                                        Math.round(this.totalSent * e.HIGH_RECV_RATE) > this.totalReceived && 3 * this.totalSent / 4 > t.sent && (this.totalReceived -= t.received,
                                            this.totalSent -= t.sent);
                                        var l = e.DEFAULT_RECV_RATE;
                                        return 0 !== this.totalSent && (l = this.totalReceived / this.totalSent),
                                            this.totalSent = 0,
                                            this.totalReceived = 0,
                                            this.peers.clear(),
                                            l
                                    }
                                }
                            } catch (e) {
                                a = !0,
                                    n = e
                            } finally {
                                try {
                                    !i && u.return && u.return()
                                } finally {
                                    if (a)
                                        throw n
                                }
                            }
                        }
                    }]),
                        e
                }();
                c.TOTAL_SENT_THRESHOLD = 400,
                    c.UPLOAD_QUEUE_MAX_SIZE = 10,
                    c.MIN_UPDATE_INTERVAL = 3e3,
                    c.MAX_UPDATE_INTERVAL = 15e3,
                    c.HIGH_RECV_RATE = .99,
                    c.LOW_RECV_RATE = .96,
                    c.DEFAULT_RECV_RATE = .98,
                    c.HIGH_ADD_RATIO = 1.5,
                    c.LOW_ADD_RATIO = 1.1,
                    t.default = c
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(14))
                    , n = a(i(6))
                    , r = a(i(0))
                    , u = a(i(1))
                    , o = a(i(9))
                    , l = a(i(8))
                    , d = a(i(5))
                    , h = a(i(3))
                    , f = a(i(10))
                    , c = a(i(13))
                    , p = a(i(28))
                    , v = a(i(21))
                    , m = a(i(42))
                    , y = a(i(35))
                    , _ = a(i(73))
                    , S = a(i(72))
                    , g = a(i(74))
                    , T = a(i(16))
                    , P = a(i(53))
                    , I = a(i(289))
                    , E = a(i(290))
                    , k = a(i(291))
                    , R = a(i(292))
                    , C = function() {
                    function e(t) {
                        (0,
                            r.default)(this, e),
                            this.index = t,
                            this.changeStamp = 0,
                            this.firstPubStamp = 0,
                            this.lastSliceStamp = 0,
                            this.lastDifStamp = 0,
                            this.peerJump = new L(6e4),
                            this.cdnJump = new L(6e4),
                            this.force = !1,
                            this.compete = !1,
                            this.isForced = !1,
                            this.unsubscribeCdn = !1,
                            this.trySubNum = 0,
                            this.trySubStamp = 0,
                            this.defaultReason = 0,
                            this.switching = !1,
                            this.lastPubUid = 0,
                            this.switchInterval = f.default.SWITCH_MIN,
                            this.waitMap = new n.default,
                            this.streamInfo = new I.default,
                            this.streamDelay = new E.default,
                            this.pubInfo = new k.default,
                            this.pubSelector = new R.default(this)
                    }
                    return (0,
                        u.default)(e, [{
                        key: "reset",
                        value: function() {
                            this.resetRestart(),
                                this.resetPubSelector()
                        }
                    }, {
                        key: "resetRestart",
                        value: function() {
                            this.resetStamp(),
                                this.peerJump.reset(),
                                this.cdnJump.reset(),
                                this.streamInfo.reset(),
                                this.streamDelay.reset(),
                                this.pubInfo.reset(!0),
                                this.unsubscribeCdn = !1,
                                this.compete = !1,
                                this.force = !1,
                                this.isForced = !1,
                                this.defaultReason = 0,
                                this.switching = !1,
                                this.lastPubUid = 0,
                                this.switchInterval = f.default.SWITCH_MIN
                        }
                    }, {
                        key: "resetPubSelector",
                        value: function() {
                            this.pubSelector.reset()
                        }
                    }, {
                        key: "restart",
                        value: function() {
                            this.removePub("restart", 65);
                            for (var e = this.streamInfo.subs.length, t = 0; t < e; t++) {
                                var i = this.streamInfo.subs[t];
                                S.default.sendSubStreamRes(i, this.index, this.pubInfo.maxRecvSeq, f.default.SubResCode.RESTART, this.getStreamDelay())
                            }
                            this.resetRestart()
                        }
                    }, {
                        key: "addPubCandidate",
                        value: function(e, t) {
                            this.pubSelector.addCandidate(e, t)
                        }
                    }, {
                        key: "delNode",
                        value: function(e) {
                            this.pubSelector.delCandidate(e),
                                this.streamInfo.delSub(e),
                            this.pubInfo.uid === e && this.trySubPeer(d.default.now())
                        }
                    }, {
                        key: "onCheckFastTimer",
                        value: function(e, t) {
                            if (!this.force && !this.isForced)
                                if (1 === this.pubInfo.status && 0 != this.pubInfo.subStamp && e - this.pubInfo.subStamp > 1e3)
                                    h.default.log("Stream onCheckFastTimer streamIndex", this.index, "订阅超时 失败uid", this.pubInfo.uid),
                                    this.compete || T.default.add(T.default.keys.SUB_TIMEOUT_TIMES, 1),
                                        this.pubSelector.setFailedStamp(this.pubInfo.uid, e),
                                        this.trySubPeer(e);
                                else if (2 === this.pubInfo.status && !f.default.isProxyUid(this.pubInfo.uid)) {
                                    var i = (this._sliceTimeout(e) ? 1 : 0) | (this._largeDelay() ? 2 : 0) | (g.default.getMaxSeq() - this.pubInfo.maxRecvSeq > f.default.SLICE_DELAY * c.default.maxSubNum ? 4 : 0);
                                    if (i > 0)
                                        this.removePub("bad peer", i),
                                            this.trySubPeer(e),
                                            this.switchInterval = f.default.SWITCH_MIN;
                                    else if (t % (c.default.maxSubNum * this.switchInterval) == this.index * this.switchInterval) {
                                        var a = this.pubSelector.getBestPub();
                                        !f.default.isProxyUid(a.bestUid) && a.bestUid != this.pubInfo.uid && this.pubSelector.isMuchBetter(a.bestUid, this.pubInfo.uid) && (this.switching = !0,
                                            this.lastPubUid = this.pubInfo.uid,
                                            this.removePub("much better", 0),
                                            this._subStream(a, e))
                                    }
                                }
                        }
                    }, {
                        key: "onTimer",
                        value: function(e, t) {
                            if (!this.force && !this.isForced && (t % f.default.SWITCH_TIME == 0 && this.switchInterval < f.default.SWITCH_MAX && (this.switchInterval += f.default.SWITCH_MIN),
                                this.compete = !1,
                            2 === this.pubInfo.status)) {
                                var i = v.default.getUplinkBw();
                                if (this.competeAble(i))
                                    this.compete = !0,
                                        c.default.competeArr.push(this.index),
                                        this.pubInfo.status = 1;
                                else if (f.default.isProxyUid(this.pubInfo.uid) && (i < .8 * c.default.csMinBw || (f.default.isForce(this.pubInfo.uid) || f.default.isDefault(this.pubInfo.uid)) && 0 == c.default.csMinBw)) {
                                    var a = this.pubSelector.getBestPub();
                                    this.pubSelector.hasCancidate() && f.default.isProxyUid(a.bestUid) ? this.defaultReason = 1 : this.pubSelector.hasCancidate() || (this.defaultReason = 2),
                                        f.default.isProxyUid(a.bestUid) ? f.default.isCompete(this.pubInfo.uid) && (T.default.add(T.default.keys.FORCE_NO_PEER, 1),
                                            this.subForce(e)) : (this._subStream(a, e),
                                            this.unsubscribeCdn = !0)
                                }
                            }
                        }
                    }, {
                        key: "trySubPeer",
                        value: function(e) {
                            var t = this.trySubNum > Number(o.default.extendConfig.p2pConfig.trySubNum)
                                , i = this.trySubStamp > 0 && e - this.trySubStamp > Number(o.default.extendConfig.p2pConfig.trySubTime);
                            t || i ? (t && T.default.add(T.default.keys.FORCE_SUB_END, 1),
                            i && T.default.add(T.default.keys.FORCE_SUB_TIMEOUT, 1),
                                this.subForce(e)) : this.subPeer(e)
                        }
                    }, {
                        key: "competeAble",
                        value: function(e) {
                            return !f.default.isCompete(this.pubInfo.uid) && (c.default.remainP2pStreamNum > 0 && c.default.competeArr.length < c.default.remainP2pStreamNum || c.default.SNBw > 0 && e > c.default.SNBw || e > 1.2 * c.default.csMinBw || e > c.default.csMinBw && Math.random() < .2)
                        }
                    }, {
                        key: "removePub",
                        value: function(e, t) {
                            this.removePubByUid(this.pubInfo.uid, e, t)
                        }
                    }, {
                        key: "removePubByUid",
                        value: function(e, t, i) {
                            if (!f.default.isProxyUid(e)) {
                                var a = d.default.now();
                                h.default.log("Stream 退订旧节点 streamIndex", this.index, "old publisher", e, "no slice time", a - this.lastSliceStamp, "streamDelay", this.getStreamDelay(), "from", t, "reason", i),
                                    T.default.add(T.default.keys.REMOVE_SUB_TIMES, 1),
                                    S.default.sendRemoveSub(e, this.index, i, this.getStreamDelay()),
                                0 !== i && 16 !== i && this.pubSelector.setFailedStamp(e, a),
                                    _.default.delPub(e)
                            }
                        }
                    }, {
                        key: "recvCompeteRes",
                        value: function(e) {
                            if (-1 !== e.subStreamIndex.indexOf(this.index)) {
                                var t = d.default.now();
                                c.default.competeStamp = t,
                                5 != e.ret && (this.pubInfo.status = 2),
                                    0 == e.ret ? (this.removePub("compete suc", 16),
                                        this.subCompete(t)) : 5 == e.ret && 2 == this.pubInfo.status && this.trySubPeer(t)
                            }
                        }
                    }, {
                        key: "recvRemoveSub",
                        value: function(e) {
                            var t = v.default.getNode(e.uid);
                            h.default.log("Stream recvRemoveSub 收到退订请求 streamIndex", this.index, "fromUid", e.uid, "reason", e.reason, "streamDelay", e.streamDelay, "cdnRtt", e.cdnRtt, "nodeRtt", e.nodeRtt, "mine cdnRtt", o.default.videoLink.avgRtt(), "nodeRtt", t ? t.rtt : 0, "streamDelay", this.getStreamDelay()),
                                this.streamInfo.delSub(e.uid),
                                y.default.delSub(e.uid, this.index, e.reason),
                                S.default.sendRemoveSubRes(e.uid, this.index, this.getStreamDelay())
                        }
                    }, {
                        key: "recvRemoveSubRes",
                        value: function(e) {
                            var t = v.default.getNode(e.uid);
                            h.default.log("Stream recvRemoveSubRes 收到退订响应 streamIndex", this.index, "fromUid", e.uid, "cdnRtt", e.cdnRtt, "nodeRtt", e.nodeRtt, "streamDelay", e.streamDelay, "mine cdnRtt", o.default.videoLink.avgRtt(), "nodeRtt", t ? t.rtt : 0, "streamDelay", this.getStreamDelay())
                        }
                    }, {
                        key: "setPub",
                        value: function(e, t) {
                            f.default.isDefault(e) ? this.defaultReason = 0 : this.defaultReason = 100,
                                this.switching = !1,
                                this.lastPubUid = 0,
                                this.trySubNum = 0,
                                this.trySubStamp = 0,
                            this.pubInfo.uid === e && 2 === this.pubInfo.status || (this.pubInfo.uid === e ? (f.default.isProxyUid(e) || T.default.addSubNodes(e),
                                this.pubSelector.setFailedStamp(e, 0),
                                this.pubSelector.setResponseTime(e, t - this.pubInfo.subStamp),
                                this.pubInfo.status = 2,
                                this.pubInfo.subStamp = 0,
                                _.default.addPub(e)) : S.default.sendRemoveSub(e, this.index, 8, this.getStreamDelay()))
                        }
                    }, {
                        key: "subDefault",
                        value: function(e) {
                            var t = {
                                bestUid: f.default.VIDEO_DEFAULT_UID,
                                streamDelay: 0
                            };
                            this._subStream(t, e)
                        }
                    }, {
                        key: "subCompete",
                        value: function(e) {
                            var t = {
                                bestUid: f.default.VIDEO_COMPETE_UID,
                                streamDelay: 0
                            };
                            this._subStream(t, e)
                        }
                    }, {
                        key: "subForce",
                        value: function(e) {
                            this.isForced = !0,
                                this.compete = !1;
                            var t = {
                                bestUid: f.default.VIDEO_FORCE_UID,
                                streamDelay: 0
                            };
                            -1 === c.default.fixedArr.indexOf(this.index) && c.default.fixedArr.push(this.index),
                                T.default.add(T.default.keys.FORCE_TIMES, 1),
                                this._subStream(t, e)
                        }
                    }, {
                        key: "subPeer",
                        value: function(e) {
                            var t = this.pubSelector.getBestPub();
                            if (this.pubInfo.uid !== t.bestUid)
                                if (f.default.isProxyUid(t.bestUid))
                                    T.default.add(T.default.keys.FORCE_NO_PEER, 1),
                                        this.subForce(e);
                                else {
                                    var i = this.pubSelector.getCandidate(t.bestUid)
                                        , a = v.default.getNode(this.pubInfo.uid);
                                    h.default.log("Stream 订阅节点", "streamIndex", this.index, "nowUid", this.pubInfo.uid, "nodeRtt", a ? a.rtt : o.default.videoLink.avgRtt(), "延时", this.getStreamDelay(), "newUid", t.bestUid, "nodeRtt", i.getRtt(), "延时", i.getStreamDelay()),
                                    f.default.isProxyUid(this.pubInfo.uid) && (this.unsubscribeCdn = !0),
                                        this._subStream(t, e)
                                }
                        }
                    }, {
                        key: "subStream",
                        value: function(e) {
                            if (this.force) {
                                var t = {
                                    bestUid: f.default.VIDEO_FIXED_UID,
                                    streamDelay: 0
                                };
                                this._subStream(t, e)
                            } else
                                this.subDefault(e)
                        }
                    }, {
                        key: "_subStream",
                        value: function(e, t) {
                            if (p.default.subChange = !0,
                                this.pubInfo.reset(),
                                this.peerJump.reset(),
                                this.cdnJump.reset(),
                                this.pubInfo.uid = e.bestUid,
                                this.pubInfo.status = 1,
                                this.pubInfo.subStamp = t,
                                f.default.isProxyUid(e.bestUid))
                                h.default.log("Stream _subStream 订阅节点 pubUid", e.bestUid, "streamIndex", this.index, "remainP2pStreamNum", c.default.remainP2pStreamNum, "csMinBw", c.default.csMinBw, "myBw", v.default.getUplinkBw(), "SNBw", c.default.SNBw),
                                    this.streamDelay.reset(),
                                    this.streamDelay.addDelay(o.default.videoLink.avgRtt() + 200),
                                    this.setPub(e.bestUid, t);
                            else {
                                0 == this.trySubNum && T.default.add(T.default.keys.SUB_TRY_TIMES, 1),
                                0 === this.trySubStamp && (this.trySubStamp = t),
                                    this.trySubNum++;
                                var i = v.default.getNode(e.bestUid);
                                h.default.log("Stream _subStream 订阅节点 pubUid", e.bestUid, "streamIndex", this.index, "maxSeq", this.pubInfo.maxRecvSeq, "pub streamDelay", e.streamDelay, "nodeRtt", i ? i.rtt : 0),
                                    T.default.add(T.default.keys.SUB_TOTAL_TIMES, 1);
                                var a = this.pubInfo.maxRecvSeq
                                    , s = t - this.lastSliceStamp;
                                this.lastSliceStamp > 0 && s > 100 && (a += parseInt(f.default.SLICE_SPEED * c.default.maxSubNum * (o.default.curBitRate / 1e3) * (s / 1e3))),
                                    S.default.sendSubStream(e, this.index, a)
                            }
                        }
                    }, {
                        key: "recvSubStream",
                        value: function(e) {
                            this.streamInfo.isSubed(e.uid) ? S.default.sendSubStreamRes(e.uid, e.streamIndex, this.pubInfo.maxRecvSeq, f.default.SubResCode.ACCEPT_SUBSCRIBE, this.getStreamDelay()) : (this.waitMap.has(e.uid) ? this.waitMap.get(e.uid).push(e) : this.waitMap.set(e.uid, [e]),
                                S.default.sendSubReq(e.uid, this.index))
                        }
                    }, {
                        key: "recvSubRes",
                        value: function(e) {
                            var t = -1
                                , i = null
                                , a = this.waitMap.get(e.subscriber);
                            a && a.length > 0 && (i = a.shift(),
                            0 == a.length && this.waitMap.delete(e.subscriber),
                                t = 0 != e.ret ? f.default.SubResCode.DETECT_SUBSCRIBE_CYCLE : this._emulate(i));
                            var s = v.default.getNode(e.subscriber);
                            if (!i)
                                return t = f.default.SubResCode.NOT_FOUND_PKG,
                                    h.default.log("Stream 拒绝订阅，找不到订阅请求包，subUid", e.subscriber, "streamIndex", this.index, "streamDelay", this.getStreamDelay(), "nodeRtt", s ? s.rtt : 0, "resCode", t),
                                    this._delSub(e.subscriber, this.index),
                                    void S.default.sendSubStreamRes(e.subscriber, this.index, this.pubInfo.maxRecvSeq, t, this.getStreamDelay());
                            if (t == f.default.SubResCode.ACCEPT_SUBSCRIBE) {
                                var n = d.default.now();
                                this.streamInfo.addSub(i.uid) && (h.default.log("Stream 接受订阅，subUid", i.uid, "streamIndex", this.index, "streamDelay", this.getStreamDelay(), "nodeRtt", s ? s.rtt : 0),
                                    y.default.addSub(i.uid, this.index, n),
                                    S.default.sendSubStreamRes(i.uid, this.index, this.pubInfo.maxRecvSeq, t, this.getStreamDelay()),
                                    this._sendVideoToNewSub(i))
                            } else
                                h.default.log("Stream 拒绝订阅，subUid", i.uid, "streamIndex", this.index, "streamDelay", this.getStreamDelay(), "nodeRtt", s ? s.rtt : 0, "resCode", t),
                                    this._delSub(i.uid, this.index),
                                    S.default.sendSubStreamRes(i.uid, this.index, this.pubInfo.maxRecvSeq, t, this.getStreamDelay())
                        }
                    }, {
                        key: "_sendVideoToNewSub",
                        value: function(e) {}
                    }, {
                        key: "recvSubStreamRes",
                        value: function(e) {
                            var t = d.default.now()
                                , i = v.default.getNode(e.uid);
                            if (e.uid == this.lastPubUid)
                                switch (e.ret) {
                                    case f.default.SubResCode.STREAM_LIMIT:
                                        T.default.add(T.default.keys.LAST_STREAM_LIMIT, 1);
                                        break;
                                    case f.default.SubResCode.SLICE_LATE:
                                        T.default.add(T.default.keys.LAST_SLICE_LATE, 1);
                                        break;
                                    case f.default.SubResCode.SLICE_FAST:
                                        T.default.add(T.default.keys.LAST_SLICE_FAST, 1);
                                        break;
                                    case f.default.SubResCode.STREAM_LATE:
                                        T.default.add(T.default.keys.LAST_STREAM_LATE, 1);
                                        break;
                                    case f.default.SubResCode.SUBSCRIBE_UPLINK_NOT_ENOUGH:
                                        T.default.add(T.default.keys.LAST_UPLINK, 1);
                                        break;
                                    case f.default.SubResCode.DETECT_SUBSCRIBE_CYCLE:
                                        T.default.add(T.default.keys.LAST_CYCLE, 1);
                                        break;
                                    case f.default.SubResCode.KICK_OUT:
                                        T.default.add(T.default.keys.LAST_KICK, 1);
                                        break;
                                    case f.default.SubResCode.SELF_WORST:
                                        T.default.add(T.default.keys.LAST_SELF_WORST, 1);
                                        break;
                                    case f.default.SubResCode.ACCEPT_SUBSCRIBE:
                                        T.default.add(T.default.keys.LAST_SUC, 1);
                                        break;
                                    default:
                                        T.default.add(T.default.keys.LAST_OTHER, 1)
                                }
                            else if (this.switching)
                                switch (e.ret) {
                                    case f.default.SubResCode.STREAM_LIMIT:
                                        T.default.add(T.default.keys.SWITCH_STREAM_LIMIT, 1);
                                        break;
                                    case f.default.SubResCode.SLICE_LATE:
                                        T.default.add(T.default.keys.SWITCH_SLICE_LATE, 1);
                                        break;
                                    case f.default.SubResCode.SLICE_FAST:
                                        T.default.add(T.default.keys.SWITCH_SLICE_FAST, 1);
                                        break;
                                    case f.default.SubResCode.STREAM_LATE:
                                        T.default.add(T.default.keys.SWITCH_STREAM_LATE, 1);
                                        break;
                                    case f.default.SubResCode.SUBSCRIBE_UPLINK_NOT_ENOUGH:
                                        T.default.add(T.default.keys.SWITCH_SUBSCRIBE_UPLINK_NOT_ENOUGH, 1);
                                        break;
                                    case f.default.SubResCode.DETECT_SUBSCRIBE_CYCLE:
                                        T.default.add(T.default.keys.SWITCH_SUBSCRIBE_CYCLE, 1);
                                        break;
                                    case f.default.SubResCode.KICK_OUT:
                                        T.default.add(T.default.keys.SWITCH_KICK_OUT, 1);
                                        break;
                                    case f.default.SubResCode.SELF_WORST:
                                        T.default.add(T.default.keys.SWITCH_SELF_WORST, 1);
                                        break;
                                    case f.default.SubResCode.ACCEPT_SUBSCRIBE:
                                        T.default.add(T.default.keys.SWITCH_SUC, 1);
                                        break;
                                    default:
                                        T.default.add(T.default.keys.SWITCH_OTHER, 1)
                                }
                            switch (e.ret) {
                                case f.default.SubResCode.STREAM_LIMIT:
                                    T.default.add(T.default.keys.SUB_FAIL_STREAM_LIMIT, 1);
                                    break;
                                case f.default.SubResCode.SLICE_LATE:
                                    T.default.add(T.default.keys.SUB_FAIL_SLICE_LATE, 1);
                                    break;
                                case f.default.SubResCode.SLICE_FAST:
                                    T.default.add(T.default.keys.SUB_FAIL_SLICE_FAST, 1);
                                    break;
                                case f.default.SubResCode.EMPTY_PEER_INFO:
                                    T.default.add(T.default.keys.SUB_FAIL_EMPTY_PEER_INFO, 1);
                                    break;
                                case f.default.SubResCode.STREAM_LATE:
                                    T.default.add(T.default.keys.SUB_FAIL_STREAM_LATE, 1);
                                    break;
                                case f.default.SubResCode.SUBSCRIBE_UPLINK_NOT_ENOUGH:
                                    T.default.add(T.default.keys.SUB_FAIL_SUBSCRIBE_UPLINK_NOT_ENOUGHE, 1);
                                    break;
                                case f.default.SubResCode.DETECT_SUBSCRIBE_CYCLE:
                                    T.default.add(T.default.keys.SUB_FAIL_SUBSCRIBE_CYCLE, 1);
                                    break;
                                case f.default.SubResCode.KICK_OUT:
                                    T.default.add(T.default.keys.SUB_FAIL_KICK_OUT, 1);
                                    break;
                                case f.default.SubResCode.SELF_WORST:
                                    T.default.add(T.default.keys.SUB_FAIL_SELF_WORST, 1);
                                    break;
                                case f.default.SubResCode.ACCEPT_SUBSCRIBE:
                                    T.default.add(T.default.keys.SUB_FAIL_SUC, 1);
                                    break;
                                default:
                                    T.default.add(T.default.keys.SUB_FAIL_OTHER, 1)
                            }
                            if (e.ret === f.default.SubResCode.ACCEPT_SUBSCRIBE) {
                                if (this.pubInfo.uid !== e.uid)
                                    return void S.default.sendRemoveSub(e.uid, this.index, 32, this.getStreamDelay());
                                T.default.add(T.default.keys.SUB_SUC_TIMES, 1),
                                    this.streamDelay.reset(),
                                    this.streamDelay.addDelay(e.streamDelay),
                                    this.resetStamp(),
                                    this.setPub(e.uid, t),
                                    h.default.log("Stream recvSubStreamRes 订阅成功", "streamIndex", this.index, "pubUid", e.uid, "maxRecvSeq", e.maxRecvSeq, "streamDelay", e.streamDelay, "nodeRtt", i ? i.rtt : 0, "mine maxRecvSeq", this.pubInfo.maxRecvSeq)
                            } else if (e.ret === f.default.SubResCode.NOT_FOUND_PKG && 2 === this.pubInfo.status)
                                ;
                            else if (1 === this.pubInfo.status) {
                                if (h.default.log("Stream recvSubStreamRes 订阅失败", "streamIndex", this.index, "pubUid", e.uid, "maxRecvSeq", e.maxRecvSeq, "streamDelay", e.streamDelay, "reason", e.ret, "nodeRtt", i ? i.rtt : 0, "mine maxRecvSeq", this.pubInfo.maxRecvSeq),
                                    T.default.add(T.default.keys.SUB_FAIL_TIMES, 1),
                                e.ret === f.default.SubResCode.SUBSCRIBE_UPLINK_NOT_ENOUGH || e.ret === f.default.SubResCode.SELF_WORST || e.ret === f.default.SubResCode.KICK_OUT) {
                                    var a = m.default.getPeerInfo(e.uid);
                                    a.subMinBw = e.subMinBw,
                                        a.remainUplinkNum = 0
                                } else
                                    this.pubSelector.setFailedStamp(e.uid, t);
                                this.trySubPeer(t)
                            } else
                                e.ret === f.default.SubResCode.RESTART && (this.pubSelector.setFailedStamp(e.uid, t),
                                    this.trySubPeer(t))
                        }
                    }, {
                        key: "_emulate",
                        value: function(e) {
                            if (y.default.getSubNum(e.uid) >= f.default.MAX_PEER_STREAM_NUM)
                                return f.default.SubResCode.STREAM_LIMIT;
                            if (this.pubInfo.maxRecvSeq < e.maxRecvSeq && e.maxRecvSeq - this.pubInfo.maxRecvSeq > f.default.SLICE_LATE)
                                return f.default.SubResCode.SLICE_LATE;
                            if (this.pubInfo.maxRecvSeq > e.maxRecvSeq && this.pubInfo.maxRecvSeq - e.maxRecvSeq > f.default.SLICE_FAST)
                                return f.default.SubResCode.SLICE_FAST;
                            var t = v.default.getNode(e.uid);
                            if (!t)
                                return f.default.SubResCode.EMPTY_PEER_INFO;
                            if (this.streamDelay.getDelay() + t.rtt > f.default.EMULATE_DELAY)
                                return f.default.SubResCode.STREAM_LATE;
                            if (y.default.getUplinkNum() < c.default.curUplinkStreamNum)
                                return f.default.SubResCode.ACCEPT_SUBSCRIBE;
                            if (y.default.getSubMinBw() > e.uplinkBw || 0 === e.uplinkBw)
                                return f.default.SubResCode.SUBSCRIBE_UPLINK_NOT_ENOUGH;
                            var i = y.default.getWorstSubByBw();
                            return i === e.uid ? f.default.SubResCode.SELF_WORST : (v.default.getNode(i) ? (T.default.add(T.default.keys.SUB_KICK_TIMES, 1),
                                S.default.sendSubStreamRes(i, this.index, this.pubInfo.maxRecvSeq, f.default.SubResCode.KICK_OUT, this.getStreamDelay())) : this.delNode(i),
                                f.default.SubResCode.ACCEPT_SUBSCRIBE)
                        }
                    }, {
                        key: "_delSub",
                        value: function(e) {
                            return this.streamInfo.delSub(e) && y.default.delSub(e, this.index, -1)
                        }
                    }, {
                        key: "addDelay",
                        value: function(e) {
                            var t = e.config.get(3)
                                , i = e.uid
                                , a = d.default.now()
                                , s = 0;
                            if (0 != i) {
                                if (i == this.pubInfo.uid) {
                                    var n = this.pubSelector.getCandidate(i);
                                    n && (s = n.getStreamDelay() + n.getRtt(),
                                        this.streamDelay.addDelay(s))
                                }
                                s > 2 * f.default.STREAM_DELAY && this.pubSelector.addDelay(i, f.default.DEFAULT_DELAY)
                            } else if (0 !== o.default.stampcSvr) {
                                var r = a - o.default.stampcNow;
                                (s = o.default.stampcSvr + r - t) < 0 && (s = 0),
                                f.default.isForce(this.pubInfo.uid) && (s += 2 * f.default.STREAM_DELAY),
                                    this.streamDelay.addDelay(s)
                            }
                        }
                    }, {
                        key: "updateByPing",
                        value: function(e, t, i, a) {
                            this.pubSelector.updateByPing(e, t, i, a)
                        }
                    }, {
                        key: "getStreamDelay",
                        value: function() {
                            return this.streamDelay.getDelay()
                        }
                    }, {
                        key: "_sliceTimeout",
                        value: function(e) {
                            return this.lastSliceStamp > 0 && e - this.lastSliceStamp > f.default.SLICE_TIMEOUT
                        }
                    }, {
                        key: "_largeDelay",
                        value: function() {
                            var e = this.getStreamDelay();
                            return e !== l.default.UintMax && e > f.default.STREAM_DELAY
                        }
                    }, {
                        key: "resetStamp",
                        value: function() {
                            this.changeStamp = d.default.now(),
                                this.lastSliceStamp = 0,
                                this.firstPubStamp = 0,
                                this.lastDifStamp = 0
                        }
                    }, {
                        key: "recvSlice",
                        value: function(e, t) {
                            var i = d.default.now();
                            if (f.default.isSliceJumpFromPeer(this.pubInfo.maxRecvSeq, e))
                                return this.removePub("recvSlice", 65),
                                    void this.trySubPeer(i);
                            0 == this.firstPubStamp && e.uid == this.pubInfo.uid && c.default.printP2PStream && (this.firstPubStamp = i),
                            0 == this.lastSliceStamp && c.default.printP2PStream,
                                this.lastSliceStamp = i,
                            f.default.isProxyUid(e.uid) || e.uid === this.pubInfo.uid || (0 === this.lastDifStamp ? this.lastDifStamp = i : i - this.lastDifStamp > 5e3 && (T.default.add(T.default.keys.DIF_PEER_NUM, 1),
                                this.lastDifStamp = 0,
                                this.removePubByUid(e.uid, "dif peer slice", 64)));
                            var a = e.payload.length + 10;
                            if (e.isFromPeer ? (T.default.add(T.default.keys.CDN_SLICE_RECV_COUNT, 1),
                                T.default.add(T.default.keys.P2P_TOTAL_STREAM_FLOW, a)) : (T.default.add(T.default.keys.SERVER_TOTAL_STREAM_FLOW, a),
                                e.from === P.default.TYPE_RANGE ? T.default.add(T.default.keys.RANGE_TOTAL_STREAM_FLOW, a) : e.from === P.default.TYPE_FULL ? T.default.add(T.default.keys.FLOW_FAST, a) : f.default.isFixed(this.pubInfo.uid) ? T.default.add(T.default.keys.FLOW_FIXED, a) : f.default.isForce(this.pubInfo.uid) ? T.default.add(T.default.keys.FLOW_FORCE, a) : f.default.isCompete(this.pubInfo.uid) ? T.default.add(T.default.keys.FLOW_COMPETE, a) : f.default.isDefault(this.pubInfo.uid) && T.default.add(T.default.keys.FLOW_DEFAULT, a)),
                                t)
                                return T.default.add(T.default.keys.INVALID_PACKET_NUM, 1),
                                    void (e.isFromPeer ? T.default.add(T.default.keys.SLICE_REPEAT_P2P, a) : T.default.add(T.default.keys.SLICE_REPEAT_CDN, a));
                            this._checkJump(e, i),
                                e.isFromPeer ? T.default.add(T.default.keys.P2P_VALID_STREAM_FLOW, a) : (T.default.add(T.default.keys.SERVER_VALID_STREAM_FLOW, a),
                                e.from === P.default.TYPE_RANGE && (T.default.add(T.default.keys.RESEND_SEQ_NUM, 1),
                                    T.default.add(T.default.keys.RANGE_VALID_STREAM_FLOW, a))),
                            e.from !== P.default.TYPE_RANGE && this.dispatchSlice(e)
                        }
                    }, {
                        key: "_checkJump",
                        value: function(e, t) {
                            var i = this.pubInfo.maxRecvSeq;
                            if (this.pubInfo.updateMaxRecvSeq(e.seq) && (this.pubInfo.isFromPeer = e.isFromPeer),
                                this.pubInfo.updateMaxRecvSeq(e.seq),
                            0 !== i && e.seq > i) {
                                var a = i + c.default.maxSubNum !== e.seq;
                                e.isFromPeer ? this.peerJump.add(t, a) : e.from !== P.default.TYPE_RANGE && (a && h.default.log("P2P Stream slice jump，lastSeq", i, "seq", e.seq, e.seq - i, "streamIndex", this.index),
                                    this.cdnJump.add(t, a))
                            }
                        }
                    }, {
                        key: "dispatchSlice",
                        value: function(e) {
                            var t = this.streamInfo.subs;
                            if (t.length > 0) {
                                T.default.add(T.default.keys.CDN_SLICE_SEND_COUNT, 1),
                                    e.uid = o.default.getUid();
                                var i = e.marshall()
                                    , a = !0
                                    , n = !1
                                    , r = void 0;
                                try {
                                    for (var u, l = (0,
                                        s.default)(t); !(a = (u = l.next()).done); a = !0) {
                                        var d = u.value;
                                        v.default.sendToNode(d, i, f.default.DataType.SLICE)
                                    }
                                } catch (e) {
                                    n = !0,
                                        r = e
                                } finally {
                                    try {
                                        !a && l.return && l.return()
                                    } finally {
                                        if (n)
                                            throw r
                                    }
                                }
                            }
                        }
                    }]),
                        e
                }()
                    , L = function() {
                    function e(t) {
                        (0,
                            r.default)(this, e),
                            this.firstStamp = 0,
                            this.times = 0,
                            this.time = t
                    }
                    return (0,
                        u.default)(e, [{
                        key: "add",
                        value: function(e, t) {
                            t && (0 === this.firstStamp && (this.firstStamp = e),
                                this.times++),
                            e - this.firstStamp >= this.time && (this.firstStamp = e,
                                this.times = 1)
                        }
                    }, {
                        key: "isJump",
                        value: function() {
                            return this.firstStamp > 0 && this.times > 5
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            this.firstStamp = 0,
                                this.times = 0
                        }
                    }]),
                        e
                }();
                t.default = C
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1));
                a(i(9));
                var r = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.subs = []
                    }
                    return (0,
                        n.default)(e, [{
                        key: "reset",
                        value: function() {
                            this.subs = []
                        }
                    }, {
                        key: "addSub",
                        value: function(e) {
                            return -1 == this.subs.indexOf(e) && (this.subs.push(e),
                                !0)
                        }
                    }, {
                        key: "delSub",
                        value: function(e) {
                            var t = this.subs.indexOf(e);
                            return -1 != t && (this.subs.splice(t, 1),
                                !0)
                        }
                    }, {
                        key: "isSubed",
                        value: function(e) {
                            return -1 != this.subs.indexOf(e)
                        }
                    }]),
                        e
                }();
                t.default = r
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(15))
                    , u = a(i(10))
                    , o = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.delayCalc = new r.default(10)
                    }
                    return (0,
                        n.default)(e, [{
                        key: "reset",
                        value: function() {
                            this.delayCalc.reset()
                        }
                    }, {
                        key: "getDelay",
                        value: function() {
                            return this.delayCalc.average()
                        }
                    }, {
                        key: "addDelay",
                        value: function(e) {
                            e > u.default.MAX_DELAY || this.delayCalc.add(e)
                        }
                    }]),
                        e
                }();
                t.default = o
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(5))
                    , u = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.uid = 0,
                            this.status = 0,
                            this.subStamp = 0,
                            this.maxRecvSeq = 0,
                            this.recvStamp = 0,
                            this.isFromPeer = !1
                    }
                    return (0,
                        n.default)(e, [{
                        key: "reset",
                        value: function(e) {
                            this.uid = 0,
                                this.status = 0,
                                this.subStamp = 0,
                                this.isFromPeer = !1,
                            e && (this.maxRecvSeq = 0)
                        }
                    }, {
                        key: "updateMaxRecvSeq",
                        value: function(e) {
                            return this.maxRecvSeq < e && (this.maxRecvSeq = e,
                                this.recvStamp = r.default.now(),
                                !0)
                        }
                    }]),
                        e
                }();
                t.default = u
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(14))
                    , n = a(i(6))
                    , r = a(i(0))
                    , u = a(i(1))
                    , o = a(i(9))
                    , l = a(i(21))
                    , d = a(i(73))
                    , h = a(i(10))
                    , f = a(i(13))
                    , c = (a(i(3)),
                    a(i(8)))
                    , p = a(i(16))
                    , v = a(i(5))
                    , m = a(i(293))
                    , y = function() {
                    function e(t) {
                        (0,
                            r.default)(this, e),
                            this.stream = t,
                            this._candidateMap = new n.default
                    }
                    return (0,
                        u.default)(e, [{
                        key: "reset",
                        value: function() {
                            this._candidateMap.clear()
                        }
                    }, {
                        key: "addCandidate",
                        value: function(e, t) {
                            if (!this._candidateMap.has(e)) {
                                var i = new m.default(this.stream.index,t);
                                this._candidateMap.set(e, i)
                            }
                        }
                    }, {
                        key: "delCandidate",
                        value: function(e) {
                            this._candidateMap.has(e) && this._candidateMap.delete(e)
                        }
                    }, {
                        key: "hasCancidate",
                        value: function() {
                            return this._candidateMap.size > 0
                        }
                    }, {
                        key: "getCandidate",
                        value: function(e) {
                            return this._candidateMap.get(e)
                        }
                    }, {
                        key: "setFailedStamp",
                        value: function(e, t) {
                            this._candidateMap.has(e) && this._candidateMap.get(e).setFailedStamp(t)
                        }
                    }, {
                        key: "setResponseTime",
                        value: function(e, t) {
                            this._candidateMap.has(e) && this._candidateMap.get(e).setResponseTime(t)
                        }
                    }, {
                        key: "updateByPing",
                        value: function(e, t, i, a) {
                            if (this._candidateMap.has(e)) {
                                var s = this._candidateMap.get(e);
                                s.addDelay(t),
                                    s.maxSeq = i,
                                    s.maxSeqStamp = a
                            }
                        }
                    }, {
                        key: "addDelay",
                        value: function(e, t) {
                            this._candidateMap.has(e) && this._candidateMap.get(e).addDelay(t)
                        }
                    }, {
                        key: "getBestPub",
                        value: function() {
                            var e = {
                                bestUid: h.default.VIDEO_FORCE_UID,
                                streamDelay: 0
                            }
                                , t = {
                                presenter: 0,
                                uplink: 0,
                                pull: 0,
                                subed: 0,
                                cooling: 0,
                                delay: 0,
                                rtt: 0,
                                bw: 0,
                                late: 0,
                                fast: 0
                            }
                                , i = l.default.getUplinkBw()
                                , a = o.default.videoLink.avgRtt() + 600
                                , n = this.getNextMaxSeq(this.stream.pubInfo.maxRecvSeq, this.stream.pubInfo.recvStamp)
                                , r = []
                                , u = !0
                                , d = !1
                                , f = void 0;
                            try {
                                for (var c, v = (0,
                                    s.default)(this._candidateMap.values()); !(u = (c = v.next()).done); u = !0) {
                                    var m = c.value;
                                    this._isValidCandidate(m, i, a, t, n) && r.push(m)
                                }
                            } catch (e) {
                                d = !0,
                                    f = e
                            } finally {
                                try {
                                    !u && v.return && v.return()
                                } finally {
                                    if (d)
                                        throw f
                                }
                            }
                            var y = this._findBestCandidate(r);
                            return y ? (e.bestUid = y.peerInfo.uid,
                                e.streamDelay = y.getStreamDelay()) : (e.bestUid = h.default.VIDEO_FORCE_UID,
                                p.default.add(p.default.keys.VALID_RET_NONE, 0 === this._candidateMap.size ? 1 : 0),
                                p.default.add(p.default.keys.VALID_RET_PRESENTER, t.presenter),
                                p.default.add(p.default.keys.VALID_RET_UPLINK, t.uplink),
                                p.default.add(p.default.keys.VALID_RET_PULL, t.pull),
                                p.default.add(p.default.keys.VALID_RET_SUBED, t.subed),
                                p.default.add(p.default.keys.VALID_RET_COOLING, t.cooling),
                                p.default.add(p.default.keys.VALID_RET_DELAY, t.delay),
                                p.default.add(p.default.keys.VALID_RET_RTT, t.rtt),
                                p.default.add(p.default.keys.VALID_RET_BW, t.bw),
                                p.default.add(p.default.keys.VALID_RET_LATE, t.late),
                                p.default.add(p.default.keys.VALID_RET_FAST, t.fast)),
                                e
                        }
                    }, {
                        key: "_isValidCandidate",
                        value: function(e, t, i, a, s) {
                            var n = e.peerInfo.uid;
                            if (n === o.default.presenterUid)
                                return a.presenter++,
                                    !1;
                            if (e.peerInfo.isSubMax() || d.default.getPubCnt(n) >= h.default.MAX_PULL_NUM)
                                return a.pull++,
                                    !1;
                            if (this.stream.streamInfo.isSubed(n))
                                return a.subed++,
                                    !1;
                            if (!e.canResub())
                                return a.cooling++,
                                    !1;
                            if (e.isDelayBad())
                                return a.delay++,
                                    !1;
                            if (e.getRtt() > i)
                                return a.rtt++,
                                    !1;
                            var r = this.getNextMaxSeq(e.maxSeq, e.maxSeqStamp);
                            return r < s && s - r > h.default.SLICE_LATE ? (a.late++,
                                !1) : r > s && r - s > h.default.SLICE_FAST ? (a.fast++,
                                !1) : !(e.peerInfo.remainUplinkNum <= 0) || e.peerInfo.subMinBw > 0 && t > e.peerInfo.subMinBw || (a.bw++,
                                !1)
                        }
                    }, {
                        key: "_findBestCandidate",
                        value: function(e) {
                            for (var t = null, i = 0; i < e.length; i++) {
                                var a = e[i];
                                null !== t && -1 !== m.default.cmpCandidate(a, t) || (t = a)
                            }
                            return null !== t ? (t.peerInfo.curSubNum++,
                                t.peerInfo.remainUplinkNum--,
                                t) : null
                        }
                    }, {
                        key: "isMuchBetter",
                        value: function(e, t) {
                            var i = this.getCandidate(e)
                                , a = this.getCandidate(t)
                                , s = i.getStreamDelay()
                                , n = s
                                , r = s;
                            return s !== c.default.UintMax && (n += 100,
                                r += 500),
                                i.setStreamDelay(r),
                            -1 !== m.default.cmpCandidate(i, a) && (i.setStreamDelay(n),
                            -1 === m.default.cmpCandidate(i, a))
                        }
                    }, {
                        key: "getNextMaxSeq",
                        value: function(e, t) {
                            var i = e
                                , a = v.default.now() - t;
                            return a > 100 && (i += parseInt(h.default.SLICE_SPEED * f.default.maxSubNum * (o.default.curBitRate / 1e3) * (a / 1e3))),
                                i
                        }
                    }]),
                        e
                }();
                t.default = y
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(15))
                    , u = a(i(204))
                    , o = a(i(8))
                    , l = a(i(5))
                    , d = a(i(10))
                    , h = function() {
                    function e(t, i) {
                        (0,
                            s.default)(this, e),
                            this.streamIndex = t,
                            this.peerInfo = i,
                            this.failedStamp = 0,
                            this.failedTimes = 0,
                            this.responseTime = 1e3,
                            this.maxSeq = 0,
                            this.maxSeqStamp = 0,
                            this.streamDelayCalc = new r.default(3)
                    }
                    return (0,
                        n.default)(e, [{
                        key: "addDelay",
                        value: function(e) {
                            e < o.default.UintMax && this.streamDelayCalc.add(e)
                        }
                    }, {
                        key: "setStreamDelay",
                        value: function(e) {
                            this.streamDelayCalc.reset(),
                                this.streamDelayCalc.add(e)
                        }
                    }, {
                        key: "setFailedStamp",
                        value: function(e) {
                            e > 0 && this.failedTimes++,
                                this.failedStamp = e
                        }
                    }, {
                        key: "setResponseTime",
                        value: function(e) {
                            this.responseTime = this.responseTime + e >> 1
                        }
                    }, {
                        key: "canResub",
                        value: function() {
                            return 0 === this.failedStamp || l.default.now() - this.failedStamp >= d.default.RESUB_TIMEOUT
                        }
                    }, {
                        key: "getStreamDelay",
                        value: function() {
                            return this.streamDelayCalc.average()
                        }
                    }, {
                        key: "isDelayBad",
                        value: function() {
                            var e = this.getStreamDelay();
                            return e == o.default.UintMax || e + this.getRtt() > d.default.EMULATE_DELAY
                        }
                    }, {
                        key: "getRtt",
                        value: function() {
                            return this.peerInfo.getRtt()
                        }
                    }], [{
                        key: "cmpLatency",
                        value: function(e, t) {
                            var i = e.getStreamDelay()
                                , a = t.getStreamDelay()
                                , s = u.default.calcDelayScore(i)
                                , n = u.default.calcDelayScore(a);
                            return u.default.cmpScore(s, n)
                        }
                    }, {
                        key: "cmpCandidate",
                        value: function(e, t) {
                            var i = e.getStreamDelay()
                                , a = e.peerInfo.getSendSum()
                                , s = e.peerInfo.getRecvSum()
                                , n = t.getStreamDelay()
                                , r = t.peerInfo.getSendSum()
                                , o = t.peerInfo.getRecvSum()
                                , l = u.default.calcScore(i, a, s)
                                , d = u.default.calcScore(n, r, o);
                            return u.default.cmpScore(l, d)
                        }
                    }]),
                        e
                }();
                t.default = h
            }
            , function(e, t, i) {
                function a(e) {
                    function t(a) {
                        if (i[a])
                            return i[a].exports;
                        var s = i[a] = {
                            i: a,
                            l: !1,
                            exports: {}
                        };
                        return e[a].call(s.exports, s, s.exports, t),
                            s.l = !0,
                            s.exports
                    }
                    var i = {};
                    t.m = e,
                        t.c = i,
                        t.i = function(e) {
                            return e
                        }
                        ,
                        t.d = function(e, i, a) {
                            t.o(e, i) || Object.defineProperty(e, i, {
                                configurable: !1,
                                enumerable: !0,
                                get: a
                            })
                        }
                        ,
                        t.r = function(e) {
                            Object.defineProperty(e, "__esModule", {
                                value: !0
                            })
                        }
                        ,
                        t.n = function(e) {
                            var i = e && e.__esModule ? function() {
                                    return e.default
                                }
                                : function() {
                                    return e
                                }
                            ;
                            return t.d(i, "a", i),
                                i
                        }
                        ,
                        t.o = function(e, t) {
                            return Object.prototype.hasOwnProperty.call(e, t)
                        }
                        ,
                        t.p = "/",
                        t.oe = function(e) {
                            throw console.error(e),
                                e
                        }
                    ;
                    var a = t(t.s = ENTRY_MODULE);
                    return a.default || a
                }
                function s(e) {
                    return (e + "").replace(/[.?*+^$[\]\\(){}|-]/g, "\\$&")
                }
                function n(e) {
                    return !isNaN(1 * e)
                }
                function r(e, t, a) {
                    var r = {};
                    r[a] = [];
                    var u = t.toString()
                        , d = u.match(/^function\s?\(\w+,\s*\w+,\s*(\w+)\)/);
                    if (!d)
                        return r;
                    for (var h, f = d[1], c = new RegExp("(\\\\n|\\W)" + s(f) + l,"g"); h = c.exec(u); )
                        "dll-reference" !== h[3] && r[a].push(h[3]);
                    for (c = new RegExp("\\(" + s(f) + '\\("(dll-reference\\s(' + o + '))"\\)\\)' + l,"g"); h = c.exec(u); )
                        e[h[2]] || (r[a].push(h[1]),
                            e[h[2]] = i(h[1]).m),
                            r[h[2]] = r[h[2]] || [],
                            r[h[2]].push(h[4]);
                    for (var p = Object.keys(r), v = 0; v < p.length; v++)
                        for (var m = 0; m < r[p[v]].length; m++)
                            n(r[p[v]][m]) && (r[p[v]][m] = 1 * r[p[v]][m]);
                    return r
                }
                function u(e) {
                    return Object.keys(e).reduce(function(t, i) {
                        return t || e[i].length > 0
                    }, !1)
                }
                var o = "[\\.|\\-|\\+|\\w|/|@]+"
                    , l = "\\((/\\*.*?\\*/)?s?.*?(" + o + ").*?\\)";
                e.exports = function(e, t) {
                    t = t || {};
                    var s = {
                        main: i.m
                    }
                        , n = t.all ? {
                        main: Object.keys(s.main)
                    } : function(e, t) {
                        for (var i = {
                            main: [t]
                        }, a = {
                            main: []
                        }, s = {
                            main: {}
                        }; u(i); )
                            for (var n = Object.keys(i), o = 0; o < n.length; o++) {
                                var l = n[o]
                                    , d = i[l].pop();
                                if (s[l] = s[l] || {},
                                !s[l][d] && e[l][d]) {
                                    s[l][d] = !0,
                                        a[l] = a[l] || [],
                                        a[l].push(d);
                                    for (var h = r(e, e[l][d], l), f = Object.keys(h), c = 0; c < f.length; c++)
                                        i[f[c]] = i[f[c]] || [],
                                            i[f[c]] = i[f[c]].concat(h[f[c]])
                                }
                            }
                        return a
                    }(s, e)
                        , o = "";
                    Object.keys(n).filter(function(e) {
                        return "main" !== e
                    }).forEach(function(e) {
                        for (var t = 0; n[e][t]; )
                            t++;
                        n[e].push(t),
                            s[e][t] = "(function(module, exports, __webpack_require__) { module.exports = __webpack_require__; })",
                            o = o + "var " + e + " = (" + a.toString().replace("ENTRY_MODULE", JSON.stringify(t)) + ")({" + n[e].map(function(t) {
                                return JSON.stringify(t) + ": " + s[e][t].toString()
                            }).join(",") + "});\n"
                    }),
                        o = o + "new ((" + a.toString().replace("ENTRY_MODULE", JSON.stringify(e)) + ")({" + n.main.map(function(e) {
                            return JSON.stringify(e) + ": " + s.main[e].toString()
                        }).join(",") + "}))(self);";
                    var l = new window.Blob([o],{
                        type: "text/javascript"
                    });
                    if (t.bare)
                        return l;
                    var d = (window.URL || window.webkitURL || window.mozURL || window.msURL).createObjectURL(l)
                        , h = new window.Worker(d);
                    return h.objectURL = d,
                        h
                }
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                var s = a(i(6))
                    , n = a(i(33))
                    , r = a(i(123))
                    , u = a(i(125))
                    , o = a(i(124));
                e.exports = function(e) {
                    function t(t, a, s) {
                        for (var n = new DataView(t.buffer), r = 0, u = 0, o = void 0, l = void 0, h = void 0, f = void 0, c = void 0; r + 10 < t.byteLength; ) {
                            if ((u = n.getUint16(r + 8, !0)) < 10)
                                return console.error("VideoLoader.worker.onProto length error pktLen=" + u + ", smaller than 10 bytes."),
                                    r;
                            if (r + u > t.byteLength)
                                return r;
                            h = n.getUint32(r, !0),
                                f = 4294967296 * n.getUint32(r + 4, !0) + h,
                                i(c = n.getUint32(r + 14, !0), (l = t.slice(r + 10, r + u)).buffer, f, 0),
                                (o = {}).seq = f,
                                o.uri = c,
                                o.from = a,
                                o.payload = l,
                                o.loaderId = s,
                                e.postMessage({
                                    cmd: d,
                                    data: o
                                }),
                                r += u
                        }
                        return r
                    }
                    function i(t, i, s, d) {
                        var h = new DataView(i)
                            , f = new n.default(h)
                            , c = null;
                        switch (t) {
                            case a.PP2pSliceAudioData:
                                c = new r.default;
                                break;
                            case a.PP2pSliceVideoData:
                                (c = new u.default).uid = d;
                                break;
                            case a.PP2pSliceControlData:
                                c = new o.default;
                                break;
                            default:
                                console.warn("%c[x] Unmatched protocol uri=" + t, "color:red;background:#FFF0F0")
                        }
                        c && (c.unmarshall(f),
                        void 0 != s && (c.seq = s),
                            e.postMessage({
                                cmd: l,
                                data: {
                                    uri: t,
                                    rsp: c
                                }
                            }))
                    }
                    console.log("[ VideoLoader worker init ]");
                    var a = {
                        PP2pSliceAudioData: 512035,
                        PP2pSliceVideoData: 512291,
                        PP2pSliceControlData: 1024547
                    }
                        , l = 2
                        , d = 3;
                    e.addEventListener("message", function(e) {
                        var a = e.data;
                        switch (a.cmd) {
                            case 1:
                                !function(e, i, a, s) {
                                    if (s)
                                        return void t(new Uint8Array(i), a, e);
                                    h.has(e) || h.set(e, new Uint8Array(0));
                                    var n = h.get(e)
                                        , r = n
                                        , u = new Uint8Array(i);
                                    0 == r.length ? n = u : ((n = new Uint8Array(r.length + u.length)).set(r, 0),
                                        n.set(u, r.length));
                                    var o = t(n, a, e);
                                    o > 0 && (n = n.slice(o)),
                                        h.set(e, n)
                                }(a.loaderId, a.buffer, a.fromType, a.isWs);
                                break;
                            case 4:
                                i(a.uri, a.buffer, a.seq, a.uid);
                                break;
                            case 5:
                                h.delete(a.loaderId)
                        }
                    }),
                        e.addEventListener("messageerror", function(e) {
                            console.error("[worker.messageerror]", e)
                        });
                    var h = new s.default
                }
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(14))
                    , n = a(i(297))
                    , r = a(i(0))
                    , u = a(i(1))
                    , o = a(i(9))
                    , l = a(i(3))
                    , d = a(i(8))
                    , h = a(i(5))
                    , f = a(i(27))
                    , c = a(i(15))
                    , p = a(i(208))
                    , v = a(i(93))
                    , m = a(i(10))
                    , y = a(i(303))
                    , _ = a(i(304))
                    , S = a(i(70))
                    , g = i(20)
                    , T = a(i(305))
                    , P = a(i(306))
                    , I = a(i(145))
                    , E = !1
                    , k = function() {
                    function e(t) {
                        (0,
                            r.default)(this, e),
                            this.cdnMgr = t,
                            E = !!Number(localStorage._printSkipFrame2),
                            this.flvHeader = _.default.getFlvHeader(),
                            this.msePlayer = new S.default(this.cdnMgr,"yy"),
                            this.msePlayer.appendFlv(this.flvHeader),
                            this.msePlayer.setPushGop(o.default.getConfig(v.default.PUSH_GOP)),
                            this.isAudioFrameTimeLenInited = !1,
                            this.audioFrameTimeLen = y.default.MUSIC_MID_TIME_LEN,
                            this.FIRST_TS_INIT = -1,
                            this.FIRST_TS_AUDIO = 0,
                            this.FIRST_TS_VIDEO = 2,
                            this.firstTsStatus = this.FIRST_TS_INIT,
                            this.firstTs = 0,
                            this.firstOsTs = 0,
                            this.lastLoopTs = 0,
                            this.lastPlayTs = 0,
                            this.lastPlayDts = 0,
                            this.lastPlayVideoSeq = 0,
                            this.lastPlayVideoKey = 0,
                            this.lastPlayAudioKey = 0,
                            this.aacConfig = null,
                            this.avcConfig = null,
                            this.lastATs = 0,
                            this.vFrameId = 0,
                            this.aFrameId = 0,
                            this.videoChain = new p.default,
                            this.audioChain = new p.default,
                            this.dropFrames = 0,
                            this.playedFrames = 0,
                            this.dtsJumpPauseTimes = 0,
                            this.skipFramePauseTimes = 0,
                            this.JitterBufLen = Math.max(1e3, o.default.getConfig(v.default.VIDEO_JIT_BUFLEN)),
                            this.JitterMaxBufLen = Math.max(5e3, o.default.getConfig(v.default.VIDEO_JIT_MAX_BUFLEN)),
                            this.JitterMinBufLen = Math.max(1e3, o.default.getConfig(v.default.VIDEO_JIT_MIN_BUFLEN)),
                            l.default.log("FlvPlayer jitBufLen=" + this.JitterBufLen),
                            this.msePlayer.setJitter(this.JitterBufLen, this.JitterMinBufLen, this.JitterMaxBufLen),
                            this.lastRecvTs = 0,
                            this.STOP_TIMEOUT = 2e4,
                            this.resendTs = -1,
                            this.waitFrameKey = 0,
                            this.lastResendKey = 0,
                            this.perFrameTs = 0,
                            this.perFrameTsCalc = new c.default(100),
                            this.isDispose = !1
                    }
                    return (0,
                        u.default)(e, [{
                        key: "dispose",
                        value: function() {
                            l.default.info("FlvPlayer.dispose"),
                            this.msePlayer && (this.msePlayer.destroy(),
                                this.msePlayer = null),
                                this.resetVideo(),
                                this.isDispose = !0
                        }
                    }, {
                        key: "resetVideo",
                        value: function() {
                            this.lastRecvTs && l.default.info("FlvPlayer.resetVideo"),
                                this.lastRecvTs = 0,
                                this.cdnMgr.updateStatus(g.Status.VIDEO_STOP),
                                this.videoChain.reset(),
                                this.audioChain.reset(),
                                this.dropFrames = 0,
                                this.playedFrames = 0,
                                this.dtsJumpPauseTimes = 0,
                                this.skipFramePauseTimes = 0,
                                this.vFrameId = 0,
                                this.aFrameId = 0,
                                this.firstTs = 0,
                                this.firstOsTs = 0,
                                this.firstTsStatus = this.FIRST_TS_INIT,
                                this.lastLoopTs = 0,
                                this.lastPlayTs = 0,
                                this.lastPlayDts = 0,
                                this.lastPlayVideoKey = 0,
                                this.lastPlayVideoSeq = 0,
                                this.lastPlayAudioKey = 0,
                                this.resendTs = -1,
                                this.waitFrameKey = 0,
                                this.lastResendKey = 0,
                                this.perFrameTs = 0,
                                this.perFrameTsCalc.reset(),
                            this.msePlayer && this.resetMsePlayer()
                        }
                    }, {
                        key: "resetMsePlayer",
                        value: function() {
                            l.default.log("FlvPlayer.resetMsePlayer");
                            var e = void 0
                                , t = void 0;
                            null !== this.msePlayer && (e = this.msePlayer.getWidth(),
                                t = this.msePlayer.getHeight(),
                                this.msePlayer.destroy()),
                                this.msePlayer = new S.default(this.cdnMgr,"yy"),
                                this.msePlayer.appendFlv(this.flvHeader),
                            e && t && this.msePlayer.setResolution(e, t),
                                this.msePlayer.setJitter(this.JitterBufLen),
                                this.msePlayer.setPushGop(o.default.getConfig(v.default.PUSH_GOP)),
                                this.aacConfig = null,
                                this.avcConfig = null
                        }
                    }, {
                        key: "getStat",
                        value: function() {
                            var e = {
                                dropFrames: this.dropFrames,
                                playedFrames: this.playedFrames,
                                dtsJumpPauseTimes: this.dtsJumpPauseTimes,
                                skipFramePauseTimes: this.skipFramePauseTimes
                            };
                            return this.dropFrames = 0,
                                this.playedFrames = 0,
                                this.dtsJumpPauseTimes = 0,
                                this.skipFramePauseTimes = 0,
                                e
                        }
                    }, {
                        key: "setPlaybackrateAccess",
                        value: function(e) {
                            this.msePlayer.setPlaybackrateAccess(e)
                        }
                    }, {
                        key: "onCheckTimer",
                        value: function(e, t) {
                            if (!this.isDispose) {
                                if (Math.max(this.lastRecvTs, this.cdnMgr.lastEmptySliceTs),
                                this.dataTs && e - this.dataTs > this.STOP_TIMEOUT)
                                    return l.default.info("FlvPlayer.onCheckTimer no data received for a long time. " + (e - this.dataTs)),
                                        this.cdnMgr.restart(m.default.restartReason.PLAYER_NO_DATA),
                                        !0;
                                this.msePlayer && this.msePlayer.onCheckTimer(e, t),
                                    this.perFrameTs = this.perFrameTsCalc.average(),
                                this.perFrameTs == d.default.UintMax && (this.perFrameTs = 0)
                            }
                        }
                    }, {
                        key: "onCheckFastTimer",
                        value: function(e, t) {
                            this.isDispose || (this.msePlayer && t % 10 == 0 && this.msePlayer.onCheckFastTimer(e, t),
                                this.play(e, t))
                        }
                    }, {
                        key: "checkVideoPushPlay",
                        value: function(e) {
                            if (!this.lastPlayTs)
                                for (var t = this.videoChain.head, i = 0; null !== t; ) {
                                    var a = t.data;
                                    if (a.isFull)
                                        if (0 === i)
                                            a.dts === this.firstTs && (i = a.dts);
                                        else if (a.dts - i >= 230) {
                                            var s = 230 + this.JitterBufLen - (e - this.firstOsTs);
                                            return this.firstOsTs -= s,
                                                void l.default.log("FlvPlayer.checkVideoPushPlay start=" + i + " end=" + a.dts + " firstOsTs=" + this.firstOsTs + " elapseTime=" + (e - this.firstOsTs) + " modifyTime=" + s)
                                        }
                                    (t = t.next) === this.videoChain.head && (t = null)
                                }
                        }
                    }, {
                        key: "checkAudioPushPlay",
                        value: function(e) {
                            if (!this.lastPlayTs)
                                for (var t = this.audioChain.head, i = 0; null !== t; ) {
                                    var a = t.data;
                                    if (0 === i)
                                        i = a.dts;
                                    else if (a.dts - i >= 500) {
                                        var s = 500 + this.JitterBufLen - (e - this.firstOsTs);
                                        return this.firstOsTs -= s,
                                            void l.default.log("FlvPlayer.checkAudioPushPlay start=" + i + " end=" + a.dts + " firstOsTs=" + this.firstOsTs)
                                    }
                                    (t = t.next) === this.audioChain.head && (t = null)
                                }
                        }
                    }, {
                        key: "play",
                        value: function(e, t) {
                            if (this.firstTsStatus !== this.FIRST_TS_INIT && !(this.lastLoopTs > 0 && e - this.lastLoopTs < 20)) {
                                this.lastLoopTs = e,
                                    this.firstTsStatus == this.FIRST_TS_VIDEO ? this.checkVideoPushPlay(e) : this.firstTsStatus == this.FIRST_TS_AUDIO && this.checkAudioPushPlay(e);
                                var i = e - this.firstOsTs;
                                if (!(i < this.JitterBufLen)) {
                                    for (var a = this.firstTs + i - this.JitterBufLen, s = d.default.UintMax, n = null, r = this.videoChain.head; null !== r; ) {
                                        if ((n = r.data).isFull && n.dts >= this.firstTs) {
                                            s = n.dts;
                                            break
                                        }
                                        (r = r.next) === this.videoChain.head && (r = null)
                                    }
                                    var u = !!Number(o.default.extendConfig.urgentResend);
                                    if (u && r && r != this.videoChain.head) {
                                        if (-1 == this.resendTs)
                                            return void (0 == this.lastPlayTs ? this.cdnMgr.turnToFlv(m.default.turnToFlvReason.FLV_TO_P2P_FULL_STREAM_COMPLETE, !0) : (this.resendTs,
                                                this.tryResend()));
                                        if (this.resendTs > 0 && e - this.resendTs < 200)
                                            return;
                                        E && l.default.warn("FlvPlayer.play wait nothing")
                                    }
                                    this.resendTs = -1;
                                    for (var h = this.lastPlayAudioKey + 1, f = this.getNextATs(), c = (this.getBufferLen(),
                                        this.getPlayTime()), p = c > 0 && f - c > 400; s <= a || f <= a; )
                                        if (f <= s) {
                                            var v = this.audioChain.peek();
                                            if (null !== v) {
                                                var y = v.key - h
                                                    , _ = v.dts - f;
                                                if (_ <= -1 * this.audioFrameTimeLen) {
                                                    this.audioChain.get();
                                                    continue
                                                }
                                                _ > (0 === y ? 10 : .5) * this.audioFrameTimeLen && (v = this.getEmptyAudioFrame(f, h))
                                            } else {
                                                if (p)
                                                    break;
                                                v = this.getEmptyAudioFrame(f, h)
                                            }
                                            this.playAudio(v, e, f),
                                                h = this.lastPlayAudioKey + 1,
                                                f = this.getNextATs()
                                        } else if ((n = r.data).isFull && n.key > this.lastPlayVideoKey && (0 == n.key - this.lastPlayVideoKey - 1 || n.isKeyFrame) && this.playVideo(n, e),
                                        (r = r.next) === this.videoChain.head)
                                            s = d.default.UintMax;
                                        else if ((n = r.data).isFull)
                                            s = n.dts;
                                        else if (u && this.waitFrameKey < n.key) {
                                            this.waitFrameKey = n.key,
                                            E && l.default.log("---------- waitFrameKey", this.waitFrameKey);
                                            break
                                        }
                                    for (var S = 0; null !== (n = this.videoChain.peek()) && n.key <= this.lastPlayVideoKey; )
                                        (n = this.videoChain.get()).isFull && n.played || S++;
                                    S > 0 && (this.dropFrames += S,
                                        l.default.log("FlvPlayer.play dropVideoFrame=" + S)),
                                    a > this.lastPlayTs && (this.lastPlayTs = a),
                                        this.playAsMoreAsPossible(a, e)
                                }
                            }
                        }
                    }, {
                        key: "playAsMoreAsPossible",
                        value: function(e, t) {
                            for (var i = null, a = null, s = 0, n = 0, r = 0; null !== (i = this.videoChain.peek()) && (s = i.stamp,
                            i.isFull && i.key === this.lastPlayVideoKey + 1); ) {
                                for (var u = !0; n = this.getNextATs(),
                                    r = this.lastPlayAudioKey + 1,
                                    !(n > s); ) {
                                    if (null === (a = this.audioChain.peek())) {
                                        u = !1;
                                        break
                                    }
                                    if (a.key !== r) {
                                        u = !1;
                                        break
                                    }
                                    var o = a.dts - n;
                                    if (o < -10 * this.audioFrameTimeLen) {
                                        l.default.warn("FlvPlayer.playAsMoreAsPossible audioFrame key continue but dts smaller, curAts:" + n + " audio dts:" + a.dts),
                                            this.audioChain.get(),
                                            u = !1;
                                        break
                                    }
                                    if (o >= 3 * this.audioFrameTimeLen) {
                                        u = !1;
                                        break
                                    }
                                    this.playAudio(a, t, n)
                                }
                                if (!u)
                                    break;
                                this.playVideo(i, t),
                                    i = this.videoChain.get()
                            }
                        }
                    }, {
                        key: "playVideo",
                        value: function(e, t) {
                            if (e.streamData) {
                                this.playedFrames++;
                                var i = e.key - this.lastPlayVideoKey - 1;
                                if (0 == i && this.lastPlayDts > 0 && this.perFrameTsCalc.add(e.dts - this.lastPlayDts),
                                i > 0 && E) {
                                    var a = this.lastPlayVideoKey + 1;
                                    i > 1 && (a += "~" + (e.key - 1));
                                    var s = this.getBufferLen();
                                    l.default.warn("FlvPlayer.play skipFrame=" + i + " frameId=" + a + " bufLen=" + s)
                                }
                                if (this.lastPlayDts > 0 && e.dts - this.lastPlayDts > 200 + this.perFrameTs && (0 == i ? this.dtsJumpPauseTimes++ : this.skipFramePauseTimes++,
                                    l.default.warn("FlvPlayer.playVideo skipFrame=" + i + " jumpDts=" + (e.dts - this.lastPlayDts))),
                                    this.lastPlayDts = e.dts,
                                    e.isKeyFrame) {
                                    var n = _.default.getAvc(e);
                                    if (!this.isEqualArray(n, this.avcConfig)) {
                                        this.avcConfig = n;
                                        var r = _.default.packAvcFlvTag(e.dts, n);
                                        this.msePlayer && this.msePlayer.appendFlv(r)
                                    }
                                    _.default.trimIFrame(e, n.length)
                                }
                                var u = e.dts - this.firstTs;
                                _.default.setFrameTimestamp(u, e.streamData),
                                this.avcConfig && (this.msePlayer && this.msePlayer.appendFlv(e.streamData),
                                    e.streamData = null),
                                    e.played = !0,
                                    this.lastPlayVideoKey = e.key,
                                    this.lastPlayVideoSeq = e.lastPktSeq,
                                0 == o.default.firstRenderTime && (o.default.firstRenderTime = t,
                                    l.default.log("%c[TIME] firstRenderTime=" + (t - o.default.firstIFrameTime2) + " totalTime=" + (t - o.default.startTime), "color:#A23400;background:#FFF5C2"))
                            } else
                                l.default.warn("FlvWrapper.playVideo frame.streamData is null.")
                        }
                    }, {
                        key: "playAudio",
                        value: function(e, t, i) {
                            e.aacConfig && (l.default.log("FlvPlayer.playAudio aacConfig change"),
                            this.msePlayer && this.msePlayer.appendFlv(e.aacConfig),
                                e.aacConfig = null);
                            var a = i - this.firstTs;
                            _.default.setFrameTimestamp(a, e.streamData),
                            this.msePlayer && a >= 0 && this.msePlayer.appendFlv(e.streamData),
                                e.streamData = null,
                                this.lastPlayAudioKey = e.key,
                                this.incAts(1),
                            e.isEmpty || this.audioChain.get(),
                            0 == o.default.firstRenderTime && (o.default.firstRenderTime = t,
                                l.default.log("%c[TIME] firstRenderTime=" + (t - o.default.firstAudioPkgTime) + " totalTime=" + (t - o.default.startTime), "color:#A23400;background:#FFF5C2"))
                        }
                    }, {
                        key: "getCurrentRealTime",
                        value: function() {
                            return this.msePlayer.getCurrentRealTime() + this.firstTs
                        }
                    }, {
                        key: "tryResend",
                        value: function() {
                            for (var e = this, t = 0, i = 0, a = new n.default, r = this.videoChain.head, u = r.data, o = []; !u.isFull; ) {
                                if (u.key > this.lastResendKey) {
                                    this.lastResendKey = u.key,
                                        o.push(u.key);
                                    var d = u.getLostSeqs();
                                    if (d.forEach(function(t) {
                                        t > e.lastPlayVideoSeq && a.add(t)
                                    }),
                                    t > 0 && u.key > t + 1)
                                        for (var h = i + 1; h < d[0]; h++)
                                            a.add(h);
                                    t = u.key,
                                        i = d[d.length - 1]
                                }
                                if ((r = r.next) === this.videoChain.head)
                                    break;
                                u = r.data
                            }
                            var f = []
                                , c = !0
                                , p = !1
                                , v = void 0;
                            try {
                                for (var m, y = (0,
                                    s.default)(a); !(c = (m = y.next()).done); c = !0) {
                                    var _ = m.value;
                                    f.push(_)
                                }
                            } catch (e) {
                                p = !0,
                                    v = e
                            } finally {
                                try {
                                    !c && y.return && y.return()
                                } finally {
                                    if (p)
                                        throw v
                                }
                            }
                            if (f.length > 0) {
                                var S = "";
                                f.length > 1e3 && (S = "Give up resend."),
                                    l.default.log("FlvPlayer.tryResend seqCnt=" + f.length + " frameCnt=" + o.length + " " + S),
                                f.length <= 1e3 && this.cdnMgr.resender.urgentResend(f)
                            }
                        }
                    }, {
                        key: "getEmptyAudioFrame",
                        value: function(e, t) {
                            var i = new T.default;
                            i.key = t,
                                i.codec = 1,
                                i.isEmpty = !0,
                                i.dts = e;
                            var a = new Uint8Array(I.default.emptyAacFrameAdts);
                            f.default.chrome && f.default.version.major < 50 && (a = I.default.getSilentFrame(5, 2));
                            var s = 1 & a[0] ? 7 : 9;
                            if (null === this.aacConfig) {
                                var n = a.subarray(0, s)
                                    , r = _.default.adtsToConfig(n);
                                r = _.default.packAudioFlvTag(0, r, 0),
                                    this.aacConfig = r,
                                this.msePlayer && this.msePlayer.appendFlv(r),
                                    l.default.log("FlvPlayer.getEmptyAudioFrame append aacConfig=" + r.slice(-8, -4).toString())
                            } else
                                Number(localStorage._printPreEmpytFrame) && l.default.log("FlvPlayer.getEmptyAudioFrame key=" + t + " dts=" + e);
                            return a = a.subarray(s),
                                i.streamData = _.default.packAudioFlvTag(e, a, 1),
                                i
                        }
                    }, {
                        key: "trimAudioBeforeDts",
                        value: function(e) {
                            for (var t = this.audioChain.peek(); t && t.dts < e; )
                                this.audioChain.get(),
                                    t = this.audioChain.peek();
                            return t
                        }
                    }, {
                        key: "trimVideoBeforeDts",
                        value: function(e) {
                            for (var t = this.videoChain.peek(); t && t.dts < e; )
                                this.videoChain.get(),
                                    t = this.videoChain.peek();
                            return t
                        }
                    }, {
                        key: "setLastAts",
                        value: function(e) {
                            this.lastATs = Math.max(1, e - this.audioFrameTimeLen)
                        }
                    }, {
                        key: "getNextATs",
                        value: function() {
                            return Math.round(this.lastATs + this.audioFrameTimeLen)
                        }
                    }, {
                        key: "incAts",
                        value: function(e) {
                            this.lastATs += this.audioFrameTimeLen * e
                        }
                    }, {
                        key: "setFirstTs",
                        value: function(e, t, i) {
                            var a = this.firstTsStatus;
                            if (!(a >= e))
                                if (this.firstTs = t,
                                    this.firstOsTs = i,
                                    this.firstTsStatus = e,
                                    l.default.log("FlvPlayer.setFirstTs status=" + a + "->" + e + " firstTs=" + t + " firstOsTs=" + this.firstOsTs + " jitBufLen=" + this.JitterBufLen),
                                a == this.FIRST_TS_AUDIO && e == this.FIRST_TS_VIDEO && this.updateFirstTsForce(),
                                this.firstTsStatus == this.FIRST_TS_VIDEO || this.firstTsStatus == this.FIRST_TS_VIDEO_PUSH) {
                                    var s = this.trimVideoBeforeDts(this.firstTs);
                                    this.lastPlayVideoKey = s.key - 1,
                                        this.lastPlayVideoSeq = s.lastPktSeq - 1,
                                        l.default.log("FlvPlayer.setFirstTs first video key=" + this.lastPlayVideoKey + " ts=" + s.dts);
                                    var n = this.trimAudioBeforeDts(this.firstTs);
                                    !n || n.dts - this.firstTs > this.audioFrameTimeLen ? (this.lastPlayAudioKey = 0,
                                        this.setLastAts(this.firstTs)) : (this.lastPlayAudioKey = n.key - 1,
                                        this.setLastAts(n.dts)),
                                        l.default.log("FlvPlayer.setFirstTs first audio key=" + this.lastPlayAudioKey + " ts=" + this.lastATs),
                                    this.msePlayer && this.aacConfig && this.msePlayer.appendFlv(this.aacConfig)
                                } else if (this.firstTsStatus == this.FIRST_TS_AUDIO) {
                                    var r = this.trimAudioBeforeDts(this.firstTs);
                                    r && r.dts === this.firstTs && (this.lastPlayAudioKey = r.key - 1,
                                        this.setLastAts(r.dts),
                                        l.default.log("FlvPlayer.setFirstTs first pure audio key=" + this.lastPlayAudioKey + " ts=" + this.lastATs))
                                }
                        }
                    }, {
                        key: "updateFirstTsForce",
                        value: function() {
                            l.default.info("FlvPlayer.updateFirstTsForce"),
                                this.resetMsePlayer(),
                                this.lastPlayTs = 0,
                                this.lastPlayAudioKey = 0,
                                this.lastPlayVideoKey = 0
                        }
                    }, {
                        key: "getPlayTime",
                        value: function() {
                            if (!this.msePlayer)
                                return 0;
                            var e = this.msePlayer.getCurrentDts();
                            return e > 0 && (e += this.firstTs),
                                e
                        }
                    }, {
                        key: "getBufferLen",
                        value: function() {
                            return this.msePlayer ? this.msePlayer.getBufferLen() : 0
                        }
                    }, {
                        key: "getCurrentTime",
                        value: function() {
                            return this.msePlayer ? this.msePlayer.getCurrentTime() : 0
                        }
                    }, {
                        key: "isEqualArray",
                        value: function(e, t) {
                            if (!e && t || e && !t)
                                return !1;
                            var i = e.length;
                            if (i != t.length)
                                return !1;
                            for (var a = 0; a < i; a++)
                                if (e[a] != t[a])
                                    return !1;
                            return !0
                        }
                    }, {
                        key: "onVideoStreamData",
                        value: function(t) {
                            var i = h.default.now();
                            if (this.lastRecvTs = i,
                            t.seq <= this.lastPlayVideoSeq)
                                return e.RECV_TOO_LATE;
                            var a = e.RECV_SUCCESS
                                , s = this.videoChain.getOrNewNode(t.frameId);
                            if (!s)
                                return e.RECV_ERROR;
                            var n = null;
                            if (null === s.data ? ((n = new P.default).append(t),
                                s.data = n) : (n = s.data).append(t),
                            0 == o.default.firstVideoPkgTime && (o.default.firstVideoPkgTime = i,
                                l.default.log("%c[TIME] firstVideoPkgTime=" + (i - o.default.connectVideoTime) + " totalTime=" + (i - o.default.startTime) + " seq=" + t.seq + " frameType=" + n.frameType, "color:#A23400;background:#FFF5C2")),
                            0 == o.default.firstIFrameTime1 && 0 == n.frameType && (o.default.firstIFrameTime1 = i,
                                l.default.log("%c[TIME] firstIFrameTime1=" + (i - o.default.connectVideoTime) + " totalTime=" + (i - o.default.startTime) + " seq=" + t.seq + " sliceNum=" + n.pktNum, "color:#A23400;background:#FFF5C2")),
                            n.isFull && Number(localStorage._printFrameWarning)) {
                                var r = n.key;
                                this.vFrameId > 0 && r - this.vFrameId != 1 && l.default.warn("FlvPlayer video frameId discontinuous, lastFrameId=" + this.vFrameId + " curFrameId=" + r + " jump=" + (r - this.vFrameId)),
                                    this.vFrameId = r
                            }
                            return this.firstTsStatus < this.FIRST_TS_VIDEO && n.isFull && n.isKeyFrame && (this.setFirstTs(this.FIRST_TS_VIDEO, n.dts, n.recvTs),
                                o.default.firstIFrameTime2 = i,
                                l.default.log("%c[TIME] firstIFrameTime2=" + (i - o.default.firstIFrameTime1) + " totalTime=" + (i - o.default.startTime) + " seq=" + t.seq + " sliceNum=" + n.pktNum, "color:#A23400;background:#FFF5C2")),
                                a
                        }
                    }, {
                        key: "onAudioStreamData",
                        value: function(e) {
                            var t = h.default.now();
                            this.lastRecvTs = t,
                            0 == o.default.firstAudioPkgTime && (o.default.firstAudioPkgTime = t,
                                l.default.log("%c[TIME] firstAudioPkgTime=" + (t - o.default.connectVideoTime) + " totalTime=" + (t - o.default.startTime), "color:#A23400;background:#FFF5C2")),
                            this.isAudioFrameTimeLenInited || (this.isAudioFrameTimeLenInited = !0,
                                this.audioFrameTimeLen = y.default.getAudioTimeLen(e.codecType),
                                l.default.log("FlvPlayer.onAudioStreamData codecType=" + e.codecType + " aacTimeLen=" + this.audioFrameTimeLen));
                            var i = e.streamData
                                , a = i.length
                                , s = !1
                                , n = 11 + ((i[1] << 16) + (i[2] << 8) + i[3]) + 4
                                , r = i.slice(0, n);
                            null === this.aacConfig ? (this.aacConfig = r,
                            this.msePlayer && this.msePlayer.appendFlv(r),
                                l.default.log("FlvPlayer.onAudioStreamData append aacConfig=" + r.slice(-8, -4).toString())) : this.aacConfig.toString() != r.toString() && (s = !0,
                                l.default.warn("FlvPlayer.onAudioStreamData aacConfig change, " + this.aacConfig.slice(-8, -4).toString() + " -> " + r.slice(-8, -4).toString()),
                                this.aacConfig = r),
                            Number(localStorage._printAudioFrame) && l.default.debug("-".repeat(64));
                            for (var u = this.firstTsStatus < this.FIRST_TS_AUDIO, d = new DataView(i.buffer), f = void 0, c = void 0, p = void 0, v = void 0; n < a; ) {
                                f = d.getUint32(n, !0),
                                    c = d.getUint32(n + 4, !0),
                                    p = i.slice(n + 8, n + f),
                                    n += f,
                                    v = ((255 & p[7]) << 24 >>> 0) + ((255 & p[4]) << 16) + ((255 & p[5]) << 8) + (255 & p[6]);
                                var m = new T.default;
                                if (m.seq = e.seq,
                                    m.key = c,
                                    m.codec = e.codecType,
                                    m.dts = v,
                                    m.streamData = p,
                                s && (m.aacConfig = r),
                                    m.recvTs = t,
                                    this.audioChain.put(m),
                                u && (u = !1,
                                    this.setFirstTs(this.FIRST_TS_AUDIO, m.dts, m.recvTs)),
                                    Number(localStorage._printAudioFrame)) {
                                    var _ = v - this.lastDts
                                        , S = _ > 100 ? "background:#FF9797" : ""
                                        , g = _ > 100 ? "-.-" : "";
                                    l.default.debug("%cAudio seq=" + e.seq + " frameId=" + c + " dts=" + v + " %c^dts=" + _, "color:#090", S, g),
                                        this.lastDts = m.dts
                                }
                                Number(localStorage._printFrameWarning) && (this.aFrameId > 0 && c - this.aFrameId != 1 && l.default.warn("FlvPlayer audio frameId discontinuous, lastFrameId=" + this.aFrameId + " curFrameId=" + c + " jump=" + (c - this.aFrameId)),
                                    this.aFrameId = c)
                            }
                        }
                    }]),
                        e
                }();
                k.RECV_SUCCESS = 0,
                    k.DOWNLINK_RESEND = 1,
                    k.RECV_TOO_LATE = 3,
                    k.RECV_ERROR = 4,
                    k.TEMP_BUFFERED = 5,
                    t.default = k
            }
            , function(e, t, i) {
                e.exports = {
                    default: i(298),
                    __esModule: !0
                }
            }
            , function(e, t, i) {
                i(89),
                    i(36),
                    i(45),
                    i(299),
                    i(300),
                    i(301),
                    i(302),
                    e.exports = i(17).Set
            }
            , function(e, t, i) {
                var a = i(156)
                    , s = i(92);
                e.exports = i(161)("Set", function(e) {
                    return function() {
                        return e(this, arguments.length > 0 ? arguments[0] : void 0)
                    }
                }, {
                    add: function(e) {
                        return a.def(s(this, "Set"), e = 0 === e ? 0 : e, e)
                    }
                }, a)
            }
            , function(e, t, i) {
                var a = i(24);
                a(a.P + a.R, "Set", {
                    toJSON: i(162)("Set")
                })
            }
            , function(e, t, i) {
                i(163)("Set")
            }
            , function(e, t, i) {
                i(164)("Set")
            }
            , function(e, t, i) {
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }),
                    t.default = {
                        MUSIC_MID: 1,
                        MUSIC_MID_TIME_LEN: 2048e3 / 44100,
                        MUSIC_MID_128: 35,
                        MUSIC_MID_128_TIME_LEN: 1024e3 / 44100,
                        MUSIC_MID_160: 36,
                        MUSIC_MID_160_TIME_LEN: 1024e3 / 44100,
                        MUSIC_MID_192: 37,
                        MUSIC_MID_192_TIME_LEN: 1024e3 / 44100,
                        MUSIC_MID_48K_MONO: 100,
                        MUSIC_MID_48K_STEREO: 101,
                        MUSIC_MID_48K_TIME_LEN: 1024e3 / 48e3,
                        VOICE_HIGHER: 2,
                        VOICE_HIGHER_TIME_LEN: 20,
                        VOICE_HIGHER_FRAME_LEN: 882,
                        VOICE_HIGHER_QUALITY1: 22,
                        VOICE_HIGHER_QUALITY1_TIME_LEN: 20,
                        VOICE_HIGHER_QUALITY1_FRAME_LEN: 882,
                        getAudioTimeLen: function(e) {
                            switch (e) {
                                case this.MUSIC_MID:
                                    return this.MUSIC_MID_TIME_LEN;
                                case this.MUSIC_MID_128:
                                    return this.MUSIC_MID_128_TIME_LEN;
                                case this.MUSIC_MID_160:
                                    return this.MUSIC_MID_160_TIME_LEN;
                                case this.MUSIC_MID_192:
                                    return this.MUSIC_MID_192_TIME_LEN;
                                case this.MUSIC_MID_48K_MONO:
                                case this.MUSIC_MID_48K_STEREO:
                                    return this.MUSIC_MID_48K_TIME_LEN;
                                case this.VOICE_HIGHER:
                                    return this.VOICE_HIGHER_TIME_LEN;
                                default:
                                    return this.MUSIC_MID_TIME_LEN
                            }
                        }
                    }
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = function() {
                    function e() {
                        (0,
                            s.default)(this, e)
                    }
                    return (0,
                        n.default)(e, null, [{
                        key: "getFlvHeader",
                        value: function() {
                            var e = new Uint8Array(13)
                                , t = 0;
                            return e[t++] = 70,
                                e[t++] = 76,
                                e[t++] = 86,
                                e[t++] = 1,
                                e[t++] = 5,
                                e[t++] = 0,
                                e[t++] = 0,
                                e[t++] = 0,
                                e[t++] = 9,
                                e[t++] = 0,
                                e[t++] = 0,
                                e[t++] = 0,
                                e[t++] = 0,
                                e
                        }
                    }, {
                        key: "packAudioFlvTag",
                        value: function(e, t) {
                            var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : -1
                                , a = t.length + 2
                                , s = new Uint8Array(11 + a + 4)
                                , n = 0;
                            return s[n++] = 8,
                                s[n++] = a >> 16 & 255,
                                s[n++] = a >> 8 & 255,
                                s[n++] = 255 & a,
                                s[n++] = e >> 16 & 255,
                                s[n++] = e >> 8 & 255,
                                s[n++] = 255 & e,
                                s[n++] = e >> 24 & 255,
                                s[n++] = 0,
                                s[n++] = 0,
                                s[n++] = 0,
                            -1 != i && (s[n++] = 175,
                                s[n++] = i),
                                s.set(t, n),
                                n += t.length,
                                a += 11,
                                s[n++] = a >> 24 & 255,
                                s[n++] = a >> 16 & 255,
                                s[n++] = a >> 8 & 255,
                                s[n++] = 255 & a,
                                s
                        }
                    }, {
                        key: "packAvcFlvTag",
                        value: function(e, t) {
                            var i = t.length + 5
                                , a = new Uint8Array(11 + i + 4)
                                , s = 0;
                            a[s++] = 9,
                                a[s++] = i >> 16 & 255,
                                a[s++] = i >> 8 & 255,
                                a[s++] = 255 & i,
                                a[s++] = e >> 16 & 255,
                                a[s++] = e >> 8 & 255,
                                a[s++] = 255 & e,
                                a[s++] = e >> 24 & 255,
                                a[s++] = 0,
                                a[s++] = 0,
                                a[s++] = 0,
                                a[s++] = 23,
                                a[s++] = 0,
                                a[s++] = 0,
                                a[s++] = 0,
                                a[s++] = 0,
                                a.set(t, s),
                                s += t.length;
                            var n = 11 + i;
                            return a[s++] = n >> 24 & 255,
                                a[s++] = n >> 16 & 255,
                                a[s++] = n >> 8 & 255,
                                a[s++] = 255 & n,
                                a
                        }
                    }, {
                        key: "adtsToConfig",
                        value: function(e) {
                            var t = new Uint8Array(2)
                                , i = 1 + ((192 & e[2]) >> 6)
                                , a = (60 & e[2]) >> 2
                                , s = (1 & e[2]) << 2 | (192 & e[3]) >> 6;
                            return t[0] = i << 3 | (14 & a) >> 1,
                                t[1] = (1 & a) << 7 | s << 3,
                                t
                        }
                    }, {
                        key: "setFrameTimestamp",
                        value: function(e, t) {
                            t[4] = e >> 16 & 255,
                                t[5] = e >> 8 & 255,
                                t[6] = 255 & e,
                                t[7] = e >> 24 & 255
                        }
                    }, {
                        key: "getAvc",
                        value: function(e) {
                            var t = e.streamData[0];
                            return t += e.streamData[1] << 8,
                                t += e.streamData[2] << 16,
                                t += e.streamData[3] << 24 >>> 0,
                                e.streamData.slice(4, 4 + t)
                        }
                    }, {
                        key: "trimIFrame",
                        value: function(e, t) {
                            e.streamData = e.streamData.slice(4 + t)
                        }
                    }]),
                        e
                }();
                t.default = r
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1));
                a(i(8));
                var r = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.seq = 0,
                            this.key = 0,
                            this.codec = 0,
                            this.isEmpty = !1,
                            this.dts = 0,
                            this.streamData = null,
                            this.aacConfig = null,
                            this.recvTs = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "reset",
                        value: function() {
                            this.seq = 0,
                                this.key = 0,
                                this.codec = 0,
                                this.isEmpty = !1,
                                this.dts = 0,
                                this.streamData = null,
                                this.aacConfig = null,
                                this.recvTs = 0
                        }
                    }]),
                        e
                }();
                t.default = r
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(3))
                    , u = a(i(307))
                    , o = a(i(5))
                    , l = a(i(8))
                    , d = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.key = null,
                            this.frameType = -1,
                            this.pktNum = null,
                            this.size = 0,
                            this.packets = [],
                            this.streamData = null,
                            this.firstPktSeq = null,
                            this.lastPktSeq = null,
                            this.dts = l.default.UintMax,
                            this.recvTs = null
                    }
                    return (0,
                        n.default)(e, [{
                        key: "append",
                        value: function(e) {
                            if (0 === this.packets.length)
                                this.key = e.frameId,
                                    this.frameType = 3 & e.seqNum,
                                    this.pktNum = e.frameNum,
                                    this.packets.push(e),
                                    this.size += e.streamData.length;
                            else {
                                if (this.isFull)
                                    return !0;
                                for (var t = !0, i = this.packets.length - 1; i >= 0; i--) {
                                    if (this.packets[i].seqNum === e.seqNum)
                                        return !0;
                                    if (this.packets[i].seqNum < e.seqNum) {
                                        this.packets.splice(i + 1, 0, e),
                                            this.size += e.streamData.length,
                                            t = !1;
                                        break
                                    }
                                }
                                t && (this.packets.splice(0, 0, e),
                                    this.size += e.streamData.length)
                            }
                            if (this.isFull) {
                                this.streamData = new Uint8Array(this.size);
                                for (var a = 0, s = this.packets.length, n = 0; n < s; n++)
                                    try {
                                        this.streamData.set(this.packets[n].streamData, a),
                                            a += this.packets[n].streamData.length
                                    } catch (e) {
                                        return r.default.error("VideoFrame.append error, name:" + e.name + " msg:" + e.message),
                                            !1
                                    }
                                if (a !== this.size)
                                    return r.default.error("VideoFrame.Append size error, infact:" + a + " expected:" + this.size + " key:" + this.key + " firstSeq:" + this.firstPktSeq + " lastSeq:" + (this.firstPktSeq + 2 * this.pktNum) + " num:" + this.pktNum + " len:" + this.packets.length),
                                        this.reset(),
                                        !1;
                                if (this.firstPktSeq = this.packets[0].seq,
                                    this.lastPktSeq = this.packets[s - 1].seq,
                                    this.dts = this.getFrameTime(),
                                    this.recvTs = o.default.now(),
                                    Number(localStorage._printVideoFrame)) {
                                    var u = this.dts - r.default.lastDts
                                        , l = u > 100 ? "background:#FF9797" : ""
                                        , d = u > 100 ? "-_-" : "";
                                    r.default.debug("%cVideo seq=" + e.seq + " frameId=" + this.key + " dts=" + this.dts + " %c^dts=" + u, "color:#F00", l, d),
                                        r.default.lastDts = this.dts
                                }
                            }
                            return !0
                        }
                    }, {
                        key: "getFrameTime",
                        value: function() {
                            if (this.dts !== l.default.UintMax)
                                return this.dts;
                            if (!this.isFull)
                                return l.default.UintMax;
                            var e = 0;
                            this.isKeyFrame && (e = this.streamData[0],
                                e += this.streamData[1] << 8,
                                e += this.streamData[2] << 16,
                                e += this.streamData[3] << 24 >>> 0,
                                e += 4);
                            var t = (255 & this.streamData[e + 7]) << 24 >>> 0
                                , i = (255 & this.streamData[e + 4]) << 16
                                , a = (255 & this.streamData[e + 5]) << 8
                                , s = 255 & this.streamData[e + 6];
                            return this.dts = t + i + a + s,
                                this.dts
                        }
                    }, {
                        key: "getLostSeqs",
                        value: function() {
                            var e = []
                                , t = this.packets.length;
                            if (t < this.pktNum) {
                                for (var i = this.packets[0].seq, a = this.packets[t - 1].seq, s = i, n = 0; n < t; n++)
                                    if (0 != n)
                                        for (var r = this.packets[n].seq; ++s < r; )
                                            e.push(s);
                                for (var u = this.pktNum - t - e.length; u-- > 0; )
                                    e.unshift(--i),
                                        e.push(++a)
                            }
                            return e
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            this.key = null,
                                this.frameType = -1,
                                this.pktNum = null,
                                this.size = 0,
                                this.packets = [],
                                this.firstPktSeq = null,
                                this.lastPktSeq = null,
                                this.dts = l.default.UintMax,
                                this.recvTs = null
                        }
                    }, {
                        key: "isFull",
                        get: function() {
                            return this.packets.length === this.pktNum
                        }
                    }, {
                        key: "isEmpty",
                        get: function() {
                            return 0 === this.packets.length
                        }
                    }, {
                        key: "isKeyFrame",
                        get: function() {
                            return this.frameType === u.default.FRAMETYPE_VIDEO_I
                        }
                    }, {
                        key: "isPFrame",
                        get: function() {
                            return this.frameType === u.default.FRAMETYPE_VIDEO_P
                        }
                    }, {
                        key: "isBFrame",
                        get: function() {
                            return this.frameType === u.default.FRAMETYPE_VIDEO_B
                        }
                    }]),
                        e
                }();
                t.default = d
            }
            , function(e, t, i) {
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }),
                    t.default = {
                        FRAMETYPE_VIDEO_I: 0,
                        FRAMETYPE_VIDEO_P: 1,
                        FRAMETYPE_VIDEO_B: 2
                    }
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(14))
                    , n = a(i(71))
                    , r = a(i(6))
                    , u = a(i(0))
                    , o = a(i(1))
                    , l = a(i(9))
                    , d = a(i(3))
                    , h = a(i(8))
                    , f = a(i(5))
                    , c = (a(i(53)),
                    a(i(309)))
                    , p = (a(i(15)),
                    a(i(10)))
                    , v = a(i(13))
                    , m = a(i(28))
                    , y = void 0
                    , _ = void 0
                    , S = void 0
                    , g = void 0
                    , T = void 0
                    , P = void 0
                    , I = function() {
                    function e(t) {
                        (0,
                            u.default)(this, e),
                            this.cdnMgr = t,
                            this.start = !1,
                            this.KeepLateSeqGap = 0,
                            this.MaxQueueLen = 1e4,
                            this.seqMap = new r.default,
                            this.waitResendMap = new r.default,
                            this.alreadyResendMap = new r.default,
                            this.globalMaxSeq = 0,
                            this.globalMaxSeqTs = 0,
                            this.globalCdnMaxSeq = 0,
                            this.globalCdnMaxSeqTs = 0,
                            this.maxRecvSeqMap = new r.default,
                            this.packetSeqGap = 4e3,
                            this.lateSeqGap = 500,
                            this.resendTimes = 0,
                            this.resendTimeoutCnt = 0,
                            this.resendErrorTimes = 0,
                            this.resendSliceCnt = 0,
                            this.resendRespondCnt = 0,
                            this.resendLateCnt = 0,
                            this.resendMissCnt = 0,
                            this.repeatResendCnt = 0,
                            this.repeatResendSucc = 0,
                            this.repeatResendFail = 0,
                            this.resendTimesLimit = 0,
                            y = Number(localStorage.PrintResender),
                            _ = Number(l.default.extendConfig.maxResendTimes) || 2,
                            S = Number(l.default.extendConfig.maxResendTs) || 3e3,
                            g = Number(l.default.extendConfig.minResendTs) || 200,
                            T = Number(l.default.extendConfig.testResender),
                            P = Number(l.default.extendConfig.resendDelayTs) || 400,
                            d.default.log("VideoResender maxResendTimes=" + _ + " maxResendTs=" + S + " minResendTs=" + g + " testResender=" + T + " resendDelayTs=" + P)
                    }
                    return (0,
                        o.default)(e, [{
                        key: "init",
                        value: function() {
                            this.reset(),
                                this.packetSeqGap = parseInt(l.default.curBitRate / 1e3 * p.default.SLICE_SPEED * v.default.maxSubNum * 10),
                                this.lateSeqGap = parseInt(l.default.curBitRate / 1e3 * p.default.SLICE_SPEED * v.default.maxSubNum * 5),
                                p.default.LOST_SEQ_NUM = this.packetSeqGap,
                                d.default.log("VideoResender.init seqGap=" + this.packetSeqGap),
                                this.start = !0
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            d.default.log("VideoResender.reset"),
                                this.getStat(),
                                this.seqMap.clear(),
                                this.cleanAllMaps(),
                                this.globalMaxSeq = 0,
                                this.globalMaxSeqTs = 0,
                                this.globalCdnMaxSeq = 0,
                                this.globalCdnMaxSeqTs = 0,
                                this.start = !1
                        }
                    }, {
                        key: "getStat",
                        value: function() {
                            var e = {
                                resendTimes: this.resendTimes,
                                resendTimeoutCnt: this.resendTimeoutCnt,
                                resendErrorTimes: this.resendErrorTimes,
                                resendSliceCnt: this.resendSliceCnt,
                                resendRespondCnt: this.resendRespondCnt,
                                resendLateCnt: this.resendLateCnt,
                                resendMissCnt: this.resendMissCnt,
                                repeatResendCnt: this.repeatResendCnt,
                                repeatResendSucc: Math.min(this.repeatResendSucc, this.repeatResendCnt),
                                repeatResendFail: Math.min(this.repeatResendFail, this.repeatResendCnt),
                                resendTimesLimit: this.resendTimesLimit
                            };
                            return this.resendTimes = 0,
                                this.resendTimeoutCnt = 0,
                                this.resendErrorTimes = 0,
                                this.resendSliceCnt = 0,
                                this.resendRespondCnt = 0,
                                this.resendLateCnt = 0,
                                this.resendMissCnt = 0,
                                this.repeatResendCnt = 0,
                                this.repeatResendSucc = 0,
                                this.repeatResendFail = 0,
                                this.resendTimesLimit = 0,
                                e
                        }
                    }, {
                        key: "getLastPlaySeq",
                        value: function() {
                            return this.cdnMgr.player ? this.cdnMgr.player.lastPlayVideoSeq : 0
                        }
                    }, {
                        key: "onReceiveData",
                        value: function(e) {
                            var t = e.seq;
                            if (!p.default.isSliceJumpFromPeer(this.globalMaxSeq, e)) {
                                var i = f.default.now();
                                if (this.responseStat(e, i),
                                !e.isPatchSlice && !this.seqMap.has(t) && (this.seqMap.set(t, i),
                                    this.start)) {
                                    var a = this.getLastPlaySeq();
                                    if (a && a - this.KeepLateSeqGap > t)
                                        return e.isResend && this.resendLateCnt++,
                                            void (y && d.default.log("VideoResender.onReceiveData late slice curSeq=" + t + " lastPlaySeq=" + a + " delta=" + (a - t) + " from=" + e.from + " uid=" + e.uid));
                                    this.waitResendMap.has(t) && this.waitResendMap.delete(t);
                                    var s = t % v.default.maxSubNum;
                                    if (e.isResend) {
                                        var r = this.maxRecvSeqMap.get(s)
                                            , u = (0,
                                            n.default)(r, 2)
                                            , o = u[0];
                                        u[1],
                                        t > o && this.maxRecvSeqMap.set(s, [t, i])
                                    } else
                                        this.checkUnResendPackets(i, t, a, s)
                                }
                            }
                        }
                    }, {
                        key: "checkUnResendPackets",
                        value: function(e, t, i, a) {
                            var s = 0
                                , r = 0
                                , u = m.default.getStreamDelay(a);
                            (u <= 0 || u == h.default.UintMax) && (u = 0);
                            var o = u;
                            if (o = Math.min(o, 2e3),
                                o = Math.max(o, 200),
                                T) {
                                var l = this.cdnMgr.bufferLen - 800;
                                o = Math.min(u, l, S),
                                    o = Math.max(o, g)
                            }
                            var f = this.maxRecvSeqMap.get(a) || [t, 0]
                                , p = (0,
                                n.default)(f, 2)
                                , _ = p[0];
                            if (p[1],
                                this.checkLostSeq(t, i, e))
                                for (var P = _ + v.default.maxSubNum; P < t; P += v.default.maxSubNum)
                                    if (!(i >= P)) {
                                        var I = new c.default;
                                        I.seq = P,
                                            I.createStampc = e,
                                            I.delta = o,
                                            this.waitResendMap.set(P, I),
                                            s++,
                                        0 == r && (r = P)
                                    }
                            y && s > 0 && d.default.log("VideoResender.onReceiveData add resend count=" + s + " from=" + r)
                        }
                    }, {
                        key: "onResendRetry",
                        value: function(e, t) {
                            var i = this
                                , a = e.length;
                            if (e && a) {
                                var s = 0
                                    , n = f.default.now()
                                    , r = this.getLastPlaySeq();
                                e.forEach(function(e) {
                                    if (!(i.seqMap.has(e) || e < r)) {
                                        s++;
                                        var a = i.alreadyResendMap.get(e);
                                        a && a.resendTimes < _ && (a.sendStampc = 0,
                                            a.createStampc = n,
                                            a.delta = void 0 == t ? P : t,
                                            i.waitResendMap.set(e, a),
                                            i.alreadyResendMap.delete(e))
                                    }
                                }),
                                    d.default.log("VideoResender.onResendRetry " + a + (s == a ? "" : s))
                            }
                        }
                    }, {
                        key: "onCheckTimer",
                        value: function(e, t) {
                            var i = this;
                            if (this.start) {
                                if (t % 4 == 0) {
                                    var a = []
                                        , s = e - 8e3;
                                    this.seqMap.forEach(function(e, t) {
                                        e < s && a.push(t)
                                    }),
                                    a.length > 0 && a.forEach(function(e) {
                                        i.seqMap.delete(e)
                                    })
                                }
                                this.cleanAlreadyResend(e)
                            }
                        }
                    }, {
                        key: "onCheckFastTimer",
                        value: function(e, t) {
                            if (this.start) {
                                var i = 0
                                    , a = []
                                    , r = []
                                    , u = this.getLastPlaySeq()
                                    , o = u ? u - this.KeepLateSeqGap : 0
                                    , l = 0
                                    , h = !0
                                    , f = !1
                                    , c = void 0;
                                try {
                                    for (var p, v = (0,
                                        s.default)(this.waitResendMap); !(h = (p = v.next()).done); h = !0) {
                                        var m = p.value
                                            , S = (0,
                                            n.default)(m, 2)
                                            , g = S[0]
                                            , T = S[1];
                                        if (l++ > this.MaxQueueLen)
                                            return d.default.warn("VideoResender.onCheckFastTimer notResendCnt exceed MaxQueueLen"),
                                                void this.reset();
                                        g < o ? (r.push(g),
                                            i++) : T.resendTimes >= _ ? (r.push(g),
                                            this.resendTimesLimit++) : e - T.createStampc > T.delta && (T.resendTimes++,
                                            r.push(g),
                                            a.push(g),
                                            this.alreadyResendMap.set(g, T))
                                    }
                                } catch (e) {
                                    f = !0,
                                        c = e
                                } finally {
                                    try {
                                        !h && v.return && v.return()
                                    } finally {
                                        if (f)
                                            throw c
                                    }
                                }
                                this.cleanSeqsFromMap(r, this.waitResendMap),
                                i > 0 && y && d.default.log("VideoResender.onCheckFastTimer lost seqs num=" + i),
                                a.length > 0 && this.doResend(a, e)
                            }
                        }
                    }, {
                        key: "cleanAlreadyResend",
                        value: function(e) {
                            var t = []
                                , i = 0
                                , a = this.getLastPlaySeq()
                                , r = !0
                                , u = !1
                                , o = void 0;
                            try {
                                for (var l, h = (0,
                                    s.default)(this.alreadyResendMap); !(r = (l = h.next()).done); r = !0) {
                                    var f = l.value
                                        , c = (0,
                                        n.default)(f, 2)
                                        , p = c[0]
                                        , v = c[1];
                                    if (i++ > this.MaxQueueLen)
                                        return d.default.warn("VideoResender.cleanAlreadyResend alreadyResendCnt exceed MaxQueueLen"),
                                            void this.cleanAllMaps();
                                    if (p < a && v.sendStampc > 0 && e - v.sendStampc > 4e3 && (t.push(p),
                                        v.received,
                                    v.resendTimes > 1 && (!v.received || !v.isResend))) {
                                        var m = v.resendTimes - 1;
                                        this.repeatResendFail += m
                                    }
                                }
                            } catch (e) {
                                u = !0,
                                    o = e
                            } finally {
                                try {
                                    !r && h.return && h.return()
                                } finally {
                                    if (u)
                                        throw o
                                }
                            }
                            this.cleanSeqsFromMap(t, this.alreadyResendMap)
                        }
                    }, {
                        key: "checkSubStream",
                        value: function(e) {
                            var t = this
                                , i = []
                                , a = f.default.now();
                            return this.maxRecvSeqMap.forEach(function(s, r) {
                                var u = (0,
                                    n.default)(s, 2)
                                    , o = u[0]
                                    , l = u[1]
                                    , h = t.globalMaxSeq - o;
                                if (a - l > 3e3 && h > t.lateSeqGap) {
                                    d.default.log("VideoResender.checkSubStream streamIndex=" + r + " rensendCnt=" + (h / v.default.maxSubNum | 0) + " disconnect?");
                                    for (var f = o + v.default.maxSubNum; f < t.globalMaxSeq; f += v.default.maxSubNum)
                                        f > e && i.push(f)
                                }
                            }),
                                i
                        }
                    }, {
                        key: "doResend",
                        value: function(e, t) {
                            l.default.loaderMgr.loadRangeStream(e)
                        }
                    }, {
                        key: "urgentResend",
                        value: function(e) {
                            var t = this
                                , i = e.length;
                            if (e && i) {
                                var a = 0
                                    , s = f.default.now()
                                    , n = this.getLastPlaySeq();
                                e.forEach(function(e) {
                                    if (!(t.seqMap.has(e) || e < n)) {
                                        a++;
                                        var i = t.alreadyResendMap.get(e);
                                        i || ((i = new c.default).seq = e,
                                            i.createStampc = s),
                                            i.delta = -1,
                                            t.waitResendMap.set(e, i)
                                    }
                                }),
                                    d.default.log("VideoResender.urgentResend " + i + (a == i ? "" : a))
                            }
                        }
                    }, {
                        key: "reduceSeqs",
                        value: function(e) {
                            for (var t = e.length, i = f.default.now(), a = this.getLastPlaySeq(), s = t - 1; s >= 0; s--) {
                                var n = e[s];
                                if (this.seqMap.has(n) || n < a)
                                    n < a && this.resendMissCnt++,
                                        e.splice(s, 1);
                                else {
                                    var r = this.globalCdnMaxSeq;
                                    if (r > 0 && n > r) {
                                        var u = this.alreadyResendMap.get(n);
                                        u && (u.resendTimes--,
                                            u.createStampc = i,
                                            u.delta = P,
                                            this.waitResendMap.set(n, u)),
                                            e.splice(s, 1)
                                    }
                                }
                            }
                        }
                    }, {
                        key: "checkLostSeq",
                        value: function(e, t, i) {
                            var a = this
                                , s = e % v.default.maxSubNum;
                            if (!this.maxRecvSeqMap.has(s))
                                return this.maxRecvSeqMap.set(s, [e, i]),
                                    !1;
                            var r = this.maxRecvSeqMap.get(s)
                                , u = (0,
                                n.default)(r, 2)
                                , o = u[0];
                            if (u[1],
                            t && t >= e)
                                return !1;
                            if (o > e)
                                return !1;
                            var l = o;
                            this.maxRecvSeqMap.set(s, [e, i]);
                            var h = e - l;
                            if (h > this.packetSeqGap) {
                                d.default.log("VideoResender.checkLostSeq curSeq=" + e + " too larger than maxRecvSeq=" + l + " gap=" + (e - l)),
                                    this.start = !1;
                                var f = this.cdnMgr;
                                return setTimeout(function() {
                                    f.restart(h > 10 * a.packetSeqGap ? p.default.restartReason.LOST_SEQ_JUMP : p.default.restartReason.LOST_SEQ)
                                }, 0),
                                    !1
                            }
                            return !0
                        }
                    }, {
                        key: "resendStat",
                        value: function(e) {
                            var t = this
                                , i = e.length;
                            this.resendTimes++,
                                this.resendSliceCnt += i;
                            var a = f.default.now();
                            e.forEach(function(e) {
                                var i = t.alreadyResendMap.get(e);
                                i && (i.sendStampc = a,
                                i.resendTimes > 1 && t.repeatResendCnt++)
                            })
                        }
                    }, {
                        key: "responseStat",
                        value: function(e, t) {
                            var i = e.seq;
                            i > this.globalMaxSeq && (this.globalMaxSeq = i,
                                this.globalMaxSeqTs = Date.now()),
                            e.isResend || e.isFromPeer || i > this.globalCdnMaxSeq && (this.globalCdnMaxSeq = i,
                                this.globalCdnMaxSeqTs = t),
                            e.isResend && this.resendRespondCnt++;
                            var a = this.alreadyResendMap.get(i);
                            a && (a.received || (a.received = !0,
                                a.recvTs = t),
                            e.isResend && (a.isResend = !0,
                            a.resendTimes > 1 && (this.repeatResendSucc++,
                                this.repeatResendFail += a.resendTimes - 2)))
                        }
                    }, {
                        key: "cleanSeqsFromMap",
                        value: function(e, t) {
                            e.forEach(function(e) {
                                t.delete(e)
                            })
                        }
                    }, {
                        key: "cleanAllMaps",
                        value: function() {
                            this.waitResendMap.clear(),
                                this.alreadyResendMap.clear(),
                                this.maxRecvSeqMap.clear()
                        }
                    }]),
                        e
                }();
                t.default = I
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.seq = 0,
                            this.createStampc = 0,
                            this.sendStampc = 0,
                            this.delta = 0,
                            this.resendTimes = 0,
                            this.received = !1,
                            this.recvTs = 0,
                            this.isResend = !1
                    }
                    return (0,
                        n.default)(e, [{
                        key: "reset",
                        value: function() {
                            this.seq = 0,
                                this.createStampc = 0,
                                this.sendStampc = 0,
                                this.delta = 0,
                                this.resendTimes = 0,
                                this.received = !1,
                                this.recvTs = 0,
                                this.isResend = !1
                        }
                    }]),
                        e
                }();
                t.default = r
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(9))
                    , u = (a(i(11)),
                    a(i(5)))
                    , o = function() {
                    function e(t) {
                        (0,
                            s.default)(this, e),
                            this.cdnMgr = t,
                            this.data = {
                                act: "webhuyaplayed",
                                uid: 0,
                                sid: 0,
                                subsid: 0,
                                linetype: -1,
                                status: 0,
                                recode: 0,
                                vtime: -1,
                                isp2p: 1
                            }
                    }
                    return (0,
                        n.default)(e, [{
                        key: "send",
                        value: function() {
                            var e = this.data
                                , t = this.cdnMgr
                                , i = r.default.loaderMgr.fullLoader.status
                                , a = "//ylog.hiido.com/c.gif?time=" + u.default.utc();
                            for (var s in e.uid = r.default.uid || r.default.uuid,
                                e.sid = r.default.sid,
                                e.subsid = r.default.subSid,
                                e.linetype = r.default.lineType || -1,
                                e.status = i || 1,
                                0 == i ? e.recode = 2 : (i < 200 || i >= 300) && (e.recode = 1),
                                e.vtime = t.loadTime || -1,
                                e)
                                a += "&" + s + "=" + e[s];
                            (new Image).src = a
                        }
                    }]),
                        e
                }();
                t.default = o
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(9))
                    , u = (a(i(8)),
                    a(i(3)),
                    a(i(5)))
                    , o = a(i(18))
                    , l = a(i(16))
                    , d = function() {
                    function e(t) {
                        (0,
                            s.default)(this, e),
                            this.cdnMgr = t,
                            this.data = {
                                act: "webhuyah5qa",
                                uid: 0,
                                sid: 0,
                                subsid: 0,
                                linetype: -1,
                                sendcnt: 0,
                                paucount: 0,
                                paulength: 0,
                                bflength: 0,
                                vr: 0,
                                httphead: "",
                                rel: "jsscene",
                                ref: location.href,
                                isp2p: 1
                            },
                            this.img = null,
                            this.pausedCount = 0,
                            this.pausedTime = 0,
                            this.isPaused = !1,
                            this.hasEmptyFrames = !1,
                            this.isFirstReport = !0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "send",
                        value: function() {
                            var e = this.data
                                , t = this.cdnMgr.player
                                , i = "//ylog.hiido.com/c.gif?time=" + u.default.utc();
                            for (var a in e.uid = r.default.uid || r.default.uuid,
                                e.sid = r.default.sid,
                                e.subsid = r.default.subSid,
                                e.linetype = r.default.lineType || -1,
                                e.sendcnt++,
                                e.paucount = this.pausedCount,
                                e.paulength = this.pausedTime > 12e4 ? 12e4 : this.pausedTime,
                                e.bflength = t ? t.getBufferLen() : 0,
                                this.pausedCount = 0,
                                this.pausedTime = 0,
                                e)
                                i += "&" + a + "=" + e[a];
                            this.img || (this.img = new Image),
                                this.img.src = i
                        }
                    }, {
                        key: "record",
                        value: function(e, t, i, a, s) {
                            this.pausedCount += t,
                                this.pausedTime += i,
                            e % 120 == 0 && (a && this.pausedCount++,
                                this.send()),
                            a && (this.isPaused = !0),
                            e % 20 == 0 && this.sendNewMetrics(e, t, i, a, s)
                        }
                    }, {
                        key: "sendOldMetrics",
                        value: function(e, t, i, a, s) {
                            var n = l.default.getOldMetrics();
                            n.push({
                                type: o.default.METRIC.VIDEO_BAD_QUALITY_RATIO,
                                value: this.isPaused ? 100 : 0,
                                dim: [{
                                    key: "quality",
                                    value: a || t > 0 ? 100 : 0
                                }, {
                                    key: "reason",
                                    value: a || t > 0 ? 100 : 0
                                }]
                            }),
                                o.default.sendOldMetrics(n)
                        }
                    }, {
                        key: "sendNewMetrics",
                        value: function(e, t, i, a, s) {
                            var n = l.default.getMetrics();
                            if (n.push({
                                sMetricName: o.default.METRIC.VIDEO_EMPTY_FRAMES_RATIO,
                                vField: {
                                    value: this.hasEmptyFrames ? 100 : 0
                                }
                            }, {
                                sMetricName: o.default.METRIC.SDK_P2P_SERVER_OPEN,
                                vField: {
                                    value: this.cdnMgr.getConfig(100) ? 100 : 0
                                }
                            }, {
                                sMetricName: o.default.METRIC.SDK_P2P_USER_PROPERTY,
                                vDimension: {
                                    success: 6
                                }
                            }),
                                this.cdnMgr.player) {
                                var u = this.cdnMgr.player.msePlayer.parser.timeStampStat;
                                n.push({
                                    sMetricName: o.default.METRIC.SDK_PLAYER_PARSER,
                                    vField: {
                                        dts0: u.dtsStat[0],
                                        dts1: u.dtsStat[1],
                                        dts2: u.dtsStat[2],
                                        dts3: u.dtsStat[3],
                                        dts4: u.dtsStat[4],
                                        pts0: u.ptsStat[0],
                                        pts1: u.ptsStat[1],
                                        pts2: u.ptsStat[2],
                                        pts3: u.ptsStat[3],
                                        pts4: u.ptsStat[4],
                                        cts0: u.ctsStat[0],
                                        cts1: u.ctsStat[1],
                                        cts2: u.ctsStat[2],
                                        cts3: u.ctsStat[3],
                                        cts4: u.ctsStat[4]
                                    }
                                })
                            }
                            this.isFirstReport ? this.isFirstReport = !1 : n.push({
                                sMetricName: o.default.METRIC.VIDEO_BAD_QUALITY_RATIO,
                                vField: {
                                    value: this.isPaused ? 100 : 0,
                                    pausecnt: t
                                },
                                vDimension: {
                                    success: o.default.hasP2P,
                                    originalBitrate: r.default.originalBitrate,
                                    p2pCooling: this.cdnMgr.H5Player.p2pCooling ? 1 : 0,
                                    topSid: r.default.sid,
                                    reason: s,
                                    quality: a || t > 0 ? 100 : 0
                                }
                            }),
                                this.isPaused = !1,
                                this.hasEmptyFrames = !1,
                                o.default.sendMetrics(n)
                        }
                    }, {
                        key: "getHost",
                        value: function(e) {
                            return e.replace("https*://", "").split("/")[0]
                        }
                    }, {
                        key: "setHttpHead",
                        value: function(e) {
                            this.data.httphead = this.getHost(e)
                        }
                    }]),
                        e
                }();
                t.default = d
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(6))
                    , n = a(i(0))
                    , r = a(i(1))
                    , u = a(i(9))
                    , o = (a(i(13)),
                    a(i(10)))
                    , l = (a(i(21)),
                    a(i(28)),
                    a(i(3)))
                    , d = a(i(5))
                    , h = function() {
                    function e(t) {
                        (0,
                            n.default)(this, e),
                            this.cdnMgr = t,
                            this.reason = 0,
                            this.reasonMap = new s.default
                    }
                    return (0,
                        r.default)(e, [{
                        key: "reset",
                        value: function() {
                            this.reason = 0,
                                this.reasonMap.clear()
                        }
                    }, {
                        key: "add",
                        value: function(e) {
                            var t = d.default.now();
                            this.reasonMap.set(e, t)
                        }
                    }, {
                        key: "pauseCheck",
                        value: function(e) {
                            var t = this.cdnMgr.bufferLen
                                , i = this.getLoaderState2();
                            if (i > 0)
                                return this.reason = i,
                                    void l.default.warn("PauseStat.pauseCheck pauseReason=" + this.reason + " buffLen=" + t);
                            if (this.reasonMap.get(o.default.pauseReason.P2P_NO_SLICE) || this.isNoSliceReceived())
                                return this.reason = o.default.pauseReason.P2P_NO_SLICE,
                                    void l.default.warn("PauseStat.pauseCheck pauseReason=" + this.reason + " buffLen=" + t);
                            var a = 0;
                            (a = e < 1e3 ? o.default.pauseReason.P2P_NO_BUFF : o.default.pauseReason.P2P_UNKNOW_PAUSE) > this.reason && (this.reason = a),
                                l.default.warn("PauseStat.pauseCheck curReason=" + a + " reportReason=" + this.reason + " buffLen=" + t)
                        }
                    }, {
                        key: "lastCheck",
                        value: function(e, t) {
                            var i = 0;
                            this.cdnMgr.isLowNet() && (i = o.default.pauseReason.P2P_NET_SLOW),
                            e.skipFramePauseTimes > 0 && (i = o.default.pauseReason.P2P_RESEND_SKIP_FRAME);
                            var a = this.cdnMgr.resender.lateResendCnt;
                            a > 0 && (l.default.warn("PauseStat.lastCheck lateResendCnt=" + a),
                                this.cdnMgr.resender.lateResendCnt = 0,
                                i = o.default.pauseReason.P2P_RESEND_TOOLATE),
                            t.resendTimeoutCnt > 0 && (i = o.default.pauseReason.P2P_RESEND_TIMEOUT),
                            t.resendMissCnt > 0 && (i = o.default.pauseReason.P2P_RESEND_ERROR);
                            var s = t.resendSliceCnt - t.resendRespondCnt - t.repeatResendCnt;
                            s > 0 && (i = o.default.pauseReason.P2P_RESEND_MISSING,
                                l.default.warn("PauseStat.lastCheck missingCnt=" + s)),
                            e.dtsJumpPauseTimes > 0 && (i = o.default.pauseReason.P2P_DTS_JUMP),
                            i > this.reason && (this.reason = i)
                        }
                    }, {
                        key: "getLoaderState",
                        value: function() {
                            var e = 0
                                , t = u.default.loaderMgr.fullLoader
                                , i = u.default.loaderMgr.subLoader
                                , a = u.default.loaderMgr.forceSubLoader;
                            return t.started ? t.connected ? 0 == t.firstPkgTs && (e = o.default.pauseReason.P2P_FULL_LOADER_NO_DATA) : e = o.default.pauseReason.P2P_FULL_LOADER_CONNECT_FAIL : (i.started && (i.connected ? 0 == i.firstPkgTs && (e = o.default.pauseReason.P2P_SUB_LOADER_NO_DATA) : e = o.default.pauseReason.P2P_SUB_LOADER_CONNECT_FAIL),
                            a.started && (a.connected ? 0 == a.firstPkgTs && (e = o.default.pauseReason.P2P_SUB_LOADER_NO_DATA) : e = o.default.pauseReason.P2P_SUB_LOADER_CONNECT_FAIL)),
                                e
                        }
                    }, {
                        key: "getLoaderState2",
                        value: function() {
                            var e = d.default.now()
                                , t = this.reasonMap.get(o.default.pauseReason.P2P_SUB_LOADER_CONNECT_FAIL);
                            return t && e - t < 2e3 ? o.default.pauseReason.P2P_SUB_LOADER_CONNECT_FAIL : (t = this.reasonMap.get(o.default.pauseReason.P2P_SUB_LOADER_NO_DATA)) && e - t < 2e3 ? o.default.pauseReason.P2P_SUB_LOADER_NO_DATA : (t = this.reasonMap.get(o.default.pauseReason.P2P_FULL_LOADER_CONNECT_FAIL)) && e - t < 2e3 ? o.default.pauseReason.P2P_FULL_LOADER_CONNECT_FAIL : (t = this.reasonMap.get(o.default.pauseReason.P2P_FULL_LOADER_NO_DATA)) && e - t < 2e3 ? o.default.pauseReason.P2P_FULL_LOADER_NO_DATA : 0
                        }
                    }, {
                        key: "isNoSliceReceived",
                        value: function() {
                            var e = d.default.now()
                                , t = u.default.loaderMgr.fullLoader
                                , i = u.default.loaderMgr.subLoader
                                , a = u.default.loaderMgr.forceSubLoader;
                            return t.sliceTs > 0 && e - t.sliceTs > 2e3 || i.sliceTs > 0 && e - i.sliceTs > 2e3 || a.sliceTs > 0 && e - a.sliceTs > 2e3
                        }
                    }]),
                        e
                }();
                t.default = h
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(11))
                    , u = a(i(5))
                    , o = a(i(9))
                    , l = a(i(13))
                    , d = a(i(146))
                    , h = a(i(21))
                    , f = a(i(72))
                    , c = a(i(28))
                    , p = a(i(42))
                    , v = a(i(35))
                    , m = a(i(73))
                    , y = a(i(74))
                    , _ = a(i(16))
                    , S = a(i(10))
                    , g = a(i(3))
                    , T = function() {
                    function e(t) {
                        (0,
                            s.default)(this, e),
                            l.default.cdnMgr = t,
                            l.default.p2pMgr = this,
                            l.default.printP2PInfo = 1 === parseInt(localStorage.getItem("_printP2PInfo")),
                            l.default.printDelay = 1 === parseInt(localStorage.getItem("_printDelay")),
                            l.default.printP2PStream = 1 === parseInt(localStorage.getItem("_printP2PStream")),
                        this.isSupport() && (d.default.initHandler(),
                            f.default.initHandler()),
                            g.default.log("P2pMgr version " + l.default.version)
                    }
                    return (0,
                        n.default)(e, [{
                        key: "isSupport",
                        value: function() {
                            return window.PeerConnection || window.webkitPeerConnection || window.webkitRTCPeerConnection || window.mozRTCPeerConnection
                        }
                    }, {
                        key: "initConfig",
                        value: function() {
                            if (this.isSupport()) {
                                h.default.initConfig(),
                                    l.default.maxSubNum = o.default.BASE_SUBS,
                                    Number(o.default.extendConfig.p2pConfig.uplinkStreamNum) > 0 ? (l.default.curUplinkStreamNum = Number(o.default.extendConfig.p2pConfig.uplinkStreamNum),
                                        l.default.maxUpLinkStreamNumLimit = l.default.curUplinkStreamNum) : (l.default.curUplinkStreamNum = o.default.userAbility.uplinkMax || 5,
                                        l.default.maxUpLinkStreamNumLimit = 4 * o.default.BASE_SUBS,
                                    l.default.curUplinkStreamNum > l.default.maxUpLinkStreamNumLimit && (l.default.maxUpLinkStreamNumLimit = l.default.curUplinkStreamNum));
                                for (var e = null, t = o.default.extendConfig.p2pConfig.coderates, i = 0; i < t.length; i++)
                                    if (e = t[i],
                                    o.default.curBitRate > Number(e[0])) {
                                        S.default.PROXY_NUM = Number(e[1]),
                                            S.default.SLICE_DELAY = Number(e[2]),
                                            S.default.MAX_PUSH_NUM = Number(e[3]),
                                            S.default.MAX_PULL_NUM = Number(e[4]),
                                            S.default.SLICE_LARGE = Number(e[5]);
                                        break
                                    }
                                S.default.MAX_PEER_STREAM_NUM = Number(o.default.extendConfig.p2pConfig.maxPeerStreamNum);
                                var a = S.default.SLICE_SPEED * l.default.maxSubNum * (o.default.curBitRate / 1e3);
                                S.default.SLICE_LATE = parseInt(a * (Number(o.default.extendConfig.p2pConfig.sliceLate) / 1e3)),
                                    S.default.SLICE_FAST = parseInt(a * (Number(o.default.extendConfig.p2pConfig.sliceFast) / 1e3)),
                                    S.default.STREAM_DELAY = Number(o.default.extendConfig.p2pConfig.badDelay),
                                    S.default.EMULATE_DELAY = Number(o.default.extendConfig.p2pConfig.emuteDelay),
                                    S.default.RESUB_TIMEOUT = Number(o.default.extendConfig.p2pConfig.resubTime),
                                    S.default.SLICE_TIMEOUT = Number(o.default.extendConfig.p2pConfig.sliceTimeout),
                                    S.default.SWITCH_MIN = Number(o.default.extendConfig.p2pConfig.switchMin),
                                    S.default.SWITCH_MAX = Number(o.default.extendConfig.p2pConfig.switchMax),
                                    S.default.SWITCH_TIME = Number(o.default.extendConfig.p2pConfig.switchTime),
                                    c.default.initStream()
                            }
                        }
                    }, {
                        key: "start",
                        value: function() {
                            this.isSupport() && (l.default.started || (l.default.started = !0,
                                l.default.baseTime = u.default.now(),
                                r.default.add(this.onCheckTimer, this, 1e3),
                                r.default.add(this.onCheckFastTimer, this, 100)))
                        }
                    }, {
                        key: "restart",
                        value: function() {
                            this.resetRestart(),
                                c.default.restart()
                        }
                    }, {
                        key: "cdnpReconnect",
                        value: function() {
                            var e = c.default.getCompeteStreams();
                            e.length > 0 && f.default.sendCompeteReq(e);
                            var t = c.default.getForceStreams();
                            t.length > 0 && f.default.sendForceSubscribeNotify(t)
                        }
                    }, {
                        key: "resetRestart",
                        value: function() {
                            l.default.started = !1,
                                _.default.reset(),
                                l.default.reset(),
                                v.default.reset(),
                                m.default.reset(),
                                y.default.reset(),
                                r.default.remove(this.onCheckTimer, this),
                                r.default.remove(this.onCheckFastTimer, this)
                        }
                    }, {
                        key: "stop",
                        value: function() {
                            g.default.log("P2PMgr stop started", l.default.started),
                                this.resetRestart(),
                                h.default.reset(),
                                c.default.reset(),
                                p.default.reset()
                        }
                    }, {
                        key: "getUplinkBw",
                        value: function() {
                            return h.default.getUplinkBw()
                        }
                    }, {
                        key: "getAvailPeers",
                        value: function() {
                            return h.default.getPunchedCnt()
                        }
                    }, {
                        key: "getBPunched",
                        value: function() {
                            return l.default.bPunched
                        }
                    }, {
                        key: "onCheckTimer",
                        value: function(e, t) {
                            l.default.opened && (h.default.onCheckTimer(e, t),
                                c.default.onCheckTimer(e, t),
                                _.default.onCheckTimer(e, t))
                        }
                    }, {
                        key: "onCheckFastTimer",
                        value: function(e, t) {
                            l.default.streamStarted && (c.default.onCheckFastTimer(e, t),
                                v.default.onCheckFastTimer(e, t)),
                            -1 !== l.default.baseTime && !l.default.opened && e - l.default.baseTime >= Number(o.default.extendConfig.p2pConfig.fastTime) && (l.default.opened = !0,
                                l.default.streamStarted = !0,
                                c.default.loadStreams(e),
                                d.default.sendGetNode())
                        }
                    }]),
                        e
                }();
                t.default = T
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = (a(i(9)),
                    a(i(3)))
                    , u = a(i(18))
                    , o = a(i(27))
                    , l = function() {
                    function e(t) {
                        (0,
                            s.default)(this, e),
                            this.H5Player = t,
                            this.lastTickTime = 0,
                            this.catonCheckStart = !0,
                            this.lastCheckerTimeStamp = 0,
                            this.visibilityChanged = !1,
                            this.lostVisibility = !1,
                            this.hidden = "",
                            this.visibilityChange = "",
                            this.addVisibilityChange()
                    }
                    return (0,
                        n.default)(e, [{
                        key: "reset",
                        value: function() {
                            this.lastTickTime = 0,
                                this.onRemoveWakeTimeoutChecker()
                        }
                    }, {
                        key: "addVisibilityChange",
                        value: function() {
                            void 0 !== document.hidden ? (this.hidden = "hidden",
                                this.visibilityChange = "visibilitychange") : void 0 !== document.msHidden ? (this.hidden = "msHidden",
                                this.visibilityChange = "msvisibilitychange") : void 0 !== document.webkitHidden && (this.hidden = "webkitHidden",
                                this.visibilityChange = "webkitvisibilitychange"),
                                document.addEventListener(this.visibilityChange, this.handleVisibilityChange.bind(this), !1)
                        }
                    }, {
                        key: "handleVisibilityChange",
                        value: function() {
                            document[this.hidden] ? this.lostVisibility = !0 : this.lostVisibility = !1,
                                this.visibilityChange = !0
                        }
                    }, {
                        key: "onCheckFastTimer",
                        value: function(e, t) {
                            if (0 != this.lastCheckerTimeStamp && this.catonCheckStart) {
                                var i = e - this.lastCheckerTimeStamp;
                                this.onWakeTimeoutTimeout(i)
                            }
                            this.lastCheckerTimeStamp = e
                        }
                    }, {
                        key: "startWakeTimeoutChecker",
                        value: function() {
                            this.catonCheckStart = !0
                        }
                    }, {
                        key: "onWakeTimeoutTimeout",
                        value: function(e) {
                            this.lostVisibility || this.visibilityChange ? this.visibilityChange = !1 : e < 3e3 || e > 15e3 || (this.H5Player.p2pCooling = !0,
                                localStorage.setItem("p2p_cooling_date", (new Date).getTime()),
                                u.default.sendMetrics([{
                                    sMetricName: u.default.METRIC.SDK_P2P_COOLING,
                                    vDimension: {
                                        b_browser: o.default.name,
                                        b_version: o.default.version.major
                                    }
                                }]),
                                r.default.log("CdnMgr onWakeTimeoutTimeout large than 3000 cost = " + e),
                            100 * Math.random() > 99 && this.H5Player.trigger(Event.P2P_REPORT))
                        }
                    }, {
                        key: "onWakeTimeoutError",
                        value: function(e) {
                            this.onRemoveWakeTimeoutChecker(),
                                r.default.log("MAIN: ", "ERROR", e),
                                r.default.log("filename:" + e.filename + "-message:" + e.message + "-lineno:" + e.lineno)
                        }
                    }, {
                        key: "onRemoveWakeTimeoutChecker",
                        value: function() {
                            this.catonCheckStart = !1,
                                this.lastCheckerTimeStamp = 0
                        }
                    }]),
                        e
                }();
                t.default = l
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(6))
                    , n = a(i(0))
                    , r = a(i(1))
                    , u = a(i(9))
                    , o = function() {
                    function e() {
                        (0,
                            n.default)(this, e),
                            this.ability = 0,
                            this.uplinkMax = 0,
                            this.hisIgnoreMap = new s.default
                    }
                    return (0,
                        r.default)(e, [{
                        key: "init",
                        value: function() {
                            localStorage.hasOwnProperty(e.HIS_ABILITY) && (this.ability = Number(localStorage.getItem(e.HIS_ABILITY)),
                                this.uplinkMax = parseInt(this.ability / u.default.curBitRate))
                        }
                    }, {
                        key: "setUplinkMax",
                        value: function(t) {
                            var i = t * u.default.curBitRate;
                            this.ability < i && (this.ability = i,
                                localStorage.setItem(e.HIS_ABILITY, i))
                        }
                    }, {
                        key: "addIgnore",
                        value: function(e) {}
                    }, {
                        key: "reset",
                        value: function() {
                            this.ability = 0,
                                this.uplinkMax = 0,
                                this.hisIgnoreMap.clear()
                        }
                    }]),
                        e
                }();
                o.HIS_ABILITY = "his_ability",
                    t.default = o
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = function() {
                    function e(t) {
                        (0,
                            s.default)(this, e),
                            this.cdnMgr = t,
                            window.addEventListener("beforeunload", this.onBeforeUnload.bind(this))
                    }
                    return (0,
                        n.default)(e, [{
                        key: "onBeforeUnload",
                        value: function(e) {
                            this.cdnMgr.reset()
                        }
                    }]),
                        e
                }();
                t.default = r
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(71))
                    , n = a(i(14))
                    , r = a(i(6))
                    , u = a(i(0))
                    , o = a(i(1))
                    , l = a(i(23))
                    , d = a(i(3))
                    , h = a(i(2))
                    , f = a(i(318))
                    , c = a(i(320))
                    , p = a(i(20))
                    , v = (a(i(8)),
                    a(i(11)))
                    , m = a(i(5))
                    , y = a(i(18))
                    , _ = a(i(27))
                    , S = a(i(41))
                    , g = a(i(321))
                    , T = (a(i(49)),
                    a(i(132)))
                    , P = a(i(142))
                    , I = a(i(140));
                a(i(68)),
                    a(i(139)),
                    a(i(141)),
                    a(i(136));
                var E = function() {
                    function e(t) {
                        (0,
                            u.default)(this, e),
                            this.H5Player = t,
                            this.p2pMgr = null,
                            this.started = !1,
                            this.startTs = 0,
                            this.flvPlayers = new r.default,
                            this.audioUidList = {},
                            l.default.proxyLink = new f.default(this,t),
                            l.default.videoLink = new c.default(this),
                            l.default.addListener(h.default.PLoginVideoProxyUniformlyRes, this.onLoginVideoProxyUniformlyRes, this),
                            l.default.addListener(h.default.PNotifyCurrentStream4, this.onPNotifyCurrentStream4, this),
                            l.default.addListener(h.default.PSubscribeStreamRes3, this.onSubscribeStreamRes3, this),
                            l.default.addListener(h.default.PStreamData3, this.onStreamData, this),
                            l.default.addListener(h.default.PStopStream3, this.onStopStream, this),
                            l.default.addListener(h.default.PStopStream, this.onStopStream, this),
                            l.default.addListener(h.default.PNotifyStreamSwitch, this.onPNotifyStreamSwitch, this),
                            l.default.addListener(h.default.PVideoSyncSpeakerTime3, this.onVideoSyncSpeakerTime, this)
                    }
                    return (0,
                        o.default)(e, [{
                        key: "getLine",
                        value: function() {
                            return 4
                        }
                    }, {
                        key: "startHuya",
                        value: function() {
                            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 8e3;
                            l.default.subSid ? (this.stopHuya(),
                                d.default.log("HuyaMgr.startHuya codeRate=" + e),
                                l.default.codeRate = Number(e),
                                this.started = !0,
                                this.startTs = m.default.now(),
                                l.default.proxyLink.switchCodeRate(l.default.codeRate),
                                v.default.add(this.onCheckTimer, this, 1e3),
                                v.default.add(this.onCheckFastTimer, this, 100)) : d.default.warn("HuyaMgr.startHuya No subSid.")
                        }
                    }, {
                        key: "stopHuya",
                        value: function() {
                            this.started && (d.default.log("HuyaMgr.stopHuya"),
                                this.started = !1,
                                l.default.codeRate = 0,
                                this.closeVideo(),
                                this.stopAllVoice(),
                                v.default.remove(this.onCheckTimer, this),
                                v.default.remove(this.onCheckFastTimer, this))
                        }
                    }, {
                        key: "closeVideo",
                        value: function() {
                            d.default.log("HuyaMgr.closeVideo"),
                                l.default.videoLink.close(),
                            this.p2pMgr && this.p2pMgr.stop();
                            var e = !0
                                , t = !1
                                , i = void 0;
                            try {
                                for (var a, s = (0,
                                    n.default)(this.flvPlayers.values()); !(e = (a = s.next()).done); e = !0)
                                    a.value.dispose()
                            } catch (e) {
                                t = !0,
                                    i = e
                            } finally {
                                try {
                                    !e && s.return && s.return()
                                } finally {
                                    if (t)
                                        throw i
                                }
                            }
                            this.flvPlayers.clear()
                        }
                    }, {
                        key: "stopPlayer",
                        value: function(e) {
                            var t = this.getPlayer(e);
                            if (t) {
                                d.default.log("HuyaMgr.stopPlayer uid=" + e),
                                    t.dispose(),
                                    this.flvPlayers.delete(e);
                                for (var i = window._audios || [], a = 0, s = i.length; a < s; a++) {
                                    var n = i[a].uid;
                                    if (n && n == e) {
                                        i.splice(a, 1);
                                        break
                                    }
                                }
                            }
                        }
                    }, {
                        key: "restartWithGOP",
                        value: function() {
                            l.default.getConfig(S.default.PUSH_GOP) || (d.default.warn("HuyaMgr.restartWithGOP"),
                                this.setConfig(S.default.PUSH_GOP, !0),
                                this.startHuya(l.default.codeRate))
                        }
                    }, {
                        key: "setConfig",
                        value: function(e, t) {
                            d.default.log("HuyaMgr.setConfig key=" + e + " value=" + t),
                                l.default.setConfig(e, t)
                        }
                    }, {
                        key: "getConfig",
                        value: function(e) {
                            return l.default.getConfig(e)
                        }
                    }, {
                        key: "startVoice",
                        value: function(e) {
                            v.default.add(this.onCheckTimer, this, 1e3),
                                v.default.add(this.onCheckFastTimer, this, 100);
                            var t = !1
                                , i = e.mStreamInfo.value;
                            for (var a in i) {
                                var s = i[a]
                                    , n = s.iLiveScenarioType;
                                if (1 == n) {
                                    var r = 0;
                                    1 == n ? r = 5 : 3 == n && (r = 6);
                                    var u = s.vStreamInfo.value;
                                    for (var o in u) {
                                        var h = {
                                            serviceType: r
                                        }
                                            , f = u[o];
                                        4 == f.iLineIndex && f.lPresenterUid != e.lPresenterUid && (h.sStreamName = f.sStreamName,
                                            h.lPresenterUid = f.lPresenterUid,
                                            h.lSubChannelId = f.lSubChannelId,
                                            this.audioUidList[f.lPresenterUid] = f.sStreamName,
                                            this.audioUidList[f.sStreamName] = f.lPresenterUid,
                                            l.default.proxyLink.getVoiceProxy(h),
                                            t = !0)
                                    }
                                }
                            }
                            0 == t && d.default.info("No pure audio stream.")
                        }
                    }, {
                        key: "stopVoice",
                        value: function(e) {
                            l.default.proxyLink.stopVoice(e.sStreamName);
                            var t = this.audioUidList[e.sStreamName];
                            t && (delete this.audioUidList[t],
                                delete this.audioUidList[e.sStreamName])
                        }
                    }, {
                        key: "stopAllVoice",
                        value: function() {
                            l.default.proxyLink.stopAllVoice(),
                                this.audioUidList = {},
                                window._audios = []
                        }
                    }, {
                        key: "onLoginVideoProxyUniformlyRes",
                        value: function(e) {
                            if (!e._isFromVoice) {
                                l.default.proxyAreaType = e.proxyAreaType,
                                    l.default.clientAreaType = e.clientAreaType,
                                    l.default.isFirstViewer = 1 == e.firstViewer;
                                var t = !0
                                    , i = !1
                                    , a = void 0;
                                try {
                                    for (var s, r = (0,
                                        n.default)(this.flvPlayers.values()); !(t = (s = r.next()).done); t = !0)
                                        s.value.resetVideo()
                                } catch (e) {
                                    i = !0,
                                        a = e
                                } finally {
                                    try {
                                        !t && r.return && r.return()
                                    } finally {
                                        if (i)
                                            throw a
                                    }
                                }
                                this.p2pMgr && (this.getP2pEnable() ? (this.p2pMgr.stop(),
                                    this.p2pMgr.start()) : this.p2pMgr.stop())
                            }
                        }
                    }, {
                        key: "onPNotifyCurrentStream4",
                        value: function(e) {
                            if (this.started || (this.started = !0),
                                e._isFromVoice)
                                this.onAudioPNotifyCurrentStream4(e);
                            else {
                                e.uid != l.default.presenterUid && (l.default.presenterUid = e.uid,
                                    d.default.log("presenterUid = " + l.default.presenterUid));
                                var t = null
                                    , i = 0
                                    , a = e.streamGroupId.isVideoStream;
                                if (a) {
                                    l.default.videoStreamId = e.streamGroupId,
                                        i = e.metaDatasMap.get(T.default.SERVER_FASTACCESS_MODE) || 0,
                                        l.default.videoMetaData = this.mergeMetaData(l.default.videoMetaData, e.metaDatasMap),
                                        t = l.default.videoMetaData,
                                        l.default.isH265 = Boolean(t.get(T.default.SERVER_H265_STREAM));
                                    var s = e.metaDatasMap.get(T.default.PUBLISHER_CUR_BIT_RATE) || 0;
                                    (s /= 1e3) && s != l.default.curBitRate && (0 == l.default.curBitRate ? d.default.log("bitrate " + s) : d.default.log("bitrate change " + l.default.curBitRate + "->" + s),
                                        l.default.curBitRate = s)
                                } else
                                    i = e.metaDatasMap.get(T.default.SERVER_FASTACCESS_MODE) || 0,
                                        l.default.audioStreamId = e.streamGroupId,
                                        l.default.audioMetaData = this.mergeMetaData(l.default.audioMetaData, e.metaDatasMap),
                                        t = l.default.audioMetaData;
                                var n = a ? "Video" : "Audio"
                                    , r = t ? t.get("log") : "";
                                if (r && (d.default.log("PNotifyCurrentStream4 " + n + ":" + r),
                                    t.delete("log")),
                                    i) {
                                    d.default.info(n + " AccessMode: " + ["normal", "pull", "push"][i]);
                                    var u = t.get(T.default.SERVER_FASTACCESS_FIRST_SEQ) || 0
                                        , o = t.get(T.default.SERVER_FASTACCESS_LAST_SEQ) || 0;
                                    1 != i || !u || !o || u <= 0 || u >= o || this.getOrNewPlayer(e.uid).setPullSeq(u, o, a)
                                }
                            }
                        }
                    }, {
                        key: "onAudioPNotifyCurrentStream4",
                        value: function(e) {}
                    }, {
                        key: "onSubscribeStreamRes3",
                        value: function(e) {
                            if (0 == e.resCode) {
                                var t = this.getOrNewPlayer(e.uid);
                                t && t.onSubscribeStreamRes(e)
                            } else {
                                var i = P.default[e.resCode];
                                d.default.error("HuyaMgr.onSubscribeStreamRes3", i)
                            }
                        }
                    }, {
                        key: "onStreamData",
                        value: function(e) {
                            var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
                            e.recvOsTime = m.default.now(),
                                e.peerUid = t;
                            var i = void 0
                                , a = this.getOrNewPlayer(e.uid);
                            (i = e.isVideo ? a.onVideoStreamData(e) : a.onAudioStreamData(e)) === g.default.RECV_TOO_LATE && (e.tooLate = !0),
                            i !== g.default.RECV_ERROR && g.default.TEMP_BUFFERED
                        }
                    }, {
                        key: "onStopStream",
                        value: function(e) {
                            if (this.started) {
                                var t = this.getPlayer(e.uid);
                                t && t.onStopStream(e)
                            }
                        }
                    }, {
                        key: "onPNotifyStreamSwitch",
                        value: function(e) {
                            d.default.warn("HuyaMgr.onPNotifyStreamSwitch switchReason=" + e.switchReason),
                                this.startHuya(l.default.codeRate)
                        }
                    }, {
                        key: "onVideoSyncSpeakerTime",
                        value: function(e) {
                            this.p2pMgr && this.p2pMgr.onVideoSyncSpeakerTime(e);
                            var t = this.getPlayer(e.uid);
                            t && t.onVideoSyncSpeakerTime(e)
                        }
                    }, {
                        key: "onCheckTimer",
                        value: function(e, t) {
                            if (this.started) {
                                var i = !0
                                    , a = !1
                                    , r = void 0;
                                try {
                                    for (var u, o = (0,
                                        n.default)(this.flvPlayers); !(i = (u = o.next()).done); i = !0) {
                                        var l = u.value
                                            , d = (0,
                                            s.default)(l, 2)
                                            , h = d[0];
                                        d[1].onCheckTimer(e, t) && this.flvPlayers.delete(h)
                                    }
                                } catch (e) {
                                    a = !0,
                                        r = e
                                } finally {
                                    try {
                                        !i && o.return && o.return()
                                    } finally {
                                        if (a)
                                            throw r
                                    }
                                }
                                this.p2pMgr && this.p2pMgr.onCheckTimer(e, t)
                            }
                        }
                    }, {
                        key: "onCheckFastTimer",
                        value: function(e, t) {
                            if (this.started) {
                                this.p2pMgr && this.p2pMgr.onCheckFastTimer(e, t);
                                var i = !0
                                    , a = !1
                                    , s = void 0;
                                try {
                                    for (var r, u = (0,
                                        n.default)(this.flvPlayers.values()); !(i = (r = u.next()).done); i = !0)
                                        r.value.onCheckFastTimer(e, t)
                                } catch (e) {
                                    a = !0,
                                        s = e
                                } finally {
                                    try {
                                        !i && u.return && u.return()
                                    } finally {
                                        if (a)
                                            throw s
                                    }
                                }
                            }
                        }
                    }, {
                        key: "subscribeAllStream",
                        value: function() {
                            var e = 0
                                , t = !0
                                , i = !1
                                , a = void 0;
                            try {
                                for (var s, r = (0,
                                    n.default)(this.flvPlayers.values()); !(t = (s = r.next()).done); t = !0) {
                                    var u = s.value;
                                    if (0 !== u.streamId.low) {
                                        var o = new I.default(this.userGroupId,u.streamId,l.default.getUid(),!0,0,0);
                                        this.sendVideo(o.marshall()),
                                            e++
                                    }
                                }
                            } catch (e) {
                                i = !0,
                                    a = e
                            } finally {
                                try {
                                    !t && r.return && r.return()
                                } finally {
                                    if (i)
                                        throw a
                                }
                            }
                            d.default.log("HuyaMgr.subscribeAllStream streamCnt=" + e)
                        }
                    }, {
                        key: "unsubscribeAllStream",
                        value: function() {
                            var e = 0
                                , t = !0
                                , i = !1
                                , a = void 0;
                            try {
                                for (var s, r = (0,
                                    n.default)(this.flvPlayers.values()); !(t = (s = r.next()).done); t = !0) {
                                    var u = s.value;
                                    if (0 !== u.streamId) {
                                        var o = new I.default(this.userGroupId,u.streamId,l.default.getUid(),!1,0,0);
                                        l.default.send(o.marshall()),
                                            e++
                                    }
                                }
                            } catch (e) {
                                i = !0,
                                    a = e
                            } finally {
                                try {
                                    !t && r.return && r.return()
                                } finally {
                                    if (i)
                                        throw a
                                }
                            }
                            d.default.log("HuyaMgr.unsubscribeAllStream streamCnt=" + e)
                        }
                    }, {
                        key: "getPlayer",
                        value: function(e) {
                            return this.flvPlayers.has(e) ? this.flvPlayers.get(e) : null
                        }
                    }, {
                        key: "getOrNewPlayer",
                        value: function(e) {
                            if (this.flvPlayers.has(e))
                                return this.flvPlayers.get(e);
                            var t = !!this.audioUidList[e];
                            d.default.log("HuyaMgr.getOrNewPlayer uid=" + e, t);
                            var i = new g.default(e,this,t);
                            return this.flvPlayers.set(e, i),
                                i
                        }
                    }, {
                        key: "getAllPlayer",
                        value: function() {
                            return this.flvPlayers
                        }
                    }, {
                        key: "setVolume",
                        value: function(e) {
                            var t = !0
                                , i = !1
                                , a = void 0;
                            try {
                                for (var s, r = (0,
                                    n.default)(this.flvPlayers.values()); !(t = (s = r.next()).done); t = !0)
                                    s.value.msePlayer.setVolume(e)
                            } catch (e) {
                                i = !0,
                                    a = e
                            } finally {
                                try {
                                    !t && r.return && r.return()
                                } finally {
                                    if (i)
                                        throw a
                                }
                            }
                        }
                    }, {
                        key: "setMuted",
                        value: function(e) {
                            var t = !0
                                , i = !1
                                , a = void 0;
                            try {
                                for (var s, r = (0,
                                    n.default)(this.flvPlayers.values()); !(t = (s = r.next()).done); t = !0)
                                    s.value.msePlayer.setMuted(e)
                            } catch (e) {
                                i = !0,
                                    a = e
                            } finally {
                                try {
                                    !t && r.return && r.return()
                                } finally {
                                    if (i)
                                        throw a
                                }
                            }
                        }
                    }, {
                        key: "getMuted",
                        value: function() {
                            var e = !0
                                , t = !1
                                , i = void 0;
                            try {
                                for (var a, s = (0,
                                    n.default)(this.flvPlayers.values()); !(e = (a = s.next()).done); e = !0)
                                    return a.value.msePlayer.getMuted()
                            } catch (e) {
                                t = !0,
                                    i = e
                            } finally {
                                try {
                                    !e && s.return && s.return()
                                } finally {
                                    if (t)
                                        throw i
                                }
                            }
                            return -1
                        }
                    }, {
                        key: "onPlayVideo",
                        value: function(e, t, i, a, s) {
                            var n = m.default.now();
                            l.default.onPlayTime = n,
                                d.default.log("%c[TIME] onPlayTime=" + (n - l.default.firstRenderTime) + " totalTime=" + (n - l.default.startTime), "color:#A23400;background:#FFF5C2"),
                                t.autoplay = !0,
                                t.volume = this.H5Player.getVolume(),
                                this.H5Player.trigger(p.default.VIDEO_PLAY, {
                                    uid: e,
                                    video: t,
                                    width: i,
                                    height: a,
                                    hasVideo: s
                                }),
                                0 !== this.startTs ? (y.default.sendCdnTime(l.default, !1),
                                    d.default.log("%cHuyaMgr.onPlayVideo uid=" + e + " w/h=" + i + "/" + a + " loadTime=" + (l.default.onPlayTime - this.startTs), "color:#A23400;background:#FFF5C2"),
                                    this.startTs = 0,
                                    l.default.printUseTime()) : d.default.log("HuyaMgr.onPlayVideo uid=" + e + " w/h=" + i + "/" + a)
                        }
                    }, {
                        key: "onPlayAudio",
                        value: function(e, t) {
                            d.default.log("HuyaMgr.onPlayAudio uid=" + e),
                                t.volume = this.H5Player.getVolume(),
                                t.autoplay = !0,
                                t.uid = e;
                            var i = window._audios || [];
                            i.push(t),
                                window._audios = i
                        }
                    }, {
                        key: "callback",
                        value: function(e) {
                            var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
                            this.H5Player.trigger(e, t)
                        }
                    }, {
                        key: "mergeMetaData",
                        value: function(e, t) {
                            var i = new r.default;
                            if (e && e.forEach(function(e, t) {
                                i.set(t, e)
                            }),
                                t) {
                                var a = "";
                                t.forEach(function(t, s) {
                                    if (e && 7 != s && 255 != s) {
                                        var n = e.get(s);
                                        void 0 == n && (n = "[]"),
                                        n != t && (a += "\n+---- " + s + ": " + n + "->" + t)
                                    }
                                    i.set(s, t)
                                }),
                                a.length > 0 && i.set("log", a)
                            }
                            return i
                        }
                    }, {
                        key: "getUplinkBw",
                        value: function() {
                            return this.p2pMgr ? this.p2pMgr.getLatestUplinkBw() : 0
                        }
                    }, {
                        key: "getAvailPeerNodeNum",
                        value: function() {
                            return this.p2pMgr ? this.p2pMgr.nodeMgr.punchedCnt : 0
                        }
                    }, {
                        key: "getP2pEnable",
                        value: function() {
                            return !_.default.msedge && l.default.getConfig(S.default.VIDEO_P2P_MODE)
                        }
                    }]),
                        e
                }();
                t.default = E
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(23))
                    , u = a(i(3))
                    , o = (a(i(11)),
                    a(i(5)))
                    , l = (a(i(47)),
                    a(i(63)))
                    , d = a(i(319))
                    , h = a(i(20))
                    , f = a(i(66))
                    , c = a(i(133))
                    , p = function() {
                    function e(t, i) {
                        (0,
                            s.default)(this, e),
                            this.huyaMgr = t,
                            this.H5Player = i,
                            this._delayGetProxy = !1,
                            this._retryTimer = 0,
                            this._codeRate = 420,
                            this._voiceTsDict = {},
                            this._voiceDict = {},
                            window._audioLinks = this._voiceDict,
                            l.default.connected ? this._onConnected() : l.default.inited ? l.default.addListener(l.default.WEBSOCKET_CONNECTED, this._onConnected.bind(this)) : r.default.addListener(l.default.TAFLINK_INITED, this._onConnected.bind(this))
                    }
                    return (0,
                        n.default)(e, [{
                        key: "_onConnected",
                        value: function() {
                            this._delayGetProxy && (this._delayGetProxy = !1,
                                this.getProxy())
                        }
                    }, {
                        key: "sendWup",
                        value: function(e, t, i) {
                            var a = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3]
                                , s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : null;
                            l.default.sendWup(e, t, i, a, s)
                        }
                    }, {
                        key: "sendYY",
                        value: function(e, t) {
                            var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0
                                , a = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3]
                                , s = i || r.default.getUid();
                            l.default.sendYY(e, t, s, a, !1)
                        }
                    }, {
                        key: "switchCodeRate",
                        value: function() {
                            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 8e3;
                            (e = Number(e)) > 0 && e % 100 == 0 && (e = e <= 8e3 ? e / 100 + 400 | 0 : e / 100 + 1e3 | 0),
                                this._codeRate = e,
                                this.getProxy()
                        }
                    }, {
                        key: "getProxy",
                        value: function() {
                            if (l.default.connected) {
                                this._retryTimer && (clearTimeout(this._retryTimer),
                                    this._retryTimer = 0);
                                var e = new f.default;
                                e.sid = r.default.subSid,
                                    e.fuzzyParam.h264Only = !0,
                                    e.fuzzyParam.maxCodeRateH264 = this._codeRate,
                                    e.fuzzyParam.maxCodeRateH265 = 580;
                                var t = new c.default;
                                t.uid = r.default.getUid(),
                                    t.version = 1,
                                    t.sdkVersion = 1,
                                    t.fuzzyQueryKeys = [e],
                                    t.appid = r.default.appid,
                                    t.clientAppid = 0,
                                    t.clientType = 4,
                                    t.sendTime = .001 * Date.now() >> 0,
                                    r.default.initUseTime(o.default.now()),
                                    this.sendYY(t, this._rspProxy.bind(this))
                            } else
                                this._delayGetProxy = !0
                        }
                    }, {
                        key: "_rspProxy",
                        value: function(e) {
                            if (r.default.getVPTime = o.default.now(),
                                u.default.log("%c[TIME] getVPTime=" + (r.default.getVPTime - r.default.startTime), "color:#A23400;background:#FFF5C2"),
                            0 == e.result)
                                r.default.videoLink.connect(e);
                            else {
                                var t = "UNKNOWN ERROR!";
                                if (1 == e.result ? t = "EGetVP_NO_RESOURCE" : 2 == e.result && (t = "EGetVP_FUZZY_NO_MATCH"),
                                    u.default.warn("ProxyLink", t),
                                1 == e.retryType)
                                    this.H5Player.trigger(h.default.NO_VIDEO);
                                else {
                                    var i = this;
                                    this._retryTimer = setTimeout(function() {
                                        u.default.log("ProxyLink retry getProxy"),
                                            i.getProxy()
                                    }, 1e3 * e.retryFreq)
                                }
                            }
                        }
                    }, {
                        key: "getVoiceProxy",
                        value: function(e) {
                            var t = this
                                , i = o.default.now()
                                , a = e.sStreamName
                                , s = this._voiceTsDict[a];
                            if (s && i - s < 1e3)
                                u.default.log("ProxyLink.getVoiceProxy exist", a);
                            else {
                                this._voiceTsDict[a] = i;
                                var n = new f.default;
                                n.sid = e.lSubChannelId,
                                    n.fuzzyParam.h264Only = !0,
                                    n.fuzzyParam.maxCodeRateH264 = 480,
                                    n.fuzzyParam.maxCodeRateH265 = 580;
                                var l = (Date.now() % 1e10 * 1e3 + (1e3 * Math.random() | 0)) % 4294967295;
                                u.default.log("ProxyLink.getVoiceProxy uuid=" + l);
                                var h = new c.default;
                                h.uid = l,
                                    h.version = 1,
                                    h.sdkVersion = 1,
                                    h.fuzzyQueryKeys = [n],
                                    h.streamNames = [a],
                                    h.appid = r.default.appid,
                                    h.clientAppid = 0,
                                    h.clientType = 4,
                                    h.sendTime = .001 * Date.now() >> 0,
                                    h.useCase = 1,
                                    this.sendYY(h, function(i) {
                                        if (i.uid == h.uid) {
                                            if (0 != i.result) {
                                                var s = "UNKNOWN ERROR!";
                                                return 1 == i.result ? s = "EGetVP_NO_RESOURCE" : 2 == i.result && (s = "EGetVP_FUZZY_NO_MATCH"),
                                                    void u.default.warn("ProxyLink.getVoiceProxy", s)
                                            }
                                            t.stopVoice(a),
                                                u.default.log("%cProxyLink.startVoice lPresenterUid=" + e.lPresenterUid + "\nsStreamName=" + a, "background:#FFBFFF");
                                            var n = new d.default(e);
                                            n.uid = h.uid,
                                                n.connect(i),
                                                t._voiceDict[a] = n
                                        }
                                    }
                                        .bind(this), l, !1)
                            }
                        }
                    }, {
                        key: "stopVoice",
                        value: function(e) {
                            var t = this._voiceDict[e];
                            if (t) {
                                u.default.log("%cProxyLink.stopVoice " + e, "background:#FFBFFF"),
                                    delete this._voiceDict[e];
                                var i = t.puid;
                                t.destroy(),
                                    this.huyaMgr.stopPlayer(i)
                            }
                        }
                    }, {
                        key: "stopAllVoice",
                        value: function() {
                            for (var e in u.default.log("ProxyLink.stopAllVoice"),
                                this._voiceDict) {
                                var t = this._voiceDict[e];
                                if (t) {
                                    var i = t.puid;
                                    t.destroy(),
                                        this.huyaMgr.stopPlayer(i)
                                }
                            }
                            this._voiceDict = {},
                                window._audioLinks = this._voiceDict
                        }
                    }, {
                        key: "sendToAudioServ",
                        value: function(e, t) {
                            var i = this._voiceDict[e];
                            i && t && i.send(t)
                        }
                    }]),
                        e
                }();
                t.default = p
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                function s(e) {
                    return "color:" + e + ";font-weight:900"
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var n = a(i(6))
                    , r = a(i(0))
                    , u = a(i(1))
                    , o = a(i(23))
                    , l = a(i(3))
                    , d = a(i(2))
                    , h = a(i(52))
                    , f = a(i(33))
                    , c = a(i(11))
                    , p = a(i(5))
                    , v = a(i(41))
                    , m = a(i(8))
                    , y = a(i(50))
                    , _ = a(i(67))
                    , S = a(i(69))
                    , g = 0
                    , T = function() {
                    function e(t) {
                        (0,
                            r.default)(this, e),
                            this.voiceInfo = t,
                            this.puid = t.lPresenterUid,
                            this._num_ = ++g,
                            this.uid = 0,
                            this.link = new h.default(this,!0,100),
                            this.printProtocol = !!Number(localStorage._printProtocol),
                            this.started = !1,
                            this.proxys = null,
                            this.streamIds = [],
                            this.tokens = new n.default,
                            this.connectedTime = 0,
                            this.lastGetProxyTime = 0,
                            this.pingCnt = 0,
                            this.wsUrl = "",
                            this.sslUrl = ""
                    }
                    return (0,
                        u.default)(e, [{
                        key: "destroy",
                        value: function() {
                            l.default.log("AudioLink.destroy", this.puid),
                                this.close(),
                            this.link && this.link.destroy(),
                                this.link = null,
                                this.voiceInfo = null
                        }
                    }, {
                        key: "close",
                        value: function() {
                            this.started && (l.default.info("AudioLink.close", this.puid),
                                this.started = !1,
                                this.reset(),
                                c.default.remove(this.onCheckTimer, this))
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            l.default.log("AudioLink.reset", this.puid),
                                this.vps = null,
                                this.link.destroy(),
                                this.link = new h.default(this,!0,100),
                                this.lastGetProxyTime = 0,
                                this.pingCnt = 0,
                                this.proxys = null,
                                this.streamIds = [],
                                this.tokens.clear(),
                                this.connectedTime = 0
                        }
                    }, {
                        key: "connect",
                        value: function(e) {
                            this.vps = e,
                                this.sslUrl = e.sslUrl || "",
                                l.default.log("AudioLink sslUrl=" + this.sslUrl);
                            var t = [];
                            if (e.allocatedStreams.forEach(function(e, i) {
                                t = t.concat(e)
                            }),
                            0 !== t.length) {
                                this.lastGetProxyTime = p.default.now() - 3e3,
                                    this.link.destroy(),
                                    this.link = new h.default(this,!0,100);
                                var i = this.tokens;
                                i.clear();
                                var a = []
                                    , s = null;
                                if (t.forEach(function(e) {
                                    var t = e.streamId
                                        , n = t.streamType
                                        , r = t.codecType;
                                    n += n < 10 ? "\t\t" : "\t",
                                        r += r < 10 ? "\t\t" : "\t",
                                        l.default.info("sg --- streamType=" + n + "codecType=" + r + "startTs=" + t.startTs, t.isVideoStream ? "drop" : ""),
                                    t.isVideoStream || (a.push(t),
                                        i.set(t, e.token),
                                    !s && e && (s = e.videoProxyInfos.slice()))
                                }),
                                !s || 0 != s.length)
                                    return this.streamIds = a,
                                        this.proxys = s,
                                        this.started = !0,
                                        this.pingCnt = 0,
                                        this.reconnect(),
                                        c.default.add(this.onCheckTimer, this, 1e3),
                                        this.wsUrl.replace(/ws+?:\/\//g, "");
                                l.default.warn("AudioLink.connect NO STREAM!")
                            } else
                                l.default.warn("AudioLink.connect proxys is empty")
                        }
                    }, {
                        key: "reconnect",
                        value: function() {
                            if (this.started)
                                if (this.proxys && 0 != this.proxys.length) {
                                    var e = this.proxys.shift();
                                    this.isWss(e) ? this.connectWss(e) : this.connectWs(e)
                                } else
                                    this.getProxy()
                        }
                    }, {
                        key: "isWss",
                        value: function(e) {
                            return !(!this.sslUrl || !e.videoProxyInfo.has(8)) && e.videoProxyInfo.get(8) > 0
                        }
                    }, {
                        key: "connectWs",
                        value: function(e) {
                            var t = Math.floor(Math.random() * e.tcpPorts.length)
                                , i = t;
                            if (465 === e.tcpPorts[t] && (++t >= e.tcpPorts.length && (t = 0),
                            t === i))
                                return l.default.warn("AudioLink.connect has no correct ports"),
                                    void this.reconnect();
                            this.wsUrl = "ws://" + e.ip + ":" + e.tcpPorts[t],
                                l.default.info("%cconnecting audio " + this.wsUrl, s("#0000E3")),
                                localStorage._setWssUrl ? this.link.connect(localStorage._setWssUrl) : this.link.connect(this.wsUrl)
                        }
                    }, {
                        key: "connectWss",
                        value: function(e) {
                            var t = e.videoProxyInfo.get(8)
                                , i = [t >> 16, 65535 & t]
                                , a = i[Math.floor(Math.random() * i.length)];
                            this.wsUrl = "wss://" + m.default.ip2uint(e.ip) + this.sslUrl + ":" + a,
                                l.default.info("%cconnecting audio " + this.wsUrl, s("#0000E3")),
                                localStorage._setWssUrl ? this.link.connect(localStorage._setWssUrl) : this.link.connect(this.wsUrl)
                        }
                    }, {
                        key: "send",
                        value: function(e) {
                            if (!e || !this.connected)
                                return !1;
                            var t = e.constructor.name;
                            return this.printProtocol && !P[t] && l.default.debug("%c>>>>> " + t, s("#F101AC"), e),
                            "Uint8Array" != t && (e = e.marshall()),
                                this.link.send(e),
                                !0
                        }
                    }, {
                        key: "getProxy",
                        value: function() {
                            var e = p.default.now();
                            e - this.lastGetProxyTime < 5e3 || (l.default.log("AudioLink.getProxy lastGetProxyTime=" + this.lastGetProxyTime + " now=" + e),
                                this.reset(),
                                this.lastGetProxyTime = e,
                                o.default.proxyLink.getVoiceProxy(this.voiceInfo))
                        }
                    }, {
                        key: "onopen",
                        value: function() {
                            l.default.log("AudioLink.onopen");
                            var e = p.default.now();
                            this.connectedTime = e,
                                o.default.addListener(d.default.PLoginVideoProxyUniformlyRes, this.onLoginVideoProxy, this),
                                o.default.addListener(d.default.PVideoProxyPingRes4, this.onVideoProxyPingRes, this),
                                this.login()
                        }
                    }, {
                        key: "onclose",
                        value: function() {
                            l.default.log("%cVideoLink.onclose", "color:white;background:black;"),
                                this.connectedTime = 0,
                                this.reconnect()
                        }
                    }, {
                        key: "onerror",
                        value: function(e) {
                            l.default.warn("AudioLink.onerror", e),
                                this.reconnect()
                        }
                    }, {
                        key: "onData",
                        value: function(e, t) {
                            var a = new f.default(t)
                                , n = d.default[e];
                            if (!n)
                                throw new Error("[x] Unmatched uri, uri=" + (a.uri >> 8) + " resCode=" + a.resCode + " len=" + a.len);
                            var r = a
                                , u = null;
                            try {
                                u = i(126)("./" + n).default
                            } catch (t) {
                                l.default.warn("%c[x] Unmatched protocol " + (e >> 8) + " " + n, "color:red;background:#FFF0F0")
                            }
                            u && (void 0 == (r = new u).unmarshall ? l.default.error("[x]" + n + ".unmarshall undefined!") : r.unmarshall(a)),
                            Number(localStorage._printAudioPkg) && e == d.default.PStreamData3 && l.default.debug(this._num_, "-----------", r),
                            this.printProtocol && !P[n] && l.default.debug("%c<<<<< " + n, s("#6F00D2"), r),
                                r._isFromVoice = !0,
                                o.default._onYYData(e, r)
                        }
                    }, {
                        key: "onCheckTimer",
                        value: function(e, t) {
                            if (this.started && (this.onPingTimer(e, t),
                                this.onCheckConnect(e, t),
                            t % 10 == 0)) {
                                var i = this.link.speed;
                                i != m.default.UintMax && (i = m.default.formatByteSize(i),
                                    l.default.log(this._num_, "huya AudioLink speed " + i + "/s"))
                            }
                        }
                    }, {
                        key: "onPingTimer",
                        value: function(e, t) {
                            if (this.link.connected && t % 3 == 0) {
                                if (this.pingCnt >= 4)
                                    return l.default.warn("AudioLink.onPingTimer ping time out", this.puid),
                                        void this.reconnect();
                                this.pingCnt++;
                                var i = new S.default;
                                i.uid = this.uid,
                                    i.stampc = e,
                                    i.loginStamp = 0,
                                    i.uplinkBw = 0,
                                    i.availPeers = 0,
                                    i.bPunched = !1,
                                    i.tcpEstableIds = 0,
                                    i.tcpId = 0,
                                    i.vipUser = 0,
                                    i.vipProxy = 0,
                                    this.send(i)
                            }
                        }
                    }, {
                        key: "onCheckConnect",
                        value: function(e) {
                            this.connected || this.reconnect()
                        }
                    }, {
                        key: "login",
                        value: function() {
                            var e = new _.default;
                            e.version = 1,
                                e.uid = this.uid,
                                e.streamGroupIds = this.streamIds,
                                e.clientAppid = 301,
                                e.clientType = 1,
                                e.loginStamp = p.default.now(),
                                e.videoGroupId = this.vps.videoGroupId,
                                e.tcpId = 0,
                                e.commandType = 1,
                                e.fastAccessInterval = o.default.getConfig(v.default.VIDEO_JIT_BUFLEN),
                            e.fastAccessInterval > 0 && e.fastAccessInterval < 2e3 && (e.fastAccessInterval = 2e3),
                                e.cookie = "",
                                e.localIps = [],
                                e.localPort = 0,
                                e.sdkVersion = 1,
                                e.token = "",
                                e.tokenVersion = this.vps.tokenVersion,
                                e.tokens = this.tokens,
                                e.audioCodecType = [y.default.AUDIO_AACPLUS],
                                e.serviceType = this.voiceInfo.serviceType,
                                e.loginSeq = 0,
                                this.send(e)
                        }
                    }, {
                        key: "onLoginVideoProxy",
                        value: function(e) {
                            e.reject > 0 && l.default.warn("AudioLink.onLoginVideoProxy reject=" + e.reject)
                        }
                    }, {
                        key: "onVideoProxyPingRes",
                        value: function(e) {
                            this.pingCnt = 0
                        }
                    }, {
                        key: "connected",
                        get: function() {
                            return this.link && this.link.connected
                        }
                    }]),
                        e
                }();
                t.default = T;
                var P = {
                    PStreamData3: 1,
                    PVideoProxyPing3: 1,
                    PVideoProxyPingRes4: 1,
                    PNotifyCurrentStream4: 1,
                    PP2pVideoPing3: 1,
                    PNotifyUplinkRecvCount3: 1,
                    PVideoSyncSpeakerTime3: 1
                }
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                function s(e) {
                    return "color:" + e + ";font-weight:900"
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var n = a(i(6))
                    , r = a(i(0))
                    , u = a(i(1))
                    , o = a(i(23))
                    , l = a(i(3))
                    , d = a(i(2))
                    , h = a(i(52))
                    , f = a(i(33))
                    , c = a(i(8))
                    , p = a(i(11))
                    , v = a(i(5))
                    , m = a(i(41))
                    , y = a(i(15))
                    , _ = a(i(50))
                    , S = a(i(67))
                    , g = a(i(69))
                    , T = function() {
                    function e(t) {
                        (0,
                            r.default)(this, e),
                            this.huyaMgr = t,
                            this.vps = null,
                            this.link = new h.default(this,!0,1e3),
                            this.printProtocol = !!Number(localStorage._printProtocol),
                            this.started = !1,
                            this.proxys = null,
                            this.streamIds = [],
                            this.tokens = new n.default,
                            this.connectedTime = 0,
                            this.forceConnectTime = 0,
                            this.lastGetProxyTime = 0,
                            this.pingCnt = 0,
                            this.wsUrl = "",
                            this.sslUrl = "",
                            this.rttCalc = new y.default(12),
                            this.rttMax = 0,
                            this.selfIp = "",
                            this.selfPort = 0
                    }
                    return (0,
                        u.default)(e, [{
                        key: "destroy",
                        value: function() {
                            this.close(),
                                this.link.destroy(),
                                this.link = null
                        }
                    }, {
                        key: "close",
                        value: function() {
                            this.started && (l.default.info("VideoLink.close"),
                                this.started = !1,
                                this.forceConnectTime = 0,
                                this.reset(),
                                p.default.remove(this.onCheckTimer, this))
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            l.default.log("VideoLink.reset"),
                                this.vps = null,
                                this.link.destroy(),
                                this.link = new h.default(this,!0,1e3),
                                this.lastGetProxyTime = 0,
                                this.pingCnt = 0,
                            o.default.p2pMgr && o.default.p2pMgr.stop(),
                                this.proxys = null,
                                this.streamIds = [],
                                this.tokens.clear(),
                                this.connectedTime = 0,
                                this.rttMax = 0,
                                this.rttCalc.reset()
                        }
                    }, {
                        key: "connect",
                        value: function(e) {
                            this.vps = e,
                                this.sslUrl = e.sslUrl || "",
                                o.default.userArea = e.userArea;
                            var t = [];
                            if (e.allocatedStreams.forEach(function(e, i) {
                                t = t.concat(e)
                            }),
                            0 !== t.length) {
                                this.lastGetProxyTime = v.default.now() - 3e3,
                                    this.forceConnectTime = 0,
                                    this.link.destroy(),
                                    this.link = new h.default(this,!0,1e3);
                                var i = this.tokens;
                                i.clear();
                                var a = []
                                    , s = null;
                                if (t.forEach(function(e) {
                                    var t = e.streamId
                                        , n = t.streamType
                                        , r = t.codecType;
                                    n += n < 10 ? "\t\t" : "\t",
                                        r += r < 10 ? "\t\t" : "\t",
                                        l.default.info("sg --- streamType=" + n + "codecType=" + r + "startTs=" + t.startTs),
                                        a.push(t),
                                        i.set(t, e.token),
                                    !s && e && (s = e.videoProxyInfos.slice())
                                }),
                                !s || 0 != s.length)
                                    return this.streamIds = a,
                                        this.proxys = s,
                                        this.started = !0,
                                        this.pingCnt = 0,
                                        this.reconnect(),
                                        p.default.add(this.onCheckTimer, this, 1e3),
                                        this.wsUrl.replace(/ws+?:\/\//g, "");
                                l.default.warn("VideoLink.connect NO STREAM!")
                            } else
                                l.default.warn("VideoLink.connect proxys is empty")
                        }
                    }, {
                        key: "reconnect",
                        value: function() {
                            if (this.started)
                                if (this.proxys && 0 != this.proxys.length) {
                                    var e = this.proxys.shift();
                                    this.isWss(e) ? this.connectWss(e) : this.connectWs(e)
                                } else
                                    this.getProxy()
                        }
                    }, {
                        key: "isWss",
                        value: function(e) {
                            return !(!this.sslUrl || !e.videoProxyInfo.has(8)) && e.videoProxyInfo.get(8) > 0
                        }
                    }, {
                        key: "connectWs",
                        value: function(e) {
                            var t = Math.floor(Math.random() * e.tcpPorts.length)
                                , i = t;
                            if (465 === e.tcpPorts[t] && (++t >= e.tcpPorts.length && (t = 0),
                            t === i))
                                return l.default.warn("VideoLink.connect has no correct ports"),
                                    void this.reconnect();
                            this.wsUrl = "ws://" + e.ip + ":" + e.tcpPorts[t],
                                l.default.info("%cconnecting video " + this.wsUrl, s("#0000E3")),
                                localStorage._setWssUrl ? this.link.connect(localStorage._setWssUrl) : this.link.connect(this.wsUrl)
                        }
                    }, {
                        key: "connectWss",
                        value: function(e) {
                            var t = e.videoProxyInfo.get(8)
                                , i = [t >> 16, 65535 & t]
                                , a = i[Math.floor(Math.random() * i.length)];
                            this.wsUrl = "wss://" + c.default.ip2uint(e.ip) + this.sslUrl + ":" + a,
                                l.default.info("%cconnecting video " + this.wsUrl, s("#0000E3")),
                                localStorage._setWssUrl ? this.link.connect(localStorage._setWssUrl) : this.link.connect(this.wsUrl)
                        }
                    }, {
                        key: "send",
                        value: function(e) {
                            if (!e || !this.connected)
                                return !1;
                            var t = e.constructor.name;
                            return this.printProtocol && !P[t] && l.default.debug("%c>>>>> " + t, s("#009100"), e),
                            "Uint8Array" != t && (e = e.marshall()),
                                this.link.send(e),
                                !0
                        }
                    }, {
                        key: "getProxy",
                        value: function() {
                            var e = v.default.now();
                            e - this.lastGetProxyTime < 5e3 || (l.default.log("VideoLink.getProxy lastGetProxyTime=" + this.lastGetProxyTime + " now=" + e),
                                this.reset(),
                                this.lastGetProxyTime = e,
                                o.default.proxyLink.getProxy())
                        }
                    }, {
                        key: "onopen",
                        value: function() {
                            l.default.log("VideoLink.onopen");
                            var e = v.default.now();
                            this.connectedTime = e,
                                o.default.connectVideoTime = e,
                                l.default.log("%c[TIME] connectVideoTime=" + (o.default.connectVideoTime - o.default.getVPTime) + " totalTime=" + (e - o.default.startTime), "color:#A23400;background:#FFF5C2"),
                                o.default.addListener(d.default.PLoginVideoProxyUniformlyRes, this.onLoginVideoProxy, this),
                                o.default.addListener(d.default.PVideoProxyPingRes4, this.onVideoProxyPingRes, this),
                                o.default.addListener(d.default.PForceConnectVideoProxy3, this.onForceReconnect, this),
                                this.login()
                        }
                    }, {
                        key: "onclose",
                        value: function() {
                            l.default.log("%cVideoLink.onclose", "color:white;background:black;"),
                                this.connectedTime = 0,
                                this.reconnect()
                        }
                    }, {
                        key: "onerror",
                        value: function(e) {
                            l.default.warn("VideoLink.onerror", e),
                                this.reconnect()
                        }
                    }, {
                        key: "onData",
                        value: function(e, t) {
                            var a = new f.default(t)
                                , n = d.default[e];
                            if (!n)
                                throw new Error("[x] Unmatched uri, uri=" + (a.uri >> 8) + " resCode=" + a.resCode + " len=" + a.len);
                            var r = a
                                , u = null;
                            try {
                                u = i(126)("./" + n).default
                            } catch (t) {
                                l.default.warn("%c[x] Unmatched protocol " + (e >> 8) + " " + n, "color:red;background:#FFF0F0")
                            }
                            u && (void 0 == (r = new u).unmarshall ? l.default.error("[x]" + n + ".unmarshall undefined!") : r.unmarshall(a)),
                            this.printProtocol && !P[n] && l.default.debug("%c<<<<< " + n, s("#0000E3"), r),
                                o.default._onYYData(e, r)
                        }
                    }, {
                        key: "onCheckTimer",
                        value: function(e, t) {
                            if (this.started && (this.onPingTimer(e, t),
                                this.onCheckConnect(e, t),
                                this.onForceConnectTimer(e, t),
                            t % 10 == 0)) {
                                var i = this.link.speed;
                                i != c.default.UintMax && (i = c.default.formatByteSize(i),
                                    l.default.log("huya VideoLink speed " + i + "/s"))
                            }
                        }
                    }, {
                        key: "onPingTimer",
                        value: function(e, t) {
                            if (this.link.connected && t % 3 == 0) {
                                if (this.pingCnt >= 4)
                                    return l.default.warn("VideoLink.onPingTimer ping time out"),
                                        void this.reconnect();
                                this.pingCnt++;
                                var i = new g.default;
                                i.uid = o.default.getUid(),
                                    i.stampc = e,
                                    i.loginStamp = 0,
                                    i.uplinkBw = 0,
                                    i.availPeers = 0,
                                    i.bPunched = !1,
                                    i.tcpEstableIds = 0,
                                    i.tcpId = 0,
                                    i.vipUser = 0,
                                    i.vipProxy = 0,
                                    this.send(i)
                            }
                        }
                    }, {
                        key: "onCheckConnect",
                        value: function(e) {
                            this.connected || this.forceConnectTime > 0 || this.reconnect()
                        }
                    }, {
                        key: "onForceConnectTimer",
                        value: function(e, t) {
                            if (!(this.forceConnectTime > e || 0 === this.forceConnectTime)) {
                                if (null === this.proxys)
                                    this.getProxy();
                                else {
                                    var i = this.proxys;
                                    this.reset(),
                                        this.lastGetProxyTime = e,
                                        this.proxys = i,
                                        this.reconnect(),
                                        l.default.info("VideoLink.onForceConnectTimer addr=" + this.wsUrl)
                                }
                                this.forceConnectTime = 0
                            }
                        }
                    }, {
                        key: "login",
                        value: function() {
                            var e = new S.default;
                            e.version = 1,
                                e.uid = o.default.getUid(),
                                e.streamGroupIds = this.streamIds,
                                e.clientAppid = 301,
                                e.clientType = 1,
                                e.loginStamp = v.default.now(),
                                e.videoGroupId = this.vps.videoGroupId,
                                e.tcpId = 0,
                                e.commandType = 1,
                                e.fastAccessInterval = o.default.getConfig(m.default.VIDEO_JIT_BUFLEN),
                            e.fastAccessInterval > 0 && e.fastAccessInterval < 2e3 && (e.fastAccessInterval = 2e3),
                                e.cookie = "",
                                e.localIps = [],
                                e.localPort = 0,
                                e.sdkVersion = 1,
                                e.token = "",
                                e.tokenVersion = this.vps.tokenVersion,
                                e.tokens = this.tokens,
                                e.audioCodecType = [_.default.AUDIO_AACPLUS],
                                e.serviceType = 0,
                                e.loginSeq = 0,
                                this.send(e)
                        }
                    }, {
                        key: "onLoginVideoProxy",
                        value: function(e) {
                            o.default.loginTime = v.default.now(),
                                l.default.log("%c[TIME] loginTime=" + (o.default.loginTime - o.default.connectVideoTime) + " totalTime=" + (o.default.loginTime - o.default.startTime), "color:#A23400;background:#FFF5C2"),
                                this.selfIp = c.default.inet_ntoa(e.wlanIp),
                                this.selfPort = e.wlanPort,
                            e.reject > 0 && l.default.warn("VideoLink.onLoginVideoProxy reject=" + e.reject)
                        }
                    }, {
                        key: "onVideoProxyPingRes",
                        value: function(e) {
                            this.pingCnt = 0,
                                o.default.videoNtp.ntpProcess(e.stampc, e.stamps);
                            var t = v.default.now()
                                , i = t - e.stampc;
                            i < 6e5 && this.onRtt(i),
                                o.default.downlinkRTOCalculator.CheckInvalidDownlinkRtt(i, t)
                        }
                    }, {
                        key: "onForceReconnect",
                        value: function(e) {
                            var t = v.default.now();
                            this.proxys = e.videoProxyIpInfo,
                                this.forceConnectTime = Math.round(e.reconnectTime * Math.random() * 1e3),
                                this.forceConnectTime < 1e3 ? this.forceConnectTime = t : this.forceConnectTime += t,
                                l.default.info("VideoLink.onForceReconnect time=" + e.reconnectTime + "-" + this.forceConnectTime + "-" + t + " status=" + e.reconnectStatus + " new proxy cnt=" + e.videoProxyInfo.length),
                                this.onForceConnectTimer(t, 0)
                        }
                    }, {
                        key: "getVideoConnectedDuration",
                        value: function() {
                            return this.link.connected ? v.default.now() - this.connectedTime : 0
                        }
                    }, {
                        key: "avgRtt",
                        value: function() {
                            var e = this.rttCalc.average();
                            return e === c.default.UintMax ? 0 : e
                        }
                    }, {
                        key: "getMaxRtt",
                        value: function() {
                            var e = this.rttMax;
                            return this.rttMax = 0,
                                e
                        }
                    }, {
                        key: "onRtt",
                        value: function(e) {
                            this.rttCalc.add(e),
                            e > this.rttMax && (this.rttMax = e)
                        }
                    }, {
                        key: "connected",
                        get: function() {
                            return this.link && this.link.connected
                        }
                    }]),
                        e
                }();
                t.default = T;
                var P = {
                    PStreamData3: 1,
                    PPullStreamData: 1,
                    PVideoProxyPing3: 1,
                    PVideoProxyPingRes4: 1,
                    PNotifyCurrentStream4: 1,
                    PReSendStreamData4: 1,
                    PP2pVideoPing3: 1,
                    PNotifyUplinkRecvCount3: 1,
                    PVideoSyncSpeakerTime3: 1
                }
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(23))
                    , u = a(i(3))
                    , o = a(i(8))
                    , l = a(i(5))
                    , d = a(i(27))
                    , h = a(i(208))
                    , f = a(i(41))
                    , c = a(i(143))
                    , p = a(i(49))
                    , v = a(i(2))
                    , m = a(i(33))
                    , y = a(i(322))
                    , _ = a(i(209))
                    , S = a(i(323))
                    , g = a(i(324))
                    , T = a(i(325))
                    , P = a(i(70))
                    , I = i(20)
                    , E = a(i(329))
                    , k = a(i(330))
                    , R = a(i(145))
                    , C = (a(i(331)),
                    a(i(332)))
                    , L = function() {
                    function e(t, i, a) {
                        (0,
                            s.default)(this, e),
                            this.uid = t,
                            this.huyaMgr = i,
                            this.isPureAudio = a,
                            this.flvHeader = g.default.getFlvHeader(),
                            this.msePlayer = new P.default(this,"yy",!0,a),
                            this.msePlayer.appendFlv(this.flvHeader),
                            this.msePlayer.setPushGop(r.default.getConfig(f.default.PUSH_GOP)),
                        this.isPureAudio && this.msePlayer.setJitter(200, 100, 400),
                            this.FIRST_TS_INIT = -1,
                            this.FIRST_TS_AUDIO = 0,
                            this.FIRST_TS_AUDIO_PUSH = 1,
                            this.FIRST_TS_VIDEO = 2,
                            this.FIRST_TS_VIDEO_PUSH = 3,
                            this.firstTsStatus = this.FIRST_TS_INIT,
                            this.firstTs = 0,
                            this.firstOsTs = 0,
                            this.lastPlayTs = 0,
                            this.lastPlayVideoSeq = 0,
                            this.lastPlayVideoKey = 0,
                            this.lastPlayAudioKey = 0,
                            this.lastAvcStr = null,
                            this.lastAacStr = null,
                            this.lastATs = 0,
                            this.VIDEO_STOP_TIME = 1e4,
                            this.AUDIO_STOP_TIME = 1e4,
                            this.lastRecvVideoTs = 0,
                            this.lastRecvAudioTs = 0,
                            this.videoChain = new h.default,
                            this.audioChain = new h.default,
                            this.videoPlayStat = new C.default(this),
                            this.audioSsrc = o.default.UintMax,
                            this.videoStatus = I.Status.VIDEO_STOP,
                            this.videoResender = new T.default(this),
                            this.videoQuickAccess = new y.default(t,!0),
                            this.audioQuickAccess = new y.default(t,!1),
                            this.JitterBufLen = 0,
                            this.pauseStartTs = 0,
                            this.osTime = 0,
                            this.localTime = 0,
                            r.default.addListener(v.default.PResendStreamDataFailAck, this.onResenderFailedAck, this)
                    }
                    return (0,
                        n.default)(e, [{
                        key: "dispose",
                        value: function() {
                            u.default.info("FlvPlayer.dispose uid=" + this.uid),
                                this.resetAudio(),
                                this.msePlayer.destroy(),
                                this.msePlayer = null,
                                this.resetVideo()
                        }
                    }, {
                        key: "resetVideo",
                        value: function() {
                            this.lastRecvVideoTs && u.default.info("FlvPlayer.resetVideo uid=" + this.uid),
                                this.lastRecvVideoTs = 0,
                                this.lastAvcStr = null,
                                this.updateStatus(I.Status.VIDEO_STOP),
                                this.videoChain.reset(),
                                this.videoQuickAccess.reset(),
                                this.audioQuickAccess.reset(),
                                this.videoResender.reset(),
                                this.videoPlayStat.reset(!0),
                                this.firstTsStatus = this.FIRST_TS_INIT,
                                this.firstTs = 0,
                                this.firstOsTs = 0,
                                this.lastPlayTs = 0,
                                this.lastPlayVideoKey = 0,
                                this.lastPlayVideoSeq = 0,
                                this.resetAudio(),
                            this.msePlayer && this.resetMsePlayer()
                        }
                    }, {
                        key: "resetAudio",
                        value: function() {
                            this.lastRecvAudioTs > 0 && u.default.info("FlvPlayer.resetAudio uid=" + this.uid),
                                this.lastRecvAudioTs = 0,
                                this.updateStatus(I.Status.AUDIO_STOP),
                            this.firstTsStatus !== this.FIRST_TS_AUDIO && this.firstTsStatus !== this.FIRST_TS_AUDIO_PUSH && this.firstTsStatus !== this.FIRST_TS_INIT || (this.lastPlayAudioKey = 0,
                                this.audioChain.reset(),
                                this.audioSsrc = o.default.UintMax,
                                this.firstTs = 0,
                                this.firstOsTs = 0,
                                this.firstTsStatus = this.FIRST_TS_INIT,
                                this.lastPlayTs = 0)
                        }
                    }, {
                        key: "resetMsePlayer",
                        value: function() {
                            u.default.log("FlvPlayer.resetMsePlayer uid=" + this.uid);
                            var e = void 0
                                , t = void 0;
                            null !== this.msePlayer && (e = this.msePlayer.getWidth(),
                                t = this.msePlayer.getHeight(),
                                this.msePlayer.destroy()),
                                this.msePlayer = new P.default(this,"yy"),
                                this.msePlayer.appendFlv(this.flvHeader),
                            this.isPureAudio && this.msePlayer.setJitter(200, 100, 400),
                            e && t && this.msePlayer.setResolution(e, t),
                                this.msePlayer.setPushGop(r.default.getConfig(f.default.PUSH_GOP)),
                                this.lastAacStr = null,
                                this.lastAvcStr = null,
                                this.pauseStartTs = 0
                        }
                    }, {
                        key: "onCheckTimer",
                        value: function(e, t) {
                            return this.lastRecvAudioTs && e - this.lastRecvAudioTs > this.AUDIO_STOP_TIME && (u.default.info("FlvPlayer.onCheckTimer stop audio uid=" + this.uid),
                                this.resetAudio()),
                            this.lastRecvVideoTs && e - this.lastRecvVideoTs > this.VIDEO_STOP_TIME && (u.default.info("FlvPlayer.onCheckTimer stop video uid=" + this.uid),
                                this.resetVideo()),
                                0 === this.lastRecvAudioTs && 0 === this.lastRecvVideoTs ? (this.dispose(),
                                    u.default.info("FlvPlayer.onCheckTimer remove uid=" + this.uid),
                                    !0) : (this.msePlayer && this.msePlayer.onCheckTimer(e, t),
                                    !1)
                        }
                    }, {
                        key: "onCheckFastTimer",
                        value: function(e, t) {
                            this.videoQuickAccess.checkPull(e),
                                this.audioQuickAccess.checkPull(e),
                            this.msePlayer && this.msePlayer.onCheckFastTimer(e, t),
                                this.play(e, t),
                                this.videoResender.onCheckFastTimer(e, t)
                        }
                    }, {
                        key: "checkVideoPushPlay",
                        value: function(e) {
                            if (!this.lastPlayTs) {
                                this.audioChain.size > 0 && this.audioChain.size < 40 && this.firstOsTs;
                                for (var t = this.videoChain.head, i = 0; null !== t; ) {
                                    var a = t.data;
                                    if (a.isFull)
                                        if (0 === i)
                                            a.dts === this.firstTs && (i = a.dts);
                                        else if (a.dts - i >= 500) {
                                            var s = 500 + this.JitterBufLen - (e - this.firstOsTs);
                                            return this.firstOsTs -= s,
                                                void u.default.log("FlvPlayer.checkVideoPushPlay start=" + i + " end=" + a.dts + " firstOsTs=" + this.firstOsTs + " elapseTime=" + (e - this.firstOsTs) + " modifyTime=" + s)
                                        }
                                    (t = t.next) === this.videoChain.head && (t = null)
                                }
                            }
                        }
                    }, {
                        key: "checkAudioPushPlay",
                        value: function(e) {
                            if (!this.lastPlayTs)
                                for (var t = this.audioChain.head, i = 0; null !== t; ) {
                                    var a = t.data;
                                    if (0 === i)
                                        i = a.dts;
                                    else if (a.dts - i >= 500) {
                                        var s = 500 + this.JitterBufLen - (e - this.firstOsTs);
                                        return this.firstOsTs -= s,
                                            void u.default.log("FlvPlayer.checkAudioPushPlay start=" + i + " end=" + a.dts + " firstOsTs=" + this.firstOsTs)
                                    }
                                    (t = t.next) === this.audioChain.head && (t = null)
                                }
                        }
                    }, {
                        key: "play",
                        value: function(e, t) {
                            if (this.firstTsStatus !== this.FIRST_TS_INIT) {
                                this.firstTsStatus >= this.FIRST_TS_VIDEO ? this.checkVideoPushPlay(e) : this.firstTsStatus >= this.FIRST_TS_AUDIO && this.checkAudioPushPlay(e);
                                var i = e - this.firstOsTs;
                                if (!(i < this.JitterBufLen)) {
                                    for (var a = this.firstTs + i - this.JitterBufLen, s = o.default.UintMax, n = null, r = this.videoChain.head; null !== r; ) {
                                        if ((n = r.data).isFull && n.dts >= this.firstTs) {
                                            s = n.dts;
                                            break
                                        }
                                        (r = r.next) === this.videoChain.head && (r = null)
                                    }
                                    for (var l = this.lastPlayAudioKey + 1, d = this.getNextATs(), h = this.lastPlayVideoKey, f = this.getPlayTime(), c = f > 0 && d - f > 400, p = this.firstTsStatus < this.FIRST_TS_VIDEO; s <= a || d <= a; )
                                        if (d <= s) {
                                            var v = this.audioChain.peek();
                                            if (null !== v)
                                                if (p)
                                                    this.lastATs = d = v.dts;
                                                else {
                                                    var m = this.audioSsrc === v.ssrc
                                                        , y = v.key - l
                                                        , g = v.dts - d;
                                                    if (g <= -1 * S.default.MUSIC_MID_TIME_LEN) {
                                                        this.audioChain.get();
                                                        continue
                                                    }
                                                    g > (m && 0 === y ? 10 : .5) * S.default.MUSIC_MID_TIME_LEN && (v = this.getEmptyAudioFrame(d, l))
                                                }
                                            else {
                                                if (c || p) {
                                                    a = d - S.default.MUSIC_MID_TIME_LEN;
                                                    break
                                                }
                                                v = this.getEmptyAudioFrame(d, l)
                                            }
                                            this.playAudio(v, e, d),
                                                l = this.lastPlayAudioKey + 1,
                                                d = this.getNextATs()
                                        } else {
                                            var T = !1;
                                            if ((n = r.data).isFull && n.key > this.lastPlayVideoKey) {
                                                var P = n.key - h - 1;
                                                if (P > 0)
                                                    if (P >= 4)
                                                        T = !0;
                                                    else
                                                        for (var I = 1; I <= P; ++I)
                                                            if (n.getLastFrameType(I) !== _.default.FRAMETYPE_VIDEO_B) {
                                                                T = !0;
                                                                break
                                                            }
                                                T && !n.isKeyFrame || (T && 0 !== h && (u.default.log("FlvPlayer.play skipVideo uid=" + this.uid + " skipCnt=" + P + " key=" + h + "-" + n.key + " ts=" + n.dts),
                                                    this.videoPlayStat.skipVideoFrameCnt += P),
                                                    this.playVideo(n, e, h, r, P),
                                                    h = n.key)
                                            }
                                            (r = r.next) === this.videoChain.head ? s = o.default.UintMax : (n = r.data).isFull && (s = n.dts)
                                        }
                                    for (; null !== (n = this.videoChain.peek()) && n.key <= h; )
                                        n = this.videoChain.get();
                                    this.lastPlayVideoKey = h,
                                    a > this.lastPlayTs && (this.lastPlayTs = a),
                                        this.playAsMoreAsPossible(a, e)
                                }
                            }
                        }
                    }, {
                        key: "playAsMoreAsPossible",
                        value: function(e, t) {
                            for (var i = null, a = null, s = 0, n = 0, r = 0, o = this.lastPlayVideoKey; null !== (i = this.videoChain.peek()) && (s = i.stamp,
                            i.isFull && i.key === this.lastPlayVideoKey + 1); ) {
                                for (var l = !0; n = this.getNextATs(),
                                    r = this.lastPlayAudioKey + 1,
                                    !(n > s); ) {
                                    if (null === (a = this.audioChain.peek())) {
                                        l = !1;
                                        break
                                    }
                                    if (a.key !== r) {
                                        l = !1;
                                        break
                                    }
                                    var d = a.dts - n;
                                    if (d < -10 * S.default.MUSIC_MID_TIME_LEN) {
                                        u.default.warn("FlvPlayer.playAsMoreAsPossible audioFrame key continue but dts smaller, curAts:" + n + " audio dts:" + a.dts),
                                            this.audioChain.get(),
                                            l = !1;
                                        break
                                    }
                                    if (d >= 3 * S.default.MUSIC_MID_TIME_LEN) {
                                        l = !1;
                                        break
                                    }
                                    this.playAudio(a, t, n)
                                }
                                if (!l)
                                    break;
                                this.playVideo(i, t, o, null, 0),
                                    o = (i = this.videoChain.get()).key,
                                    this.lastPlayVideoKey = o
                            }
                        }
                    }, {
                        key: "playVideo",
                        value: function(e, t, i, a, s) {
                            if (e.isKeyFrame) {
                                var n = g.default.getAvc(e)
                                    , o = n.toString();
                                if (this.lastAvcStr !== o) {
                                    this.lastAvcStr = o;
                                    var l = g.default.packAvcFlvTag(e.dts, n);
                                    this.msePlayer && this.msePlayer.appendFlv(l)
                                }
                                g.default.trimIFrame(e, n.length)
                            }
                            var d = e.dts - this.firstTs;
                            g.default.setFrameTimestamp(d, e.streamData),
                            this.lastAvcStr && (this.msePlayer && this.msePlayer.appendFlv(e.streamData),
                                e.streamData = null,
                                e.isPlayed = !0),
                                this.lastPlayVideoSeq = e.lastPktSeq,
                                this.videoPlayStat.onPlayStat(e, t, i, a, s),
                            0 == r.default.firstRenderTime && (r.default.firstRenderTime = t,
                                u.default.log("%c[TIME] firstRenderTime=" + (t - r.default.firstIFrameTime) + " totalTime=" + (t - r.default.startTime), "color:#A23400;background:#FFF5C2"))
                        }
                    }, {
                        key: "playAudio",
                        value: function(e, t, i) {
                            e.aacConfig && (u.default.log("FlvPlayer.playAudio aacConfig change uid=" + this.uid),
                            this.msePlayer && this.msePlayer.appendFlv(e.aacConfig),
                                e.aacConfig = null);
                            var a = i - this.firstTs;
                            g.default.setFrameTimestamp(a, e.streamData),
                            this.msePlayer && this.msePlayer.appendFlv(e.streamData),
                                e.streamData = null,
                                this.lastPlayAudioKey = e.key,
                                this.incAts(1),
                            e.isEmpty || this.audioChain.get(),
                            e.isEmpty || (this.audioSsrc = e.ssrc)
                        }
                    }, {
                        key: "getEmptyAudioFrame",
                        value: function(e, t) {
                            var i = new E.default;
                            i.isEmpty = !0,
                                i.key = t,
                                i.dts = e,
                                i.ssrc = o.default.UintMax;
                            var a = new Uint8Array(R.default.emptyAacFrameAdts);
                            d.default.chrome && d.default.version.major < 50 && (a = R.default.getSilentFrame(5, 2));
                            var s = 1 & a[0] ? 7 : 9;
                            if (null === this.lastAacStr) {
                                var n = a.subarray(0, s)
                                    , r = g.default.adtsToConfig(n);
                                this.lastAacStr = r.toString();
                                var l = g.default.packAudioFlvTag(0, r, 0);
                                this.msePlayer && this.msePlayer.appendFlv(l),
                                    u.default.log("FlvPlayer.getEmptyAudioFrame append aacConfig=" + this.lastAacStr + " uid=" + this.uid)
                            } else
                                Number(localStorage._printPreEmpytFrame) && u.default.log("FlvPlayer.getEmptyAudioFrame key=" + t + " dts=" + e + " uid=" + this.uid);
                            return a = a.subarray(s),
                                i.streamData = g.default.packAudioFlvTag(e, a, 1),
                                i
                        }
                    }, {
                        key: "trimAudioBeforeDts",
                        value: function(e) {
                            for (var t = this.audioChain.peek(); t && t.dts < e; )
                                this.audioChain.get(),
                                    t = this.audioChain.peek();
                            return t
                        }
                    }, {
                        key: "trimVideoBeforeDts",
                        value: function(e) {
                            for (var t = this.videoChain.peek(); t && t.dts < e; )
                                this.videoChain.get(),
                                    t = this.videoChain.peek();
                            return t
                        }
                    }, {
                        key: "setLastAts",
                        value: function(e) {
                            this.lastATs = e - S.default.MUSIC_MID_TIME_LEN
                        }
                    }, {
                        key: "getNextATs",
                        value: function() {
                            return Math.round(this.lastATs + S.default.MUSIC_MID_TIME_LEN)
                        }
                    }, {
                        key: "incAts",
                        value: function(e) {
                            this.lastATs += S.default.MUSIC_MID_TIME_LEN * e
                        }
                    }, {
                        key: "setFirstTs",
                        value: function(e, t, i, a) {
                            var s = this.firstTsStatus;
                            if (s >= e)
                                u.default.error("FlvPlayer.setFirstTs error change oldstatus:" + s + " new:" + e + " uid=" + this.uid);
                            else if (this.firstTs = t,
                                this.firstOsTs = i,
                                this.firstTsStatus = e,
                                u.default.log("FlvPlayer.setFirstTs status=" + s + "->" + e + " firstTs=" + t + " firstOsTs=" + this.firstOsTs + " jitBufLen=" + this.JitterBufLen + " firstSeq=" + a + " uid=" + this.uid),
                            s !== this.FIRST_TS_AUDIO && s !== this.FIRST_TS_AUDIO_PUSH || e >= this.FIRST_TS_VIDEO && this.updateFirstTsForce(),
                            this.firstTsStatus == this.FIRST_TS_VIDEO || this.firstTsStatus == this.FIRST_TS_VIDEO_PUSH) {
                                var n = this.trimVideoBeforeDts(this.firstTs);
                                this.lastPlayVideoKey = n.key - 1,
                                    this.lastPlayVideoSeq = n.lastPktSeq - 2,
                                    u.default.log("FlvPlayer.setFirstTs first video key=" + this.lastPlayVideoKey + " ts=" + n.dts + " pktNum=" + n.pktNum + " uid=" + this.uid);
                                var o = this.trimAudioBeforeDts(this.firstTs);
                                if (!o || o.dts - this.firstTs > S.default.MUSIC_MID_TIME_LEN ? (this.lastPlayAudioKey = 0,
                                    this.setLastAts(this.firstTs)) : (this.lastPlayAudioKey = o.key - 1,
                                    this.setLastAts(o.dts)),
                                    u.default.log("FlvPlayer.setFirstTs first audio key=" + this.lastPlayAudioKey + " ts=" + this.lastATs + " uid=" + this.uid),
                                    r.default.firstIFrameTime = i,
                                    u.default.log("%c[TIME] firstIFrameTime=" + (i - r.default.firstVideoPkgTime) + " totalTime=" + (i - r.default.startTime), "color:#A23400;background:#FFF5C2"),
                                null !== this.lastAacStr) {
                                    var l = new Uint8Array(this.lastAacStr.split(","))
                                        , d = l.length > 2 ? -1 : 0
                                        , h = g.default.packAudioFlvTag(0, l, d);
                                    this.msePlayer && this.msePlayer.appendFlv(h)
                                }
                            } else if (this.firstTsStatus == this.FIRST_TS_AUDIO || this.firstTsStatus == this.FIRST_TS_AUDIO_PUSH) {
                                var f = this.trimAudioBeforeDts(this.firstTs);
                                f && f.dts === this.firstTs && (this.lastPlayAudioKey = f.key - 1,
                                    this.setLastAts(f.dts),
                                    u.default.log("FlvPlayer.setFirstTs first pure audio key=" + this.lastPlayAudioKey + " ts=" + this.lastATs + " uid=" + this.uid))
                            }
                        }
                    }, {
                        key: "updateFirstTsForce",
                        value: function() {
                            u.default.info("FlvPlayer.updateFirstTsForce uid=" + this.uid),
                                this.resetMsePlayer(),
                                this.lastPlayTs = 0,
                                this.lastPlayAudioKey = 0,
                                this.lastPlayVideoKey = 0,
                                this.audioSsrc = o.default.UintMax
                        }
                    }, {
                        key: "getPlayTime",
                        value: function() {
                            if (!this.msePlayer)
                                return 0;
                            var e = this.msePlayer.getCurrentDts();
                            return e > 0 && (e += this.firstTs),
                                e
                        }
                    }, {
                        key: "calcCapToPlayDelay",
                        value: function(e, t) {
                            if (0 === t || 0 === this.osTime || !this.msePlayer)
                                return 0;
                            var i = 0
                                , a = r.default.videoNtp.convertToSrvTime(e);
                            return a && (i = a - (this.localTime - (this.osTime - t))),
                                i += this.msePlayer.getParserBufLen() + this.msePlayer.getBufferLen(),
                                Math.round(i)
                        }
                    }, {
                        key: "calcRecvToPlayDelay",
                        value: function(e, t) {
                            return this.msePlayer ? e - t + this.msePlayer.getParserBufLen() + this.msePlayer.getBufferLen() : 0
                        }
                    }, {
                        key: "setPullSeq",
                        value: function(e, t) {
                            if (arguments.length > 2 && void 0 !== arguments[2] && !arguments[2])
                                this.audioQuickAccess.setPullSeq(e, t);
                            else {
                                if (this.lastPlayVideoSeq >= t)
                                    return;
                                this.lastPlayVideoSeq > e && (e = this.lastPlayVideoSeq + 2),
                                this.videoQuickAccess.setPullSeq(e, t) && (r.default.isPull = !0,
                                    this.videoResender.setMaxPullSeq(t))
                            }
                        }
                    }, {
                        key: "onSubscribeStreamRes",
                        value: function(e) {
                            arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
                                u.default.log("FlvPlayer.onSubscribeStreamRes uid=" + this.uid + " sub=" + e.subscribe + " res=" + e.resCode),
                            !e.subscribe || e.resCode > 0 || this.videoQuickAccess.setPullSeq(e.firstSeq, e.lastSeq)
                        }
                    }, {
                        key: "onVideoStreamData",
                        value: function(t) {
                            var i = l.default.now();
                            if (0 == r.default.firstVideoPkgTime && (r.default.firstVideoPkgTime = i,
                                u.default.log("%c[TIME] firstVideoPkgTime=" + (i - r.default.connectVideoTime) + " totalTime=" + (i - r.default.startTime), "color:#A23400;background:#FFF5C2")),
                                this.lastRecvVideoTs = i,
                                this.videoQuickAccess.updatePull(t),
                            t.seqNum <= this.lastPlayVideoSeq)
                                return e.RECV_TOO_LATE;
                            this.videoPlayStat.recvVideoPktCnt++,
                                this.videoPlayStat.recvVideoByteCnt += t.streamData.length + 52;
                            var a = e.RECV_SUCCESS;
                            this.videoResender.OnRecvPacket(t, i) === T.default.RESENDRET_DOWNLINK_RESEND && (a = e.DOWNLINK_RESEND);
                            var s = this.videoChain.getOrNewNode(t.lastKeyFrame);
                            if (!s)
                                return e.RECV_ERROR;
                            var n = null;
                            return null === s.data ? ((n = new k.default).append(t),
                                s.data = n,
                                this.videoPlayStat.recvVideoFrameCnt++) : (n = s.data).append(t),
                            n.isFull && n.isKeyFrame && (this.firstTsStatus < this.FIRST_TS_VIDEO && !n.isFastAccess && this.setFirstTs(this.FIRST_TS_VIDEO, n.dts, n.recvTs, n.firstPktSeq),
                            this.firstTsStatus < this.FIRST_TS_VIDEO_PUSH && n.isFastAccess && this.setFirstTs(this.FIRST_TS_VIDEO_PUSH, n.dts, n.recvTs, n.firstPktSeq)),
                                a
                        }
                    }, {
                        key: "onAudioStreamData",
                        value: function(t) {
                            var i = l.default.now();
                            this.lastRecvAudioTs = i,
                                this.audioQuickAccess.updatePull(t);
                            var a = 0
                                , s = t.streamGroupId.streamType;
                            return a = s == p.default.STREAM_AUDIO_RAW || s == p.default.STREAM_AUDIO_TRANSCODE ? this.packRawAudioFrames(t, i) : this.packFlvAudioFrame(t, i),
                                isNaN(a) || a <= 0 ? e.RECV_ERROR : (this.firstTsStatus < this.FIRST_TS_AUDIO && !t.isFastAccessPacket && this.setFirstTs(this.FIRST_TS_AUDIO, a, i, t.seqNum),
                                this.firstTsStatus < this.FIRST_TS_AUDIO_PUSH && t.isFastAccessPacket && this.setFirstTs(this.FIRST_TS_AUDIO_PUSH, a, i, t.seqNum),
                                    e.RECV_SUCCESS)
                        }
                    }, {
                        key: "packFlvAudioFrame",
                        value: function(e, t) {
                            e.getFrameTime() <= this.lastPlayTs && Number(localStorage._printDropAudio) && u.default.debug("FlvPlayer.packFlvAudioFrame drop seqNum=" + e.seqNum);
                            var i = new E.default;
                            i.uid = e.uid,
                                i.key = e.lastKeyFrame,
                                i.seqNum = e.seqNum,
                                i.isEmpty = !1,
                                i.isFastAccess = e.isFastAccessPacket,
                                i.isKeyFrame = 1,
                                i.dts = e.getFrameTime(),
                                i.ssrc = 0,
                                i.codec = 1,
                                i.recvTs = t;
                            var a = g.default.getAvc(e)
                                , s = a.toString();
                            if (null === this.lastAacStr) {
                                this.lastAacStr = s;
                                var n = g.default.packAudioFlvTag(0, a, -1);
                                this.msePlayer && this.msePlayer.appendFlv(n),
                                    u.default.log("FlvPlayer.packFlvAudioFrame append aacConfig=" + s + " uid=" + this.uid)
                            } else
                                this.lastAacStr != s && (i.aacConfig = g.default.packAudioFlvTag(0, a, -1),
                                    u.default.warn("FlvPlayer.packFlvAudioFrame aacConfig change, " + this.lastAacStr + " -> " + s + " uid=" + this.uid),
                                    this.lastAacStr = s);
                            return g.default.trimIFrame(e, a.length),
                                i.streamData = e.streamData,
                                this.audioChain.put(i),
                                i.dts
                        }
                    }, {
                        key: "packRawAudioFrames",
                        value: function(e, t) {
                            var i = new DataView(e.streamData.buffer)
                                , a = new m.default(i,!1)
                                , s = new c.default;
                            s.unmarshall(a);
                            var n = s.type;
                            if (n !== S.default.MUSIC_MID && n !== S.default.MUSIC_MID_128 && n !== S.default.MUSIC_MID_160 && n !== S.default.MUSIC_MID_192)
                                return e.seqNum % 200 == 0 && u.default.warn("FlvPlayer.packRawAudioFrames not supported audio codec type=" + n + " uid=" + this.uid),
                                    !1;
                            s.capTimeStamp <= this.lastPlayTs && Number(localStorage._printDropAudio) && u.default.debug("FlvPlayer.packRawAudioFrames drop seqNum=" + e.seqNum);
                            for (var r = S.default.getAudioTimeLen(n), o = s.capTimeStamp, l = s.framenum, d = s.payload, h = d.length, f = null, p = 0, v = 0, y = 0; y < l; y++) {
                                if (h <= 1) {
                                    u.default.error("FlvPlayer.packRawAudioFrames invalid length " + y + "/" + l + " uid=" + this.uid);
                                    break
                                }
                                (f = new E.default).uid = e.uid,
                                    f.key = s.framebase + (15 & d[p++]),
                                    f.seqNum = e.seqNum,
                                    f.isEmpty = !1,
                                    f.isFastAccess = e.isFastAccessPacket,
                                    f.isKeyFrame = s.isKeyVoice,
                                    f.dts = o,
                                    f.ssrc = s.ssrc,
                                    f.codec = n,
                                    f.recvTs = t;
                                var _ = d.subarray(p);
                                if (l > 1 && 0 == (v = S.default.caculateOneFrameLength(n, _))) {
                                    u.default.warn("FlvPlayer.packRawAudioFrames tagLen invalid. uid=" + this.uid);
                                    break
                                }
                                var T = 1 & _[0] ? 7 : 9
                                    , P = void 0;
                                if (n == S.default.MUSIC_MID_128 || n == S.default.MUSIC_MID_160 || n == S.default.MUSIC_MID_192)
                                    T = 2,
                                        P = g.default.creatAdtsConfig();
                                else {
                                    var I = _.subarray(0, T);
                                    P = g.default.adtsToConfig(I)
                                }
                                var k = P.toString();
                                if (null === this.lastAacStr) {
                                    this.lastAacStr = k;
                                    var R = g.default.packAudioFlvTag(0, P, 0);
                                    this.msePlayer && this.msePlayer.appendFlv(R),
                                        u.default.log("FlvPlayer.packRawAudioFrames append aacConfig=" + k + " uid=" + this.uid)
                                } else
                                    this.lastAacStr != k && (f.aacConfig = g.default.packAudioFlvTag(0, P, 0),
                                        u.default.warn("FlvPlayer.packRawAudioFrames aacConfig change, " + this.lastAacStr + " -> " + k + " uid=" + this.uid),
                                        this.lastAacStr = k);
                                _ = _.subarray(T),
                                    f.streamData = g.default.packAudioFlvTag(o, _, 1),
                                    this.audioChain.put(f),
                                    o += r,
                                    h -= 1 + v,
                                    p += v,
                                    v = 0
                            }
                            return s.capTimeStamp
                        }
                    }, {
                        key: "onStopStream",
                        value: function(e) {
                            var t = this.msePlayer ? this.msePlayer.getBufferLen() : 0;
                            u.default.info("FlvPlayer.onStopStream uid=" + this.uid + " bufLen=" + t),
                                this.resetVideo(),
                                this.huyaMgr.callback(I.Event.ANCHOR_STOP, {
                                    uid: this.uid
                                })
                        }
                    }, {
                        key: "onVideoSyncSpeakerTime",
                        value: function(e) {
                            this.osTime = e.osTime,
                                this.localTime = e.localTime
                        }
                    }, {
                        key: "onResenderFailedAck",
                        value: function(e) {
                            this.videoPlayStat.videoResendFailedAck++,
                                this.videoResender.onResenderFailedAck(e)
                        }
                    }, {
                        key: "onPlayVideo",
                        value: function(e, t, i, a) {
                            a ? (this.huyaMgr.onPlayVideo(this.uid, e, t, i, a),
                                this.updateStatus(I.Status.VIDEO_PLAYING),
                            r.default.isPull && this.firstTsStatus == this.FIRST_TS_VIDEO && u.default.warn("%cFlvPlayer.onPlayVideo No fast access pkg received!!! uid=" + this.uid, "font-weight:900")) : this.huyaMgr.onPlayAudio(this.uid, e)
                        }
                    }, {
                        key: "onVideoStop",
                        value: function(e, t) {
                            u.default.log("FlvPlayer.onVideoStop uid=" + this.uid + " hasVideo=" + t),
                                t ? (this.updateStatus(I.Status.VIDEO_STOP),
                                    this.huyaMgr.callback(I.Event.VIDEO_STOP, {
                                        uid: this.uid,
                                        video: e,
                                        haveVideo: !0
                                    })) : this.updateStatus(I.Status.AUDIO_STOP)
                        }
                    }, {
                        key: "onPlayerError",
                        value: function(e) {
                            this.resetMsePlayer(),
                            e && this.huyaMgr.callback(I.Event.H5_PLAYER_ERROR)
                        }
                    }, {
                        key: "onPlayPause",
                        value: function(e, t) {
                            this.pauseStartTs = e,
                            t && this.updateStatus(I.Status.VIDEO_CACHING)
                        }
                    }, {
                        key: "onPlayResume",
                        value: function(e, t) {
                            if (this.pauseStartTs) {
                                var i = e - this.pauseStartTs;
                                i > 200 && (u.default.warn("FlvPlayer.onPlayResume uid=" + this.uid + " pauseTime=" + i + " start=" + this.pauseStartTs + " now=" + e),
                                    this.videoPlayStat.sensePauseTime += i,
                                    this.videoPlayStat.sensePauseCnt++,
                                    this.videoPlayStat.sensePauseTime5 += i,
                                    this.videoPlayStat.sensePauseCnt5++),
                                    this.pauseStartTs = 0
                            }
                            t && this.updateStatus(I.Status.VIDEO_PLAYING)
                        }
                    }, {
                        key: "updateStatus",
                        value: function(e) {
                            this.videoStatus !== e && (this.videoStatus = e,
                                this.huyaMgr.callback(I.Event.PLAY_STATUS, {
                                    uid: this.uid,
                                    status: e
                                }))
                        }
                    }, {
                        key: "restartWithGOP",
                        value: function() {
                            this.huyaMgr.restartWithGOP()
                        }
                    }]),
                        e
                }();
                L.RECV_SUCCESS = 0,
                    L.DOWNLINK_RESEND = 1,
                    L.RECV_TOO_LATE = 3,
                    L.RECV_ERROR = 4,
                    L.TEMP_BUFFERED = 5,
                    t.default = L
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(23))
                    , u = a(i(8))
                    , o = a(i(5))
                    , l = a(i(3))
                    , d = a(i(137))
                    , h = function() {
                    function e(t) {
                        var i = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                        (0,
                            s.default)(this, e),
                            this.uid = t,
                            this.isVideo = i,
                            this.LOG_TAG = i ? "Video" : "Audio",
                            this.MAX_PULL_SEQ_INTERVAL = 15e3,
                            this.MAX_PULL_CNT_PER_TIME = 100,
                            this.MAX_PULL_TASK_CNT = 5,
                            this.QUICK_ACCESS_OT = 1e4,
                            this.firstPullSeq = u.default.UintMax,
                            this.lastPullSeq = u.default.UintMax,
                            this.reqMaxPullSeq = u.default.UintMax,
                            this.pullTasks = [],
                            this.startPullTs = 0,
                            this.isPulling = !1
                    }
                    return (0,
                        n.default)(e, [{
                        key: "setPullSeq",
                        value: function(e, t) {
                            if (this.isPulling)
                                return l.default.info(this.LOG_TAG + "QuickAccess.setPullSeq pull task not finished, refuse new pull request"),
                                    !1;
                            if (e === u.default.UintMax || t === u.default.UintMax || t <= e)
                                return l.default.log(this.LOG_TAG + "QuickAccess.setPullSeq invalid seq uid=" + this.uid + " seq=[" + e + "," + t + "] cnt=" + i),
                                    !1;
                            if (this.firstPullSeq !== u.default.UintMax && this.lastPullSeq !== u.default.UintMax)
                                if (e > this.lastPullSeq)
                                    ;
                                else {
                                    if (t <= this.lastPullSeq)
                                        return !1;
                                    e = this.lastPullSeq + 2
                                }
                            var i = (t - e) / 2 + 1;
                            if (t - e > this.MAX_PULL_SEQ_INTERVAL)
                                l.default.log(this.LOG_TAG + "QuickAccess.setPullSeq too much uid=" + this.uid + " seq=[" + e + "," + t + "] cnt=" + i),
                                    this.reset();
                            else {
                                var a = o.default.now();
                                this.firstPullSeq = e,
                                    this.lastPullSeq = t,
                                    this.reqMaxPullSeq = this.firstPullSeq - 2,
                                    this.startPullTs = a,
                                    l.default.log(this.LOG_TAG + "QuickAccess.setPullSeq uid=" + this.uid + " seq=[" + e + "," + t + "] cnt=" + i),
                                    this.checkPull(a)
                            }
                            return !0
                        }
                    }, {
                        key: "updatePull",
                        value: function(e) {
                            if (e.isFastAccessPacket && (!this.isVideo || !e.isAudio) && (this.isVideo || !e.isVideo))
                                for (var t = e.seqNum, i = 0; i < this.pullTasks.length; i++) {
                                    var a = this.pullTasks[i];
                                    if (t < a.startSeq)
                                        break;
                                    if (t >= a.startSeq && t <= a.endSeq) {
                                        this.pullTasks.shift();
                                        var s = o.default.now();
                                        this.checkPull(s);
                                        break
                                    }
                                }
                        }
                    }, {
                        key: "checkPull",
                        value: function(e) {
                            if (this.reqMaxPullSeq !== this.lastPullSeq) {
                                if (e - this.startPullTs >= this.QUICK_ACCESS_OT)
                                    return l.default.warn(this.LOG_TAG + "QuickAccess.checkPull pull timeout uid=" + this.uid),
                                        this.isPulling = !1,
                                        void this.reset();
                                if (!(this.pullTasks.length >= this.MAX_PULL_TASK_CNT))
                                    for (var t = this.MAX_PULL_TASK_CNT - this.pullTasks.length; 0 !== t; ) {
                                        var i = new d.default;
                                        i.uid = this.uid,
                                            this.isVideo && r.default.videoStreamId ? i.streamGroupId = r.default.videoStreamId : !this.isVideo && r.default.audioStreamId && (i.streamGroupId = r.default.audioStreamId);
                                        var a = this.reqMaxPullSeq + 2
                                            , s = this.reqMaxPullSeq + 2 * this.MAX_PULL_CNT_PER_TIME;
                                        s = s > this.lastPullSeq ? this.lastPullSeq : s;
                                        for (var n = a; n <= s; n += 2)
                                            i.seqNums.push(n);
                                        var u = {
                                            startSeq: a,
                                            endSeq: s
                                        };
                                        this.pullTasks.push(u),
                                            t--,
                                            this.reqMaxPullSeq = s,
                                            r.default.send(i);
                                        var o = s === this.lastPullSeq;
                                        o ? (t = 0,
                                            this.isPulling = !1) : this.isPulling = !0,
                                            l.default.log("pull" + this.LOG_TAG + " uid=" + this.uid + " seq=[" + a + ", " + s + "] num=" + i.seqNums.length + " taskCnt=" + this.pullTasks.length + " " + (o ? "finished" : ""))
                                    }
                            }
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            l.default.log(this.LOG_TAG + "QuickAccess.reset"),
                                this.firstPullSeq = u.default.UintMax,
                                this.lastPullSeq = u.default.UintMax,
                                this.reqMaxPullSeq = u.default.UintMax,
                                this.pullTasks.splice(0, this.pullTasks.length),
                                this.startPullTs = 0
                        }
                    }]),
                        e
                }();
                t.default = h
            }
            , function(e, t, i) {
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var a = {
                    Quality_AAC: "AAC",
                    Quality_SILK: "SILK",
                    MUSIC_MID: 1,
                    MUSIC_MID_TIME_LEN: 2048e3 / 44100,
                    MUSIC_MID_128: 35,
                    MUSIC_MID_128_TIME_LEN: 1024e3 / 44100,
                    MUSIC_MID_160: 36,
                    MUSIC_MID_160_TIME_LEN: 1024e3 / 44100,
                    MUSIC_MID_192: 37,
                    MUSIC_MID_192_TIME_LEN: 1024e3 / 44100,
                    VOICE_HIGHER: 2,
                    VOICE_HIGHER_TIME_LEN: 20,
                    VOICE_HIGHER_FRAME_LEN: 882,
                    VOICE_HIGHER_QUALITY1: 22,
                    VOICE_HIGHER_QUALITY1_TIME_LEN: 20,
                    VOICE_HIGHER_QUALITY1_FRAME_LEN: 882,
                    getAudioTimeLen: function(e) {
                        switch (e) {
                            case this.MUSIC_MID:
                                return this.MUSIC_MID_TIME_LEN;
                            case this.MUSIC_MID_128:
                                return this.MUSIC_MID_128_TIME_LEN;
                            case this.MUSIC_MID_160:
                                return this.MUSIC_MID_160_TIME_LEN;
                            case this.MUSIC_MID_192:
                                return this.MUSIC_MID_192_TIME_LEN;
                            case this.VOICE_HIGHER:
                                return this.VOICE_HIGHER_TIME_LEN;
                            default:
                                return 0
                        }
                    },
                    getAudioQualityType: function(e) {
                        switch (e) {
                            case this.MUSIC_MID:
                            case this.MUSIC_MID_128:
                            case this.MUSIC_MID_160:
                            case this.MUSIC_MID_192:
                                return a.Quality_AAC;
                            case this.VOICE_HIGHER:
                            default:
                                return a.Quality_SILK
                        }
                    },
                    NET_UNKNOWN_CODEC: -1e3,
                    NET_AACPLUS: 1,
                    NET_AAC_128K: 35,
                    NET_AAC_160K: 36,
                    NET_AAC_192K: 37,
                    NET_AMRWB: 3,
                    NET_SILK_16K: 2,
                    NET_SILK_24K: 22,
                    NET_SPEEX_MODE_8: 0,
                    NET_SPEEX_MODE_4: 21,
                    NET_SPEEX_MODE_2: 23,
                    NET_OPUS_24K4: 50,
                    NET_VIDEO_H264: 2e3,
                    NET_VIDEO_VP8: 2001,
                    NET_VIDEO_H265: 2002,
                    NET_PHONE_1ON1_PROTO: 98,
                    caculateOneFrameLength: function(e, t) {
                        var i = 0
                            , s = t.length;
                        switch (e) {
                            case a.NET_AACPLUS:
                            case a.NET_AAC_128K:
                            case a.NET_AAC_160K:
                            case a.NET_AAC_192K:
                                if (s >= 7) {
                                    var n = 3 & t[3];
                                    (i = n << 11 | t[4] << 3 | t[5] >> 5 & 7) > s && (i = 0),
                                    0 != n && console.log("-------caculateOneFrameLength--------")
                                }
                                break;
                            case a.NET_AMRWB:
                                s >= 1 && (i = [18, 24, 33, 37, 41, 47, 51, 59, 61, 6, 6, 0, 0, 0, 1, 1][t[0] >> 3 & 15]) > s && (i = 0);
                                break;
                            case a.NET_SILK_16K:
                            case a.NET_SILK_24K:
                                if (s >= 2) {
                                    var r = t[1] << 8 | t[0];
                                    64512 == (64512 & r) && (i = 2 + (1023 & r)) > s && (i = 0)
                                }
                                break;
                            case a.NET_SPEEX_MODE_8:
                                (i = 38) > s && (i = 0);
                                break;
                            case a.NET_SPEEX_MODE_4:
                                (i = 20) > s && (i = 0);
                                break;
                            case a.NET_SPEEX_MODE_2:
                                (i = 15) > s && (i = 0)
                        }
                        return i
                    }
                };
                t.default = a
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = function() {
                    function e() {
                        (0,
                            s.default)(this, e)
                    }
                    return (0,
                        n.default)(e, null, [{
                        key: "getFlvHeader",
                        value: function() {
                            var e = new Uint8Array(13)
                                , t = 0;
                            return e[t++] = 70,
                                e[t++] = 76,
                                e[t++] = 86,
                                e[t++] = 1,
                                e[t++] = 5,
                                e[t++] = 0,
                                e[t++] = 0,
                                e[t++] = 0,
                                e[t++] = 9,
                                e[t++] = 0,
                                e[t++] = 0,
                                e[t++] = 0,
                                e[t++] = 0,
                                e
                        }
                    }, {
                        key: "packAudioFlvTag",
                        value: function(e, t) {
                            var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : -1
                                , a = t.length + 2
                                , s = new Uint8Array(11 + a + 4)
                                , n = 0;
                            return s[n++] = 8,
                                s[n++] = a >> 16 & 255,
                                s[n++] = a >> 8 & 255,
                                s[n++] = 255 & a,
                                s[n++] = e >> 16 & 255,
                                s[n++] = e >> 8 & 255,
                                s[n++] = 255 & e,
                                s[n++] = e >> 24 & 255,
                                s[n++] = 0,
                                s[n++] = 0,
                                s[n++] = 0,
                            -1 != i && (s[n++] = 175,
                                s[n++] = i),
                                s.set(t, n),
                                n += t.length,
                                a += 11,
                                s[n++] = a >> 24 & 255,
                                s[n++] = a >> 16 & 255,
                                s[n++] = a >> 8 & 255,
                                s[n++] = 255 & a,
                                s
                        }
                    }, {
                        key: "packAvcFlvTag",
                        value: function(e, t) {
                            var i = t.length + 5
                                , a = new Uint8Array(11 + i + 4)
                                , s = 0;
                            a[s++] = 9,
                                a[s++] = i >> 16 & 255,
                                a[s++] = i >> 8 & 255,
                                a[s++] = 255 & i,
                                a[s++] = e >> 16 & 255,
                                a[s++] = e >> 8 & 255,
                                a[s++] = 255 & e,
                                a[s++] = e >> 24 & 255,
                                a[s++] = 0,
                                a[s++] = 0,
                                a[s++] = 0,
                                a[s++] = 23,
                                a[s++] = 0,
                                a[s++] = 0,
                                a[s++] = 0,
                                a[s++] = 0,
                                a.set(t, s),
                                s += t.length;
                            var n = 11 + i;
                            return a[s++] = n >> 24 & 255,
                                a[s++] = n >> 16 & 255,
                                a[s++] = n >> 8 & 255,
                                a[s++] = 255 & n,
                                a
                        }
                    }, {
                        key: "adtsToConfig",
                        value: function(e) {
                            var t = new Uint8Array(2)
                                , i = 1 + ((192 & e[2]) >> 6)
                                , a = (60 & e[2]) >> 2
                                , s = (1 & e[2]) << 2 | (192 & e[3]) >> 6;
                            return t[0] = i << 3 | (14 & a) >> 1,
                                t[1] = (1 & a) << 7 | s << 3,
                                t
                        }
                    }, {
                        key: "creatAdtsConfig",
                        value: function() {
                            var e = new Uint8Array(2);
                            return e[0] = 18,
                                e[1] = 16,
                                e
                        }
                    }, {
                        key: "setFrameTimestamp",
                        value: function(e, t) {
                            t[4] = e >> 16 & 255,
                                t[5] = e >> 8 & 255,
                                t[6] = 255 & e,
                                t[7] = e >> 24 & 255
                        }
                    }, {
                        key: "getAvc",
                        value: function(e) {
                            var t = e.streamData[0];
                            return t += e.streamData[1] << 8,
                                t += e.streamData[2] << 16,
                                t += e.streamData[3] << 24 >>> 0,
                                e.streamData.subarray(4, 4 + t)
                        }
                    }, {
                        key: "trimIFrame",
                        value: function(e, t) {
                            e.streamData = e.streamData.subarray(4 + t)
                        }
                    }]),
                        e
                }();
                t.default = r
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(14))
                    , n = a(i(71))
                    , r = a(i(6))
                    , u = a(i(0))
                    , o = a(i(1))
                    , l = a(i(23))
                    , d = a(i(8))
                    , h = a(i(3))
                    , f = a(i(5))
                    , c = a(i(326))
                    , p = (a(i(41)),
                    a(i(327)))
                    , v = a(i(328))
                    , m = a(i(138))
                    , y = function() {
                    function e(t) {
                        (0,
                            u.default)(this, e),
                            this.player = t,
                            this.videoPlayStat = t.videoPlayStat,
                            this.CheckResendInterval = 20,
                            this.KeepLateSeqGap = 500,
                            this.MaxTolerateDelayDelta = 15e3,
                            this.FailedAckWaitTime = 500,
                            this.MaxQueueLen = 1e4,
                            this.MaxResendSeqCnt = 50,
                            this.resendAgainWhileFailedAck = !0,
                            this.lastResendStamp = 0,
                            this.seqStatus = new c.default,
                            this.firstRtoCalc = new v.default(200),
                            this.waitResendMap = new r.default,
                            this.alreadyResendMap = new r.default,
                            this.start = !0,
                            this.minDelayDelta = 0
                    }
                    return (0,
                        o.default)(e, [{
                        key: "reset",
                        value: function() {
                            h.default.log("VideoResender.reset()"),
                                this.firstRtoCalc.reset(),
                                this.seqStatus.reset(),
                                this.lastResendStamp = 0,
                                this.minDelayDelta = 0,
                                this.cleanAllMaps()
                        }
                    }, {
                        key: "onCheckFastTimer",
                        value: function(e, t) {
                            if (this.start && !(0 !== this.lastResendStamp && e < this.lastResendStamp + this.CheckResendInterval)) {
                                this.lastResendStamp = e;
                                var i = []
                                    , a = []
                                    , r = this.player.lastPlayVideoSeq
                                    , u = 0
                                    , o = !0
                                    , l = !1
                                    , f = void 0;
                                try {
                                    for (var c, p = (0,
                                        s.default)(this.waitResendMap); !(o = (c = p.next()).done); o = !0) {
                                        var v = c.value
                                            , m = (0,
                                            n.default)(v, 2)
                                            , y = m[0]
                                            , _ = m[1];
                                        if (u++ > this.MaxQueueLen)
                                            return h.default.warn("VideoResender.onCheckFastTimer notResendCnt exceed MaxQueueLen"),
                                                void this.reset();
                                        this.seqStatus.IsServerHave(y) && d.default.isBiggerUint(e, _.createStampc + _.delta) ? (_.sendStampc = e,
                                            _.resendTimes++,
                                            a.push(y),
                                            i.push(_.seq),
                                            this.alreadyResendMap.set(y, _)) : _.resendTimes >= 3 ? (this.videoPlayStat.videoResendNotRecvCnt++,
                                            a.push(y)) : 0 !== r && d.default.isBiggerUint(r - this.KeepLateSeqGap, y) ? (this.seqStatus.IsServerLost(y) && this.videoPlayStat.videoResendServerLostCnt++,
                                            this.videoPlayStat.videoResendNotSendCnt++,
                                            a.push(y)) : e - _.createStampc > 1e4 && a.push(y)
                                    }
                                } catch (e) {
                                    l = !0,
                                        f = e
                                } finally {
                                    try {
                                        !o && p.return && p.return()
                                    } finally {
                                        if (l)
                                            throw f
                                    }
                                }
                                this.cleanSeqsFromMap(a, this.waitResendMap),
                                    this.doResend(i, e),
                                    a = [];
                                var S = 0
                                    , g = !0
                                    , T = !1
                                    , P = void 0;
                                try {
                                    for (var I, E = (0,
                                        s.default)(this.alreadyResendMap); !(g = (I = E.next()).done); g = !0) {
                                        var k = I.value
                                            , R = (0,
                                            n.default)(k, 2)
                                            , C = R[0]
                                            , L = R[1];
                                        if (S++ > this.MaxQueueLen)
                                            return h.default.warn("VideoResender.onCheckFastTimer alreadyResendCnt exceed MaxQueueLen"),
                                                void this.cleanAllMaps();
                                        0 !== r && d.default.isBiggerUint(r - this.KeepLateSeqGap, C) && (!1 === L.received && this.videoPlayStat.videoResendNotRecvCnt++,
                                            a.push(C))
                                    }
                                } catch (e) {
                                    T = !0,
                                        P = e
                                } finally {
                                    try {
                                        !g && E.return && E.return()
                                    } finally {
                                        if (T)
                                            throw P
                                    }
                                }
                                this.cleanSeqsFromMap(a, this.alreadyResendMap)
                            }
                        }
                    }, {
                        key: "OnRecvPacket",
                        value: function(t, i) {
                            if (!this.start)
                                return e.RESENDRET_NOTSTART;
                            var a = e.RESENDRET_SUCCESS
                                , s = t.seqNum;
                            if (this.videoPlayStat.videoResendPacketsInAll++,
                            s <= this.player.lastPlayVideoSeq - this.KeepLateSeqGap)
                                return this.videoPlayStat.videoResendTooOldCnt++,
                                    e.RESENDRET_TOOLATE;
                            if (s > this.player.lastPlayVideoSeq && this.seqStatus.OnRecvPacket(t, i),
                                this.alreadyResendMap.has(s)) {
                                var n = this.alreadyResendMap.get(s);
                                if (n.received = !0,
                                n.sendStampc === t.stampc) {
                                    t.isDownlinkResend = !0,
                                        this.videoPlayStat.videoResendRecvCnt++;
                                    var r = i - t.stampc;
                                    l.default.downlinkRTOCalculator.CheckInvalidDownlinkRtt(r, i),
                                        a = e.RESENDRET_DOWNLINK_RESEND
                                } else
                                    s > this.player.lastPlayVideoSeq - 200 && this.videoPlayStat.videoResendRepeatCnt++,
                                        a = e.RESENDRET_SUCCESS
                            } else if (this.waitResendMap.has(s)) {
                                var u = this.waitResendMap.get(s);
                                if (u.seq !== s)
                                    return h.default.error("VideoResender.OnRecvPacket error, info.seq:" + u.seq + " packet.seqNum" + s),
                                        e.RESENDRET_ERROR;
                                this.waitResendMap.delete(s),
                                    a = e.RESENDRET_SUCCESS
                            }
                            if (!t.isDownlinkResend && !t.isUplinkResend && !t.isFastAccessPacket) {
                                var o = Number(i) - Number(t.stampc);
                                (o < this.minDelayDelta || 0 === this.minDelayDelta) && (this.minDelayDelta = o),
                                o - this.minDelayDelta > this.MaxTolerateDelayDelta && this.videoPlayStat.videoResendLargeDelay++
                            }
                            return t.isFastAccessPacket ? e.RESENDRET_PULL : (this.checkUnResendPackets(t, i),
                                a)
                        }
                    }, {
                        key: "onResenderFailedAck",
                        value: function(e) {
                            if (this.seqStatus.OnRejecteResend(e.seqNums),
                                this.resendAgainWhileFailedAck) {
                                for (var t = f.default.now(), i = [], a = 0; a < e.seqNums.length; a++) {
                                    var s = e.seqNums[a];
                                    if (this.alreadyResendMap.has(s)) {
                                        i.push(s);
                                        var n = this.alreadyResendMap.get(s);
                                        n.createStampc = t,
                                            n.delta = this.FailedAckWaitTime,
                                            this.waitResendMap.set(s, n)
                                    }
                                }
                                this.cleanSeqsFromMap(i, this.alreadyResendMap)
                            }
                        }
                    }, {
                        key: "setMaxPullSeq",
                        value: function(e) {
                            if (0 == this.seqStatus.minRecvSeq)
                                this.seqStatus.minRecvSeq = e,
                                    this.seqStatus.maxRecvSeq = e,
                                    h.default.log("VideoResender.setMaxPullSeq AAA", e);
                            else {
                                var t = f.default.now()
                                    , i = this.seqStatus.minRecvSeq
                                    , a = this.player.lastPlayVideoSeq;
                                h.default.log("VideoResender.setMaxPullSeq BBB", e, "minRecvSeq=" + i),
                                    this.produceResendInfo(i, e, a, 30, t)
                            }
                        }
                    }, {
                        key: "checkUnResendPackets",
                        value: function(e, t) {
                            var i = e.seqNum
                                , a = 30;
                            e.isDownlinkResend || e.isUplinkResend || (a = this.firstRtoCalc.calculateFirstRto(e, t));
                            var s = this.player.lastPlayVideoSeq
                                , n = this.seqStatus.maxRecvSeq;
                            if (this.seqStatus.checkCurrentSeq(i, s, t)) {
                                if (0 === n)
                                    return;
                                this.produceResendInfo(i, n, s, a, t)
                            }
                        }
                    }, {
                        key: "produceResendInfo",
                        value: function(e, t, i, a, s) {
                            if (!d.default.isEqualOrBiggerUint(t, e))
                                for (var n = t + 2; n < e; n += 2)
                                    if (!d.default.isEqualOrBiggerUint(i, n) && !this.seqStatus.IsCheckedResend(n)) {
                                        var r = this.firstRtoCalc.limitFirstDownlinkRto(a, n, e)
                                            , u = new p.default;
                                        u.createStampc = s,
                                            u.delta = r,
                                            u.resendTimes = 0,
                                            u.seq = n,
                                            this.waitResendMap.set(n, u),
                                            this.seqStatus.CheckedResend(n),
                                            this.seqStatus.SetResendSended(n)
                                    }
                        }
                    }, {
                        key: "doResend",
                        value: function(e, t) {
                            for (e.length > 0 && h.default.log("VideoResender.doResend seqCnt=" + e.length); e.length > 0; ) {
                                var i = e.length > this.MaxResendSeqCnt ? this.MaxResendSeqCnt : e.length;
                                this.videoPlayStat.videoResendSendCnt += i,
                                this.pkg || (this.pkg = new m.default);
                                var a = this.pkg;
                                if (l.default.videoStreamId && (a.streamGroupId = l.default.videoStreamId),
                                    a.sender = this.player.uid,
                                    a.receiver = l.default.getUid(),
                                    a.stampc = t,
                                    a.seqNums = e.slice(0, i),
                                    !l.default.send(a))
                                    return h.default.log("VideoResender.doResend sendVideo failed"),
                                        void this.reset();
                                h.default.debug("Resend: " + a.seqNums.toString()),
                                    e.splice(0, i)
                            }
                        }
                    }, {
                        key: "cleanSeqsFromMap",
                        value: function(e, t) {
                            for (var i = 0; i < e.length; i++) {
                                var a = e[i];
                                t.delete(a)
                            }
                        }
                    }, {
                        key: "cleanAllMaps",
                        value: function() {
                            h.default.info("VideoResender.cleanAllMaps"),
                                this.waitResendMap.clear(),
                                this.alreadyResendMap.clear()
                        }
                    }]),
                        e
                }();
                y.RESENDRET_SUCCESS = 0,
                    y.RESENDRET_DOWNLINK_RESEND = 1,
                    y.RESENDRET_NOTSTART = 2,
                    y.RESENDRET_TOOLATE = 3,
                    y.RESENDRET_ERROR = 4,
                    y.RESENDRET_PULL = 5,
                    t.default = y
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(8))
                    , u = a(i(3))
                    , o = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.MaxByteIndex = 4095,
                            this.MaxSeqGap = this.MaxByteIndex << 1,
                            this.RECVED_VIDEO = 1,
                            this.UPLINK_RESEND = 2,
                            this.DOWNLINK_RESEND = 4,
                            this.SERVER_RESEND = 8,
                            this.RECVED_LATE = 16,
                            this.SERVER_RECVED = 32,
                            this.SERVER_CONFORMED = 64,
                            this.SERVER_REJECTED = 128,
                            this.CHECKED_RESEND = 256,
                            this.DUPLICATED_VIDEO = 512,
                            this.SENT_TO_PEER = 1024,
                            this.RESEND_SENDED = 2048,
                            this.statusVec = [],
                            this.maxSeq = 0,
                            this.minSeq = 0,
                            this.playedSeq = 0,
                            this.lastRecvStamp = 0,
                            this.seqBytes = new Uint8Array(4),
                            this.maxRecvSeq = 0,
                            this.minRecvSeq = 0,
                            this.minRecvSeqLimit = 0,
                            this.seqInvalidStamp = 0,
                            this.packetSeqGap = 400,
                            this.reset()
                    }
                    return (0,
                        n.default)(e, [{
                        key: "reset",
                        value: function() {
                            this.setToZero(this.statusVec, 0, this.MaxByteIndex + 1),
                                this.maxSeq = 0,
                                this.minSeq = 0,
                                this.playedSeq = 0,
                                this.lastRecvStamp = 0,
                                this.maxRecvSeq = 0,
                                this.minRecvSeq = 0,
                                this.minRecvSeqLimit = 0,
                                this.seqInvalidStamp = 0
                        }
                    }, {
                        key: "OnRecvPacket",
                        value: function(e, t) {
                            var i = e.seqNum
                                , a = this.SERVER_RECVED | this.SERVER_CONFORMED | this.CHECKED_RESEND;
                            0 !== this.playedSeq && i <= this.playedSeq ? a |= this.RECVED_LATE : a |= this.RECVED_VIDEO,
                            e.isUplinkResend && (a |= this.UPLINK_RESEND),
                            e.isDownlinkResend && (a |= this.DOWNLINK_RESEND),
                            e.isServerResend && (a |= this.SERVER_RESEND),
                                this.lastRecvStamp = t,
                                this.addStatus(i, a),
                                this.checkServerRecved(e)
                        }
                    }, {
                        key: "checkServerRecved",
                        value: function(e) {
                            this.seqBytes[0] = e.ext >> 24 & 255,
                                this.seqBytes[1] = e.ext >> 16 & 255,
                                this.seqBytes[2] = e.ext >> 8 & 255,
                                this.seqBytes[3] = 255 & e.ext;
                            for (var t = 2 * (255 & e.playTime), i = e.seqNum, a = 0; a < 32; a++)
                                i -= t,
                                    0 == (this.seqBytes[a >> 3] & 1 << (7 & a)) ? this.AddProperty(i, this.SERVER_CONFORMED) : this.AddProperty(i, this.SERVER_CONFORMED | this.SERVER_RECVED)
                        }
                    }, {
                        key: "OnRejecteResend",
                        value: function(e) {
                            for (var t = 0; t < e.length; t++)
                                this.addStatus(e[t], this.SERVER_REJECTED)
                        }
                    }, {
                        key: "CheckedResend",
                        value: function(e) {
                            this.AddProperty(e, this.CHECKED_RESEND)
                        }
                    }, {
                        key: "SetResendSended",
                        value: function(e) {
                            this.AddProperty(e, this.RESEND_SENDED)
                        }
                    }, {
                        key: "SetServerRejected",
                        value: function(e) {
                            this.AddProperty(e, this.SERVER_REJECTED)
                        }
                    }, {
                        key: "IsSeqValid",
                        value: function(e, t) {
                            return 0 === this.maxSeq || 0 === this.lastRecvStamp || t - this.lastRecvStamp > 1e4 || (r.default.isEqualOrBiggerUint(this.maxSeq, e) ? this.maxSeq - e <= this.MaxSeqGap : e - this.maxSeq <= this.MaxSeqGap)
                        }
                    }, {
                        key: "IsServerHave",
                        value: function(e) {
                            return !!this.HasProperty(e, this.SERVER_RECVED)
                        }
                    }, {
                        key: "IsServerLost",
                        value: function(e) {
                            return !1 !== this.IsServerConfirmed(e) && !this.HasProperty(e, this.SERVER_RECVED)
                        }
                    }, {
                        key: "IsServerConfirmed",
                        value: function(e) {
                            return !!this.HasProperty(e, this.SERVER_CONFORMED)
                        }
                    }, {
                        key: "IsCheckedResend",
                        value: function(e) {
                            return !!this.HasProperty(e, this.CHECKED_RESEND)
                        }
                    }, {
                        key: "IsResendSended",
                        value: function(e) {
                            return !!this.HasProperty(e, this.RESEND_SENDED)
                        }
                    }, {
                        key: "IsServerRejected",
                        value: function(e) {
                            return !!this.HasProperty(e, this.SERVER_REJECTED)
                        }
                    }, {
                        key: "AddProperty",
                        value: function(e, t) {
                            r.default.isBiggerUint(this.maxSeq - this.MaxSeqGap, e) || this.update(e, t)
                        }
                    }, {
                        key: "RemoveProperty",
                        value: function(e, t) {
                            r.default.isBiggerUint(this.maxSeq - this.MaxSeqGap, e) || (this.statusVec[this.getPos(e)] = this.statusVec[this.getPos(e)] & (r.default.UintMax ^ t),
                            (0 === this.minSeq || r.default.isBiggerUint(this.minSeq, e)) && (this.minSeq = e))
                        }
                    }, {
                        key: "HasProperty",
                        value: function(e, t) {
                            return (this.getStatus(e) & t) === t
                        }
                    }, {
                        key: "getPos",
                        value: function(e) {
                            return e >> 1 & this.MaxByteIndex
                        }
                    }, {
                        key: "update",
                        value: function(e, t) {
                            this.statusVec[this.getPos(e)] |= t,
                            (0 === this.minSeq || r.default.isBiggerUint(this.minSeq, e)) && (this.minSeq = e)
                        }
                    }, {
                        key: "addStatus",
                        value: function(e, t) {
                            if (0 === this.maxSeq)
                                return this.maxSeq = e,
                                    void this.update(e, t);
                            if (r.default.isBiggerUint(e, this.maxSeq))
                                r.default.isBiggerUint(e, this.maxSeq + this.MaxSeqGap) ? (this.reset(),
                                    this.maxSeq = e,
                                    this.update(e, t)) : this.onBiggerSeq(e, t);
                            else {
                                if (r.default.isBiggerUint(this.maxSeq - this.MaxSeqGap, e))
                                    return;
                                this.update(e, t)
                            }
                        }
                    }, {
                        key: "onBiggerSeq",
                        value: function(e, t) {
                            var i = e - this.MaxSeqGap;
                            r.default.isBiggerUint(i, this.minSeq) && this.resetMinPos(i),
                                this.maxSeq = e,
                                this.update(e, t)
                        }
                    }, {
                        key: "resetMinPos",
                        value: function(e) {
                            var t = this.getPos(this.minSeq)
                                , i = this.getPos(e - 2);
                            this.minSeq = e,
                                t > i ? (this.setToZero(this.statusVec, t, this.MaxByteIndex - t + 1),
                                    this.setToZero(this.statusVec, 0, i + 1)) : this.setToZero(this.statusVec, t, i - t + 1)
                        }
                    }, {
                        key: "setToZero",
                        value: function(e, t, i) {
                            for (var a = 0; a < i; a++)
                                e[t + a] = 0
                        }
                    }, {
                        key: "getStatus",
                        value: function(e) {
                            var t = 0;
                            return 0 !== this.maxSeq && r.default.isEqualOrBiggerUint(e, this.minSeq) && r.default.isEqualOrBiggerUint(this.maxSeq, e) && (t = this.statusVec[this.getPos(e)]),
                                t
                        }
                    }, {
                        key: "checkCurrentSeq",
                        value: function(e, t, i) {
                            if (0 === this.maxRecvSeq)
                                return this.maxRecvSeq = e,
                                    this.minRecvSeq = e,
                                    !1;
                            if (0 !== this.minRecvSeqLimit && r.default.isBiggerUint(this.minRecvSeqLimit, e))
                                return u.default.debug("PacketSeqChecker.checkCurrentSeq cur video seq=" + e + " smaller than minRecvLimit=" + this.minRecvSeqLimit),
                                    this.seqInvalidStamp = i,
                                    !1;
                            if (r.default.isEqualOrBiggerUint(this.minRecvSeq, e))
                                return this.minRecvSeq - e > this.packetSeqGap ? (u.default.debug("PacketSeqChecker.checkCurrentSeq cur video seq=" + e + " too smaller than minRecvSeq=" + this.minRecvSeq),
                                    this.minRecvSeqLimit = e,
                                    this.seqInvalidStamp = i,
                                    !1) : (this.minRecvSeq = e,
                                    !0);
                            if (0 !== t && r.default.isEqualOrBiggerUint(t, e))
                                return !1;
                            if (r.default.isEqualOrBiggerUint(this.maxRecvSeq, e))
                                return !0;
                            var a = this.maxRecvSeq;
                            return this.maxRecvSeq = e,
                                !(e - a > this.packetSeqGap && (u.default.log("PacketSeqChecker.checkCurrentSeq cur video seq=" + e + " too larger than maxRecvSeq=" + a),
                                    this.minRecvSeqLimit = e,
                                    this.minRecvSeq = e,
                                    this.seqInvalidStamp = i,
                                    1))
                        }
                    }]),
                        e
                }();
                t.default = o
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.seq = 0,
                            this.createStampc = 0,
                            this.sendStampc = 0,
                            this.delta = 0,
                            this.resendTimes = 0,
                            this.received = !1,
                            this.parentDelay = 0,
                            this.parentSeqDiff = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "reset",
                        value: function() {
                            this.seq = 0,
                                this.createStampc = 0,
                                this.sendStampc = 0,
                                this.delta = 0,
                                this.resendTimes = 0,
                                this.received = !1,
                                this.parentDelay = 0,
                                this.perantSeqDiff = 0
                        }
                    }]),
                        e
                }();
                t.default = r
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1));
                a(i(3));
                var r = function() {
                    function e(t) {
                        (0,
                            s.default)(this, e),
                            this.cap = t > 20 ? t : 200,
                            this.jittersVec = [],
                            this.jitterIdx = 0,
                            this.maxJitter = Number.NEGATIVE_INFINITY,
                            this.minJitter = Number.POSITIVE_INFINITY
                    }
                    return (0,
                        n.default)(e, [{
                        key: "reset",
                        value: function() {
                            this.jittersVec = [],
                                this.jitterIdx = 0,
                                this.maxJitter = Number.NEGATIVE_INFINITY
                        }
                    }, {
                        key: "calculateFirstRto",
                        value: function(e, t) {
                            var i = Number(t) - Number(e.stampc);
                            this.addJitter(i);
                            var a = this.max()
                                , s = 0;
                            return null === a ? s = 150 : (s = a - i,
                                s += 200,
                                s = this.limit(30, s, 1500)),
                                s
                        }
                    }, {
                        key: "addJitter",
                        value: function(e) {
                            var t = !1;
                            this.jittersVec.length === this.cap ? (e > this.maxJitter ? this.maxJitter = e : this.jittersVec[this.jitterIdx] === this.maxJitter && (t = !0),
                                this.jittersVec[this.jitterIdx++] = e,
                            this.jitterIdx >= this.cap && (this.jitterIdx = this.jitterIdx % this.cap),
                            t && this.reCalcMax()) : (this.jittersVec.push(e),
                            e > this.maxJitter && (this.maxJitter = e))
                        }
                    }, {
                        key: "reCalcMax",
                        value: function() {
                            this.maxJitter = Number.NEGATIVE_INFINITY;
                            for (var e = 0; e < this.jittersVec.length; e++)
                                this.jittersVec[e] > this.maxJitter && (this.maxJitter = this.jittersVec[e])
                        }
                    }, {
                        key: "max",
                        value: function() {
                            return this.jittersVec.length >= 20 ? this.maxJitter : null
                        }
                    }, {
                        key: "limit",
                        value: function(e, t, i) {
                            return t < e ? e : t > i ? i : t
                        }
                    }, {
                        key: "limitFirstDownlinkRto",
                        value: function(e, t, i) {
                            var a = 6 * (i - t) / 2;
                            return e = e > a ? e - a : 0
                        }
                    }]),
                        e
                }();
                t.default = r
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(8))
                    , u = function() {
                    function e() {
                        (0,
                            s.default)(this, e),
                            this.uid = 0,
                            this.key = 0,
                            this.seqNum = 0,
                            this.isEmpty = !1,
                            this.isFastAccess = !1,
                            this.isKeyFrame = !1,
                            this.dts = 0,
                            this.streamData = null,
                            this.aacConfig = null,
                            this.ssrc = r.default.UintMax,
                            this.codec = 0,
                            this.recvTs = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "reset",
                        value: function() {
                            this.uid = 0,
                                this.key = 0,
                                this.seqNum = 0,
                                this.isEmpty = !1,
                                this.isFastAccess = !1,
                                this.isKeyFrame = !1,
                                this.dts = 0,
                                this.streamData = null,
                                this.aacConfig = null,
                                this.ssrc = r.default.UintMax,
                                this.codec = 0,
                                this.recvTs = 0
                        }
                    }]),
                        e
                }();
                t.default = u
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(14))
                    , n = a(i(0))
                    , r = a(i(1))
                    , u = a(i(3))
                    , o = a(i(209))
                    , l = a(i(5))
                    , d = a(i(8));
                a(i(68));
                var h = function() {
                    function e() {
                        (0,
                            n.default)(this, e),
                            this.uid = 0,
                            this.key = null,
                            this.isFastAccess = !1,
                            this.hasFirst = !1,
                            this.pktNum = null,
                            this.firstPktSeq = null,
                            this.lastPktSeq = null,
                            this.dts = null,
                            this.recvTs = null,
                            this.size = 0,
                            this.streamData = null,
                            this.packets = [],
                            this.frameType = -1,
                            this.allframeType = null,
                            this.isPlayed = !1
                    }
                    return (0,
                        r.default)(e, [{
                        key: "append",
                        value: function(e) {
                            if (e.isFastAccessPacket && (this.isFastAccess = !0),
                            0 === this.packets.length)
                                this.uid = e.uid,
                                    this.key = e.lastKeyFrame,
                                    this.frameType = e.frameType,
                                    this.allframeType = e.priority,
                                    this.pktNum = e.frameNum,
                                    this.packets.push(e),
                                    this.size += e.streamData.length;
                            else {
                                if (this.isFull)
                                    return !0;
                                for (var t = !0, i = this.packets.length - 1; i >= 0; i--) {
                                    if (this.packets[i].seqNum === e.seqNum)
                                        return !0;
                                    if (this.packets[i].seqNum < e.seqNum) {
                                        this.packets.splice(i + 1, 0, e),
                                            this.size += e.streamData.length,
                                            t = !1;
                                        break
                                    }
                                }
                                t && (this.packets.splice(0, 0, e),
                                    this.size += e.streamData.length)
                            }
                            if (e.isFirstSeq && (this.firstPktSeq = e.seqNum,
                                this.lastPktSeq = e.seqNum + 2 * (this.pktNum - 1),
                                this.dts = e.getFrameTime(),
                                this.hasFirst = !0),
                                this.isFull) {
                                this.recvTs = l.default.now(),
                                    this.streamData = new Uint8Array(this.size);
                                for (var a = 0, s = 0; s < this.packets.length; s++)
                                    try {
                                        this.streamData.set(this.packets[s].streamData, a),
                                            a += this.packets[s].streamData.length
                                    } catch (e) {
                                        return u.default.error("VideoFrame.append error, name:" + e.name + " msg:" + e.message),
                                            !1
                                    }
                                if (a !== this.size)
                                    return u.default.error("VideoFrame.Append size error, infact:" + a + " expected:" + this.size + " key:" + this.key + " firstSeq:" + this.firstPktSeq + " lastSeq:" + (this.firstPktSeq + 2 * this.pktNum) + " num:" + this.pktNum + " len:" + this.packets.length),
                                        this.reset(),
                                        !1
                            }
                            return !0
                        }
                    }, {
                        key: "getLastFrameType",
                        value: function(e) {
                            return this.allframeType >> 2 * e & 3
                        }
                    }, {
                        key: "getOldestPacket",
                        value: function() {
                            return this.packets[0]
                        }
                    }, {
                        key: "getLatestPacket",
                        value: function() {
                            var e = null
                                , t = !0
                                , i = !1
                                , a = void 0;
                            try {
                                for (var n, r = (0,
                                    s.default)(this.packets); !(t = (n = r.next()).done); t = !0) {
                                    var u = n.value;
                                    (null === e || u.recvOsTime > e.recvOsTime) && (e = u)
                                }
                            } catch (e) {
                                i = !0,
                                    a = e
                            } finally {
                                try {
                                    !t && r.return && r.return()
                                } finally {
                                    if (i)
                                        throw a
                                }
                            }
                            return e
                        }
                    }, {
                        key: "getFirstNotRecvSeq",
                        value: function() {
                            if (!this.hasFirst)
                                return u.default.log("VideoFrame.getFirstNotRecvSeq error, firstPktSeq not recv"),
                                    d.default.UintMax;
                            if (this.isFull)
                                return u.default.log("VideoFrame.getFirstNotRecvSeq error, no packet lost"),
                                    d.default.UintMax;
                            if (1 === this.packets.length)
                                return this.firstPktSeq + 2;
                            for (var e = 1; e < this.packets.length; e++) {
                                if (this.packets[e].seqNum - this.packets[e - 1].seqNum > 2)
                                    return this.packets[e - 1].seqNum + 2;
                                if (e === this.packets.length - 1)
                                    return this.packets[e].seqNum + 2
                            }
                            return u.default.log("VideoFrame.getFirstNotRecvSeq error, code error"),
                                d.default.UintMax
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            this.uid = 0,
                                this.key = null,
                                this.isFastAccess = !1,
                                this.hasFirst = null,
                                this.pktNum = null,
                                this.firstPktSeq = null,
                                this.lastPktSeq = null,
                                this.dts = null,
                                this.recvTs = null,
                                this.size = 0,
                                this.packets = [],
                                this.frameType = -1,
                                this.allframeType = null,
                                this.isPlayed = !1
                        }
                    }, {
                        key: "isFull",
                        get: function() {
                            return this.packets.length === this.pktNum
                        }
                    }, {
                        key: "isKeyFrame",
                        get: function() {
                            return this.frameType === o.default.FRAMETYPE_VIDEO_I
                        }
                    }, {
                        key: "isPFrame",
                        get: function() {
                            return this.frameType === o.default.FRAMETYPE_VIDEO_P
                        }
                    }, {
                        key: "isBFrame",
                        get: function() {
                            return this.frameType === o.default.FRAMETYPE_VIDEO_B
                        }
                    }]),
                        e
                }();
                t.default = h
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = (a(i(23)),
                    a(i(8)))
                    , u = a(i(3))
                    , o = a(i(5))
                    , l = function() {
                    function e(t) {
                        (0,
                            s.default)(this, e),
                            this.player = t,
                            this.lateDiscardAudioPktCnt = 0,
                            this.recvAudioPktCnt = 0,
                            this.playAudioFrameCnt = 0,
                            this.emptyAudioFrameCnt = 0,
                            this.audioRecvDelaySum = 0,
                            this.audioRecvDelayCnt = 0,
                            this.audioCapDelaySum = 0,
                            this.audioCapDelayCnt = 0,
                            this.lateFrames = 0,
                            this.lossFrames = 0,
                            this.ambiguousEmptyFrames = 0,
                            this.normalPlayFrames = 0,
                            this.emptyFrames = 0,
                            this.ssrc = r.default.UintMax,
                            this.audioSsrc = r.default.UintMax,
                            this.lastSsrcStartTime = 0,
                            this.latestNormalSsrc = -1
                    }
                    return (0,
                        n.default)(e, [{
                        key: "reset",
                        value: function() {
                            this.lateDiscardAudioPktCnt = 0,
                                this.recvAudioPktCnt = 0,
                                this.playAudioFrameCnt = 0,
                                this.emptyAudioFrameCnt = 0,
                                this.audioRecvDelaySum = 0,
                                this.audioRecvDelayCnt = 0,
                                this.audioCapDelaySum = 0,
                                this.audioCapDelayCnt = 0,
                                this.lateFrames = 0,
                                this.lossFrames = 0,
                                this.normalPlayFrames = 0,
                                this.emptyFrames = 0
                        }
                    }, {
                        key: "resetSsrc",
                        value: function() {
                            u.default.log("AudioPlayStat.resetSsrc"),
                                this.audioSsrc = r.default.UintMax,
                                this.lastSsrcStartTime = 0,
                                this.latestNormalSsrc = -1
                        }
                    }, {
                        key: "onPlayStat",
                        value: function(e) {
                            var t = o.default.now();
                            if (this.playAudioFrameCnt++,
                            !e.isEmpty && !e.isFastAccess) {
                                var i = this.player.calcRecvToPlayDelay(t, e.recvTs);
                                i > 0 && i < 25e3 && (this.audioCapDelaySum += i,
                                    this.audioCapDelayCnt++,
                                    this.audioRecvDelaySum += i,
                                    this.audioRecvDelayCnt++)
                            }
                            e.isEmpty ? this.ambiguousEmptyFrames++ : (this.switchSsrc(e.ssrc, t),
                                this.normalPlayFrames++,
                                this.ssrc === e.ssrc ? this.lateFrames += this.ambiguousEmptyFrames : (this.emptyFrames += this.ambiguousEmptyFrames,
                                    this.ssrc = e.ssrc),
                                this.ambiguousEmptyFrames = 0)
                        }
                    }, {
                        key: "onAudioStat",
                        value: function() {
                            var e = ""
                                , t = this.audioRecvDelayCnt ? this.audioRecvDelaySum / this.audioRecvDelayCnt : 0
                                , i = this.audioCapDelayCnt ? this.audioCapDelaySum / this.audioCapDelayCnt : 0;
                            e += " jitter=" + (t = Math.round(t)) + "-" + (i = Math.round(i)) + " recv=" + this.recvAudioPktCnt + " play=" + this.playAudioFrameCnt + " discard=" + this.lateDiscardAudioPktCnt + (this.emptyAudioFrameCnt ? " empty=" + this.emptyAudioFrameCnt : "") + (this.normalPlayFrames ? " normalPlay=" + this.normalPlayFrames : "") + (this.emptyFrames ? " normalEmpty=" + this.emptyFrames : "") + (this.lateFrames ? " late=" + this.lateFrames : "") + (this.ambiguousEmptyFrames ? " ambiguous=" + this.ambiguousEmptyFrames : "") + (this.lossFrames ? " lossFrames=" + this.lossFrames : "");
                            var a = this.player.msePlayer
                                , s = this.player.audioChain.size;
                            u.default.log("AUDIO_PLAY playTime=" + a.getCurrentTime() + " bufLen=" + a.getBufferLen() + "-" + a.getParserBufLen() + " qsz=" + s + e),
                                this.reset()
                        }
                    }, {
                        key: "switchSsrc",
                        value: function(e, t) {
                            this.audioSsrc !== e && (u.default.log("AudioPlayStat.switchSsrc: " + this.latestNormalSsrc + " -> " + this.audioSsrc + " -> " + e),
                            e !== r.default.UintMax && (-1 !== this.latestNormalSsrc && this.latestNormalSsrc === e && (this.audioSsrc,
                                r.default.UintMax),
                                this.latestNormalSsrc = e),
                                this.lastSsrcStartTime = t,
                                this.audioSsrc = e)
                        }
                    }]),
                        e
                }();
                t.default = l
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = a(i(23))
                    , u = a(i(8))
                    , o = a(i(3))
                    , l = a(i(5))
                    , d = a(i(333))
                    , h = function() {
                    function e(t) {
                        (0,
                            s.default)(this, e),
                            this.player = t,
                            this.recvVideoFrameCnt = 0,
                            this.recvVideoPktCnt = 0,
                            this.recvVideoByteCnt = 0,
                            this.playVideoFrameCnt = 0,
                            this.skipVideoFrameCnt = 0,
                            this.skipVideoPauseTime = 0,
                            this.skipVideoPauseCnt = 0,
                            this.videoRecvDelaySum = 0,
                            this.videoRecvDelayCnt = 0,
                            this.videoCapDelaySum = 0,
                            this.videoCapDelayCnt = 0,
                            this.pauseVideoTime = 0,
                            this.pauseVideoCnt = 0,
                            this.sensePauseCnt = 0,
                            this.sensePauseTime = 0,
                            this.pauseReason = 0,
                            this.videoResendSendCnt = 0,
                            this.videoResendRecvCnt = 0,
                            this.videoResendRepeatCnt = 0,
                            this.videoResendServerLostCnt = 0,
                            this.videoResendNotRecvCnt = 0,
                            this.videoResendNotSendCnt = 0,
                            this.videoResendTooOldCnt = 0,
                            this.videoResendUrgentSend = 0,
                            this.videoResendLargeDelay = 0,
                            this.videoResendFailedAck = 0,
                            this.videoResendPacketsInAll = 0,
                            this.skipVideoPauseTime5 = 0,
                            this.skipVideoPauseCnt5 = 0,
                            this.pauseVideoTime5 = 0,
                            this.pauseVideoCnt5 = 0,
                            this.sensePauseCnt5 = 0,
                            this.sensePauseTime5 = 0,
                            this.playVideoFrameCnt5 = 0,
                            this.lastPlayVideoTs = 0,
                            this.lastPlayVideoOsTs = 0
                    }
                    return (0,
                        n.default)(e, [{
                        key: "reset",
                        value: function(e) {
                            this.recvVideoFrameCnt = 0,
                                this.recvVideoPktCnt = 0,
                                this.recvVideoByteCnt = 0,
                                this.playVideoFrameCnt = 0,
                                this.skipVideoFrameCnt = 0,
                                this.skipVideoPauseTime = 0,
                                this.skipVideoPauseCnt = 0,
                                this.videoRecvDelaySum = 0,
                                this.videoRecvDelayCnt = 0,
                                this.videoCapDelaySum = 0,
                                this.videoCapDelayCnt = 0,
                                this.pauseVideoTime = 0,
                                this.pauseVideoCnt = 0,
                                this.sensePauseCnt = 0,
                                this.sensePauseTime = 0,
                                this.pauseReason = 0,
                                this.videoResendSendCnt = 0,
                                this.videoResendRecvCnt = 0,
                                this.videoResendRepeatCnt = 0,
                                this.videoResendServerLostCnt = 0,
                                this.videoResendNotRecvCnt = 0,
                                this.videoResendNotSendCnt = 0,
                                this.videoResendTooOldCnt = 0,
                                this.videoResendUrgentSend = 0,
                                this.videoResendLargeDelay = 0,
                                this.videoResendFailedAck = 0,
                                this.videoResendPacketsInAll = 0,
                            e && (this.skipVideoPauseTime5 = 0,
                                this.skipVideoPauseCnt5 = 0,
                                this.pauseVideoTime5 = 0,
                                this.pauseVideoCnt5 = 0,
                                this.sensePauseCnt5 = 0,
                                this.sensePauseTime5 = 0,
                                this.playVideoFrameCnt5 = 0),
                                this.lastPlayVideoTs = 0,
                                this.lastPlayVideoOsTs = 0
                        }
                    }, {
                        key: "onVideoStat",
                        value: function(e, t) {
                            var i = this.player.pauseStartTs;
                            if (i) {
                                var a = l.default.now()
                                    , s = a - i;
                                s > 200 && (o.default.warn("VideoPlayStat.onVideoStat pauseTime=" + s + " start=" + i + " now=" + a),
                                    this.sensePauseTime += s,
                                    this.sensePauseCnt++,
                                    this.sensePauseTime5 += s,
                                    this.sensePauseCnt5++,
                                    this.player.pauseStartTs = a)
                            }
                            var n = this.player.uid
                                , r = this.onResendStat();
                            o.default.log("VIDEO_RESEND uid=" + n + " " + r);
                            var u = this.player.msePlayer
                                , d = this.player.videoChain.size
                                , h = this.onStat(e, t);
                            o.default.log("VIDEO_PLAY uid=" + n + " playTime=" + u.getCurrentTime() + " bufLen=" + u.getBufferLen() + "-" + u.getParserBufLen() + " qsz=" + d + h)
                        }
                    }, {
                        key: "onResendStat",
                        value: function() {
                            var e = "";
                            return e += "inAll=" + this.videoResendPacketsInAll + " send=" + this.videoResendSendCnt + " recv=" + this.videoResendRecvCnt + " repeat=" + this.videoResendRepeatCnt + (this.videoResendServerLostCnt ? " serverLost=" + this.videoResendServerLostCnt : "") + (this.videoResendNotRecvCnt ? " notRecv=" + this.videoResendNotRecvCnt : "") + (this.videoResendNotSendCnt ? " notSend=" + this.videoResendNotSendCnt : "") + (this.videoResendTooOldCnt ? " tooOld=" + this.videoResendTooOldCnt : "") + (this.videoResendUrgentSend ? " urgent=" + this.videoResendUrgentSend : "") + (this.videoResendLargeDelay ? " largeDelay=" + this.videoResendLargeDelay : "") + (this.videoResendFailedAck ? " failedAck=" + this.videoResendFailedAck : "")
                        }
                    }, {
                        key: "onStat",
                        value: function(e, t) {
                            var i = ""
                                , a = this.videoRecvDelayCnt ? this.videoRecvDelaySum / this.videoRecvDelayCnt : 0
                                , s = this.videoCapDelayCnt ? this.videoCapDelaySum / this.videoCapDelayCnt : 0;
                            return i += " jitter=" + (a = Math.round(a)) + "-" + (s = Math.round(s)) + " recv=" + this.recvVideoByteCnt + "-" + this.recvVideoPktCnt + "-" + this.recvVideoFrameCnt + " play=" + this.playVideoFrameCnt + (this.pauseVideoCnt ? " pause=" + this.pauseVideoTime + "-" + this.pauseVideoCnt : "") + (e && this.pauseVideoCnt5 ? " pause5=" + this.pauseVideoTime5 + "-" + this.pauseVideoCnt5 : "") + (this.skipVideoFrameCnt || this.skipVideoPauseTime ? " skip=" + this.skipVideoFrameCnt + "-" + this.skipVideoPauseTime + "-" + this.skipVideoPauseCnt : "") + (e && this.skipVideoPauseTime5 ? " skip5=" + this.skipVideoPauseTime5 + "-" + this.skipVideoPauseCnt5 : "") + (this.sensePauseCnt ? " sense=" + this.sensePauseTime + "-" + this.sensePauseCnt : "") + (e && this.sensePauseCnt5 ? " sense5=" + this.sensePauseTime5 + "-" + this.sensePauseCnt5 : ""),
                                this.reset(e || 0 === t),
                                i
                        }
                    }, {
                        key: "onPlayStat",
                        value: function(e, t, i) {
                            var a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null
                                , s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0
                                , n = l.default.now()
                                , r = this.player.getPlayTime()
                                , u = this.player.lastPlayTs;
                            if (this.playVideoFrameCnt++,
                                this.playVideoFrameCnt5++,
                                !e.isFastAccess) {
                                var h = this.player.calcRecvToPlayDelay(n, e.recvTs);
                                h > 0 && h < 25e3 && e.dts > u && (this.videoRecvDelaySum += h,
                                    this.videoRecvDelayCnt++);
                                var f = this.player.calcCapToPlayDelay(n, e.dts);
                                f > 0 && f < 25e3 && e.dts > u && (this.videoCapDelaySum += f,
                                    this.videoCapDelayCnt++)
                            }
                            var c = 0;
                            if (e.dts <= u && 0 !== this.lastPlayVideoOsTs && e.dts - this.player.firstTs < r) {
                                var p = e.dts - this.lastPlayVideoTs
                                    , v = t - this.lastPlayVideoOsTs;
                                (c = v > p ? v - p : 0) <= 200 ? c = 0 : (this.pauseVideoTime += c,
                                    this.pauseVideoCnt++,
                                    this.pauseVideoTime5 += c,
                                    this.pauseVideoCnt5++)
                            }
                            var m = 0;
                            if (s > 0 && 0 !== this.lastPlayVideoTs && ((m = e.dts - this.lastPlayVideoTs) <= 200 ? m = 0 : (this.skipVideoPauseTime += m,
                                this.skipVideoPauseCnt++,
                                this.skipVideoPauseTime5 += m,
                                this.skipVideoPauseCnt5++)),
                            (c > 0 || m > 0) && this.pauseReason === d.default.VPR_NORMAL) {
                                var y = this.getVideoPauseReason(s, e, a, i);
                                d.default.isValid(y) ? this.pauseReason = y : (o.default.error("VideoPlayStat.onPlayStat invalid pause reson:" + y),
                                    this.pauseReason = d.default.VPR_UNKNOWN)
                            }
                            this.lastPlayVideoTs = e.dts,
                                this.lastPlayVideoOsTs = t
                        }
                    }, {
                        key: "getVideoPauseReason",
                        value: function(e, t, i, a) {
                            if (r.default.videoLink.getVideoConnectedDuration() < 1e4)
                                return d.default.VPR_LINKCLOSEDRECENTLY;
                            if (r.default.downlinkRTOCalculator.GetSmoothRtt() >= 2e3)
                                return d.default.VPR_LARGERTT;
                            if (e <= 0)
                                return this.judgeLateReason(t);
                            var s = 0;
                            if (null === i)
                                return d.default.VPR_UNKNOWN;
                            for (var n = i.prev, l = null; ; ) {
                                if (null === n || n === i) {
                                    n = null;
                                    break
                                }
                                if ((l = n.data).key === a + 1)
                                    break;
                                n = n.prev
                            }
                            var h = this.player.lastPlayVideoSeq;
                            if (null === n)
                                s = h + 2;
                            else {
                                if (l.isFull)
                                    return o.default.error("VideoPlayStat.getVideoPauseReason error, earliestFrame.isFull === true"),
                                        d.default.VPR_UNKNOWN;
                                if (l.hasFirst) {
                                    if (s = l.getFirstNotRecvSeq(),
                                        u.default.isUintMax(s))
                                        return o.default.error("VideoPlayStat.getVideoPauseReason error, destinationSeq error"),
                                            d.default.VPR_UNKNOWN
                                } else
                                    s = h + 2
                            }
                            return this.judgeNotRecvReason(s)
                        }
                    }, {
                        key: "judgeLateReason",
                        value: function(e) {
                            var t = e.getLatestPacket();
                            return t.isDownlinkResend ? d.default.VPR_RESENDRECVLATE : t.isUplinkResend ? d.default.VPR_UPLINKRESENDLATE : 0 !== t.peerUid ? d.default.VPR_P2PLATE : d.default.VPR_DOWNLINKLATE
                        }
                    }, {
                        key: "judgeNotRecvReason",
                        value: function(e) {
                            var t = this.player.videoResender.seqStatus;
                            return t.IsServerLost(e) ? d.default.VPR_SERVERLOST : t.IsServerRejected(e) ? d.default.VPR_SERVERREJECT : t.IsResendSended(e) ? d.default.VPR_RESENDNOTRECV : d.default.VPR_NOTRESEND
                        }
                    }]),
                        e
                }();
                t.default = h
            }
            , function(e, t, i) {
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }),
                    t.default = {
                        VPR_NORMAL: 0,
                        VPR_SERVERLOST: 1,
                        VPR_SERVERREJECT: 2,
                        VPR_NOTRESEND: 3,
                        VPR_RESENDNOTRECV: 4,
                        VPR_DOWNLINKLATE: 5,
                        VPR_UPLINKRESENDLATE: 6,
                        VPR_RESENDRECVLATE: 7,
                        VPR_P2PLATE: 8,
                        VPR_LINKCLOSEDRECENTLY: 9,
                        VPR_LARGERTT: 10,
                        VPR_UNKNOWN: 100,
                        isValid: function(e) {
                            return e >= 0 && e <= 10 || 100 === e
                        }
                    }
            }
            , function(e, t, i) {
                function a(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    }
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                });
                var s = a(i(0))
                    , n = a(i(1))
                    , r = (a(i(5)),
                    a(i(201)))
                    , u = a(i(3))
                    , o = i(20)
                    , l = function() {
                    function e(t, i, a) {
                        (0,
                            s.default)(this, e),
                            this.handler = t,
                            this.videoMgr = i,
                            this.connected = !1,
                            this.startTs = 0,
                            this.playing = !1,
                            this.loadTime = 0,
                            this.connectTime = 0,
                            this.players = [],
                            this.libURL = a,
                            this.libLoaded = !1,
                            this.flacURL = ""
                    }
                    return (0,
                        n.default)(e, [{
                        key: "changeVideoMgr",
                        value: function(e) {
                            this.videoMgr = e
                        }
                    }, {
                        key: "loadFlacLib",
                        value: function(e) {
                            var t = document.createElement("script");
                            t.type = "text/javaScript",
                                t.onload = this.flacLibLoaded.bind(this),
                                t.src = e,
                                document.getElementsByTagName("head")[0].appendChild(t)
                        }
                    }, {
                        key: "flacLibLoaded",
                        value: function() {
                            u.default.log("flaclib complete"),
                                this.libLoaded = !0,
                                this.play(this.flacURL)
                        }
                    }, {
                        key: "isPlaying",
                        value: function() {
                            return this.playing
                        }
                    }, {
                        key: "getLoger",
                        value: function() {
                            return u.default
                        }
                    }, {
                        key: "play",
                        value: function(e) {
                            if (this.flacURL = e,
                                this.libLoaded) {
                                var t = new FlacPlayer(this);
                                t.setLogger(u.default);
                                var i = new r.default(t)
                                    , a = {
                                    player: t,
                                    loader: i
                                };
                                this.players.push(a),
                                    i.connect(e)
                            } else
                                this.loadFlacLib(this.libURL)
                        }
                    }, {
                        key: "setVolume",
                        value: function(e) {
                            for (var t = 0; t < this.players.length; t++)
                                this.players[t].player.setVolume(110 * e)
                        }
                    }, {
                        key: "getCurrentTime",
                        value: function() {
                            return this.handler && this.handler.playingMgr ? Math.floor(this.handler.playingMgr.getCurrentTime()) : 0
                        }
                    }, {
                        key: "playerFlacError",
                        value: function(e) {
                            u.default.log("playerFlacError error:" + e),
                            this.isPlaying() && (this.playing = !1,
                                this.handler.flacPlayStatusChange(),
                                this.handler.trigger(o.Event.FLAC_AUDIO_ERROR))
                        }
                    }, {
                        key: "onstartplay",
                        value: function() {
                            this.isPlaying() || (this.playing = !0,
                                setTimeout(function() {
                                    this.isPlaying() && (this.handler.trigger(o.Event.FLAC_AUDIO_START),
                                        this.handler.flacPlayStatusChange())
                                }
                                    .bind(this), 1e3))
                        }
                    }, {
                        key: "onClosed",
                        value: function() {
                            this.reset()
                        }
                    }, {
                        key: "stop",
                        value: function() {
                            this.reset(),
                                this.handler.flacPlayStatusChange()
                        }
                    }, {
                        key: "reset",
                        value: function() {
                            this.connected = !1,
                                this.startTs = 0,
                                this.playing = !1;
                            for (var e = 0; e < this.players.length; e++) {
                                var t = this.players[e].player
                                    , i = this.players[e].loader;
                                t && (t.stop(),
                                    t = null),
                                i && (i.close(),
                                    i = null)
                            }
                            this.players = []
                        }
                    }]),
                        e
                }();
                t.default = l
            }
        ])
    }
    , function(e, t) {
        e.exports = "<div class=player-wrap id=player-wrap> <div class=player-video id=player-video> <img id=hy-video-capture> <div id=hy-watermark class=hy-watermark-normal>虎牙直播</div> <div id=player-replayicon> </div> <div class=qr-code> <div class=qr-code-close></div> <div class=qr-code-icon></div> <p>用虎牙APP 为主播点赞</p> </div> <div id=danmuwrap> <div id=danmudiv></div> <div id=danmudiv2></div> </div> <div class=player-common-toast> </div> </div> <div class=player-loading id=player-loading> <div class=player-loading-content> <div class=player-loading-logo></div> <div class=player-loading-progress alt=进度条></div> <div class=player-loading-changeline> <p>目前网络有点卡，试一下下面的方法~</p> <div class=change-line-g> <button class=change-line-btn id=download-pc-btn><i class=download-pc-icon></i><span>下载PC客户端</span></button> <button class=change-line-btn id=change-line-btn><i class=change-line-icon></i><span>切换线路</span></button> </div> </div> </div> </div> <div id=player-linkmic> <ul></ul> </div> </div> <div id=player-ctrl-full-area></div> <div class=player-ctrl-wrap id=player-ctrl-wrap></div> <div class=player-guess-wrap id=player-guess-wrap></div> <div class=player-gift-wrap id=player-gift-wrap> <div class=player-gift-left> <div class=player-chest> <div class=player-chest-btn> <div class=player-chest-bg id=player-chest-btn> <div class=box-icon-word> <p></p> </div> <div class=player-chest-cd> 30:00 </div> <div class=chest-award-count></div> </div> </div> <p class=player-chest-tip> <i class=chest-stat-2><i class=chest-type-2></i></i> <i class=chest-stat-3><i class=chest-type-3></i></i> <i class=chest-stat-4></i> <span></span> </p> <p class=player-chest-login> <i></i><span></span> </p> <p class=player-chest-levelup> <i class=chest-levelup-close></i><span></span> <i class=chest-type-levelup></i> </p> </div> <div class=guess-icon> <div class=guess-box> <i></i> <div class=guess-icon-word> <p>玩竞猜</p> </div> </div> </div> <div class=tv-icon> <div class=tv-box> <i></i> <div class=tv-icon-word> <p></p> </div> <div class=tv-tips> </div> </div> </div> <div class=ship-icon> <div class=ship-box> <div class=ship-circle> <div class=ship-circle-gray> </div> <div class=ship-wrapper-right> <div class=ship-progress-right> </div> </div> <div class=ship-wrapper-left> <div class=ship-progress-left /> </div> </div> </div> <i id=ship-phase class=ship-phase0></i> <div class=ship-icon-word> <p>0票</p> </div> <div class=ship-tips> </div> </div> <div class=qa-icon> <div class=qa-box> <i></i> <div class=qa-word> <p></p> </div> </div> </div> <div id=math-dragon-big class=match-dragon> <div class=dragon-box> <i></i> <div class=dragon-word> <p></p> </div> </div> <div class=dragon-tips></div> </div> <div id=math-dragon-small class=match-dragon> <div class=dragon-box> <i></i> <div class=dragon-word> <p></p> </div> </div> <div class=dragon-tips></div> </div> <div class=danmu-question-icon> <div class=danmu-question-box> <i></i> <div class=danmu-question-word> <p>我问你答</p> </div> </div> </div> </div> <ul class=player-gift-right> <li id=player-punch-btn> <i></i> <p>首充礼包</p> </li> <li id=player-recharge-btn> <div id=player-recharge-click> <i></i> <div id=recharge-discount-icon></div> <div class=recharge-btn id=recharge-btn></div> <p>充值</p> </div> <div class=player-recharge-tip> <span class=recharge-now-btn>立即充值</span> </div> </li> <li id=player-package-btn> <i></i> <p>包裹</p> </li> </ul> <div class=player-face id=player-face></div> <div id=week-star-btn class=week-star-0 title=礼物周星榜></div> </div> <div id=player-marquee-wrap class=player-marquee-wrap></div> <div id=player-danmu-report> <i></i><span></span> </div> <div id=hy-ad> <div id=adContainer> </div> <div class=ads-details> <p>了解详情</p><i></i></div> <div class=adsCountdown> <p></p> </div> </div> <div id=player-fullpage-right-btn></div>"
    }
]);
